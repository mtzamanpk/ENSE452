
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bbc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08004ccc  08004ccc  00005ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005148  08005148  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005148  08005148  00006148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005150  08005150  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005150  08005150  00006150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005154  08005154  00006154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005158  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b8  20000064  080051bc  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000121c  080051bc  0000721c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d44  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d15  00000000  00000000  00018dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  0001bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d88  00000000  00000000  0001cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019796  00000000  00000000  0001d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001374c  00000000  00000000  0003716e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093439  00000000  00000000  0004a8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddcf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e0c  00000000  00000000  000ddd38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000e2b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08004cb4 	.word	0x08004cb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08004cb4 	.word	0x08004cb4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	@ (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	@ (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	@ 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000080 	.word	0x20000080
 800018c:	200000d4 	.word	0x200000d4

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b096      	sub	sp, #88	@ 0x58
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fcbb 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f85b 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f8c5 	bl	800032c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001a2:	f000 f899 	bl	80002d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  floorQueue = xQueueCreate(2, sizeof(int));
 80001a6:	2200      	movs	r2, #0
 80001a8:	2104      	movs	r1, #4
 80001aa:	2002      	movs	r0, #2
 80001ac:	f002 fa52 	bl	8002654 <xQueueGenericCreate>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4a21      	ldr	r2, [pc, #132]	@ (8000238 <main+0xa8>)
 80001b4:	6013      	str	r3, [r2, #0]
  if (floorQueue == NULL) {
 80001b6:	4b20      	ldr	r3, [pc, #128]	@ (8000238 <main+0xa8>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d101      	bne.n	80001c2 <main+0x32>
      Error_Handler();
 80001be:	f000 fb1f 	bl	8000800 <Error_Handler>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of FloorSelectionT */
  /* Task Initialization */
  osThreadDef(FloorSelectionT, FloorSelectionTaskHandle, osPriorityNormal, 0, 128);
 80001c2:	4b1e      	ldr	r3, [pc, #120]	@ (800023c <main+0xac>)
 80001c4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80001c8:	461d      	mov	r5, r3
 80001ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FloorSelectionTHandle = osThreadCreate(osThread(FloorSelectionT), NULL);
 80001d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f002 f8bf 	bl	8002360 <osThreadCreate>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a16      	ldr	r2, [pc, #88]	@ (8000240 <main+0xb0>)
 80001e6:	6013      	str	r3, [r2, #0]

  osThreadDef(ElevatorMovemen, ElevatorMovementTaskHandle, osPriorityAboveNormal, 0, 256);
 80001e8:	4b16      	ldr	r3, [pc, #88]	@ (8000244 <main+0xb4>)
 80001ea:	f107 0420 	add.w	r4, r7, #32
 80001ee:	461d      	mov	r5, r3
 80001f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ElevatorMovemenHandle = osThreadCreate(osThread(ElevatorMovemen), NULL);
 80001fc:	f107 0320 	add.w	r3, r7, #32
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 f8ac 	bl	8002360 <osThreadCreate>
 8000208:	4603      	mov	r3, r0
 800020a:	4a0f      	ldr	r2, [pc, #60]	@ (8000248 <main+0xb8>)
 800020c:	6013      	str	r3, [r2, #0]

  osThreadDef(DisplayUpdateTa, DisplayUpdateTaskHandle, osPriorityLow, 0, 128);
 800020e:	4b0f      	ldr	r3, [pc, #60]	@ (800024c <main+0xbc>)
 8000210:	1d3c      	adds	r4, r7, #4
 8000212:	461d      	mov	r5, r3
 8000214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000218:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800021c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayUpdateTaHandle = osThreadCreate(osThread(DisplayUpdateTa), NULL);
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f002 f89b 	bl	8002360 <osThreadCreate>
 800022a:	4603      	mov	r3, r0
 800022c:	4a08      	ldr	r2, [pc, #32]	@ (8000250 <main+0xc0>)
 800022e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000230:	f002 f88f 	bl	8002352 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	bf00      	nop
 8000236:	e7fd      	b.n	8000234 <main+0xa4>
 8000238:	20000328 	.word	0x20000328
 800023c:	08004cdc 	.word	0x08004cdc
 8000240:	2000031c 	.word	0x2000031c
 8000244:	08004d08 	.word	0x08004d08
 8000248:	20000320 	.word	0x20000320
 800024c:	08004d34 	.word	0x08004d34
 8000250:	20000324 	.word	0x20000324

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b090      	sub	sp, #64	@ 0x40
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	2228      	movs	r2, #40	@ 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f004 f884 	bl	8004370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000276:	2302      	movs	r3, #2
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027a:	2301      	movs	r3, #1
 800027c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027e:	2310      	movs	r3, #16
 8000280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	2302      	movs	r3, #2
 8000284:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000286:	2300      	movs	r3, #0
 8000288:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800028a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800028e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	4618      	mov	r0, r3
 8000296:	f000 ff0b 	bl	80010b0 <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002a0:	f000 faae 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2302      	movs	r3, #2
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 f978 	bl	80015b4 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ca:	f000 fa99 	bl	8000800 <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3740      	adds	r7, #64	@ 0x40
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002dc:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 80002de:	4a12      	ldr	r2, [pc, #72]	@ (8000328 <MX_USART2_UART_Init+0x50>)
 80002e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002e2:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 80002e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002fc:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 80002fe:	220c      	movs	r2, #12
 8000300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000302:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800030e:	4805      	ldr	r0, [pc, #20]	@ (8000324 <MX_USART2_UART_Init+0x4c>)
 8000310:	f001 fd4c 	bl	8001dac <HAL_UART_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800031a:	f000 fa71 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200002d4 	.word	0x200002d4
 8000328:	40004400 	.word	0x40004400

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000340:	4b2d      	ldr	r3, [pc, #180]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a2c      	ldr	r2, [pc, #176]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b2a      	ldr	r3, [pc, #168]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000358:	4b27      	ldr	r3, [pc, #156]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a26      	ldr	r2, [pc, #152]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800035e:	f043 0320 	orr.w	r3, r3, #32
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b24      	ldr	r3, [pc, #144]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	60bb      	str	r3, [r7, #8]
 800036e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000370:	4b21      	ldr	r3, [pc, #132]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a20      	ldr	r2, [pc, #128]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b1e      	ldr	r3, [pc, #120]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0304 	and.w	r3, r3, #4
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b1b      	ldr	r3, [pc, #108]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a1a      	ldr	r2, [pc, #104]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b18      	ldr	r3, [pc, #96]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	603b      	str	r3, [r7, #0]
 800039e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2120      	movs	r1, #32
 80003a4:	4815      	ldr	r0, [pc, #84]	@ (80003fc <MX_GPIO_Init+0xd0>)
 80003a6:	f000 fe49 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003b0:	4b13      	ldr	r3, [pc, #76]	@ (8000400 <MX_GPIO_Init+0xd4>)
 80003b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	4811      	ldr	r0, [pc, #68]	@ (8000404 <MX_GPIO_Init+0xd8>)
 80003c0:	f000 fcb8 	bl	8000d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003c4:	2320      	movs	r3, #32
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2302      	movs	r3, #2
 80003d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	4619      	mov	r1, r3
 80003da:	4808      	ldr	r0, [pc, #32]	@ (80003fc <MX_GPIO_Init+0xd0>)
 80003dc:	f000 fcaa 	bl	8000d34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2105      	movs	r1, #5
 80003e4:	2028      	movs	r0, #40	@ 0x28
 80003e6:	f000 fc7a 	bl	8000cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ea:	2028      	movs	r0, #40	@ 0x28
 80003ec:	f000 fc93 	bl	8000d16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f0:	bf00      	nop
 80003f2:	3720      	adds	r7, #32
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010800 	.word	0x40010800
 8000400:	10110000 	.word	0x10110000
 8000404:	40011000 	.word	0x40011000

08000408 <CLI_Transmit>:

/* USER CODE BEGIN 4 */


void CLI_Transmit(const char *message) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f7ff fe9d 	bl	8000150 <strlen>
 8000416:	4603      	mov	r3, r0
 8000418:	b29a      	uxth	r2, r3
 800041a:	f04f 33ff 	mov.w	r3, #4294967295
 800041e:	6879      	ldr	r1, [r7, #4]
 8000420:	4803      	ldr	r0, [pc, #12]	@ (8000430 <CLI_Transmit+0x28>)
 8000422:	f001 fd13 	bl	8001e4c <HAL_UART_Transmit>
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	200002d4 	.word	0x200002d4

08000434 <CLI_Receive>:


#define RX_BUFFER_SIZE 100
char rx_buffer[RX_BUFFER_SIZE];

int CLI_Receive(char *buffer, uint16_t buffer_size) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	460b      	mov	r3, r1
 800043e:	807b      	strh	r3, [r7, #2]
    uint16_t index = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	81fb      	strh	r3, [r7, #14]
    uint8_t rx_char;

    // Loop to receive characters until a newline or buffer limit is reached
    while (index < buffer_size - 1) {
 8000444:	e02a      	b.n	800049c <CLI_Receive+0x68>
        // Blocking receive for a single character
        if (HAL_UART_Receive(&huart2, &rx_char, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000446:	f107 010d 	add.w	r1, r7, #13
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
 800044e:	2201      	movs	r2, #1
 8000450:	481a      	ldr	r0, [pc, #104]	@ (80004bc <CLI_Receive+0x88>)
 8000452:	f001 fd86 	bl	8001f62 <HAL_UART_Receive>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d11d      	bne.n	8000498 <CLI_Receive+0x64>
            // Echo the character back to the terminal
            HAL_UART_Transmit(&huart2, &rx_char, 1, HAL_MAX_DELAY);
 800045c:	f107 010d 	add.w	r1, r7, #13
 8000460:	f04f 33ff 	mov.w	r3, #4294967295
 8000464:	2201      	movs	r2, #1
 8000466:	4815      	ldr	r0, [pc, #84]	@ (80004bc <CLI_Receive+0x88>)
 8000468:	f001 fcf0 	bl	8001e4c <HAL_UART_Transmit>

            // Check for Enter key (carriage return or line feed)
            if (rx_char == '\r' || rx_char == '\n') {
 800046c:	7b7b      	ldrb	r3, [r7, #13]
 800046e:	2b0d      	cmp	r3, #13
 8000470:	d002      	beq.n	8000478 <CLI_Receive+0x44>
 8000472:	7b7b      	ldrb	r3, [r7, #13]
 8000474:	2b0a      	cmp	r3, #10
 8000476:	d106      	bne.n	8000486 <CLI_Receive+0x52>
                buffer[index] = '\0';  // Null-terminate the string
 8000478:	89fb      	ldrh	r3, [r7, #14]
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
                return 1;  // Successful reception
 8000482:	2301      	movs	r3, #1
 8000484:	e015      	b.n	80004b2 <CLI_Receive+0x7e>
            } else {
                buffer[index++] = rx_char;  // Append character to buffer
 8000486:	89fb      	ldrh	r3, [r7, #14]
 8000488:	1c5a      	adds	r2, r3, #1
 800048a:	81fa      	strh	r2, [r7, #14]
 800048c:	461a      	mov	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	7b7a      	ldrb	r2, [r7, #13]
 8000494:	701a      	strb	r2, [r3, #0]
 8000496:	e001      	b.n	800049c <CLI_Receive+0x68>
            }
        } else {
            return 0;  // Reception error
 8000498:	2300      	movs	r3, #0
 800049a:	e00a      	b.n	80004b2 <CLI_Receive+0x7e>
    while (index < buffer_size - 1) {
 800049c:	89fa      	ldrh	r2, [r7, #14]
 800049e:	887b      	ldrh	r3, [r7, #2]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	429a      	cmp	r2, r3
 80004a4:	dbcf      	blt.n	8000446 <CLI_Receive+0x12>
        }
    }

    buffer[index] = '\0';  // Null-terminate if buffer limit is reached
 80004a6:	89fb      	ldrh	r3, [r7, #14]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	4413      	add	r3, r2
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
    return 1;
 80004b0:	2301      	movs	r3, #1
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200002d4 	.word	0x200002d4

080004c0 <FloorSelectionTaskHandle>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FloorSelectionTaskHandle */
void FloorSelectionTaskHandle(void const * argument)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b0aa      	sub	sp, #168	@ 0xa8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    char command_buffer[100];
    int targetFloor;

    CLI_Transmit("\x1b[2J");               // Clear the entire screen
 80004c8:	4853      	ldr	r0, [pc, #332]	@ (8000618 <FloorSelectionTaskHandle+0x158>)
 80004ca:	f7ff ff9d 	bl	8000408 <CLI_Transmit>
    CLI_Transmit("\x1b[3;1H");             // Position cursor below instructions
 80004ce:	4853      	ldr	r0, [pc, #332]	@ (800061c <FloorSelectionTaskHandle+0x15c>)
 80004d0:	f7ff ff9a 	bl	8000408 <CLI_Transmit>
    CLI_Transmit("\x1b[4;1r");             // Set scrolling region from row 4 to the bottom
 80004d4:	4852      	ldr	r0, [pc, #328]	@ (8000620 <FloorSelectionTaskHandle+0x160>)
 80004d6:	f7ff ff97 	bl	8000408 <CLI_Transmit>
    CLI_Transmit("\x1b[4;1H");             // Move cursor to the start of the scrolling region
 80004da:	4852      	ldr	r0, [pc, #328]	@ (8000624 <FloorSelectionTaskHandle+0x164>)
 80004dc:	f7ff ff94 	bl	8000408 <CLI_Transmit>

    for (;;) {
        // Place CLI prompt at the bottom left of the scrolling region
        CLI_Transmit("\x1b[24;1H> ");   // Adjust 24 to the number of rows in your terminal
 80004e0:	4851      	ldr	r0, [pc, #324]	@ (8000628 <FloorSelectionTaskHandle+0x168>)
 80004e2:	f7ff ff91 	bl	8000408 <CLI_Transmit>

        if (CLI_Receive(command_buffer, sizeof(command_buffer))) {
 80004e6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80004ea:	2164      	movs	r1, #100	@ 0x64
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ffa1 	bl	8000434 <CLI_Receive>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f3      	beq.n	80004e0 <FloorSelectionTaskHandle+0x20>
            // Move cursor up within the scrolling region for command output
            CLI_Transmit("\x1b[23;1H"); // Place output above the prompt
 80004f8:	484c      	ldr	r0, [pc, #304]	@ (800062c <FloorSelectionTaskHandle+0x16c>)
 80004fa:	f7ff ff85 	bl	8000408 <CLI_Transmit>
            CLI_Transmit("Received: ");
 80004fe:	484c      	ldr	r0, [pc, #304]	@ (8000630 <FloorSelectionTaskHandle+0x170>)
 8000500:	f7ff ff82 	bl	8000408 <CLI_Transmit>
            CLI_Transmit(command_buffer);
 8000504:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ff7d 	bl	8000408 <CLI_Transmit>
            CLI_Transmit("\n");
 800050e:	4849      	ldr	r0, [pc, #292]	@ (8000634 <FloorSelectionTaskHandle+0x174>)
 8000510:	f7ff ff7a 	bl	8000408 <CLI_Transmit>

            // Handle "enter" command
            if (strncmp(command_buffer, "enter", 5) == 0) {
 8000514:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000518:	2205      	movs	r2, #5
 800051a:	4947      	ldr	r1, [pc, #284]	@ (8000638 <FloorSelectionTaskHandle+0x178>)
 800051c:	4618      	mov	r0, r3
 800051e:	f003 ff2f 	bl	8004380 <strncmp>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d10e      	bne.n	8000546 <FloorSelectionTaskHandle+0x86>
                if (insideState == 1) {
 8000528:	4b44      	ldr	r3, [pc, #272]	@ (800063c <FloorSelectionTaskHandle+0x17c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d103      	bne.n	8000538 <FloorSelectionTaskHandle+0x78>
                    CLI_Transmit("You are already inside the elevator.\n");
 8000530:	4843      	ldr	r0, [pc, #268]	@ (8000640 <FloorSelectionTaskHandle+0x180>)
 8000532:	f7ff ff69 	bl	8000408 <CLI_Transmit>
                } else {
                    insideState = 1;
                    CLI_Transmit("You have entered the elevator.\n");
                }
                continue;
 8000536:	e06d      	b.n	8000614 <FloorSelectionTaskHandle+0x154>
                    insideState = 1;
 8000538:	4b40      	ldr	r3, [pc, #256]	@ (800063c <FloorSelectionTaskHandle+0x17c>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
                    CLI_Transmit("You have entered the elevator.\n");
 800053e:	4841      	ldr	r0, [pc, #260]	@ (8000644 <FloorSelectionTaskHandle+0x184>)
 8000540:	f7ff ff62 	bl	8000408 <CLI_Transmit>
                continue;
 8000544:	e066      	b.n	8000614 <FloorSelectionTaskHandle+0x154>
            }

            // Handle "exit" command
            if (strncmp(command_buffer, "exit", 4) == 0) {
 8000546:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800054a:	2204      	movs	r2, #4
 800054c:	493e      	ldr	r1, [pc, #248]	@ (8000648 <FloorSelectionTaskHandle+0x188>)
 800054e:	4618      	mov	r0, r3
 8000550:	f003 ff16 	bl	8004380 <strncmp>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d10e      	bne.n	8000578 <FloorSelectionTaskHandle+0xb8>
                if (insideState == 0) {
 800055a:	4b38      	ldr	r3, [pc, #224]	@ (800063c <FloorSelectionTaskHandle+0x17c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d103      	bne.n	800056a <FloorSelectionTaskHandle+0xaa>
                    CLI_Transmit("You are already outside the elevator.\n");
 8000562:	483a      	ldr	r0, [pc, #232]	@ (800064c <FloorSelectionTaskHandle+0x18c>)
 8000564:	f7ff ff50 	bl	8000408 <CLI_Transmit>
                } else {
                    insideState = 0;
                    CLI_Transmit("You have exited the elevator.\n");
                }
                continue;
 8000568:	e054      	b.n	8000614 <FloorSelectionTaskHandle+0x154>
                    insideState = 0;
 800056a:	4b34      	ldr	r3, [pc, #208]	@ (800063c <FloorSelectionTaskHandle+0x17c>)
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
                    CLI_Transmit("You have exited the elevator.\n");
 8000570:	4837      	ldr	r0, [pc, #220]	@ (8000650 <FloorSelectionTaskHandle+0x190>)
 8000572:	f7ff ff49 	bl	8000408 <CLI_Transmit>
                continue;
 8000576:	e04d      	b.n	8000614 <FloorSelectionTaskHandle+0x154>
            }

            // Handle "floor=<x>" commands
            if (strncmp(command_buffer, "floor=", 6) == 0) {
 8000578:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800057c:	2206      	movs	r2, #6
 800057e:	4935      	ldr	r1, [pc, #212]	@ (8000654 <FloorSelectionTaskHandle+0x194>)
 8000580:	4618      	mov	r0, r3
 8000582:	f003 fefd 	bl	8004380 <strncmp>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d140      	bne.n	800060e <FloorSelectionTaskHandle+0x14e>
                if (insideState == 0) {
 800058c:	4b2b      	ldr	r3, [pc, #172]	@ (800063c <FloorSelectionTaskHandle+0x17c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d103      	bne.n	800059c <FloorSelectionTaskHandle+0xdc>
                    // User must enter the elevator to select a floor
                    CLI_Transmit("You must enter the elevator to select a floor.\n");
 8000594:	4830      	ldr	r0, [pc, #192]	@ (8000658 <FloorSelectionTaskHandle+0x198>)
 8000596:	f7ff ff37 	bl	8000408 <CLI_Transmit>
                    continue;
 800059a:	e03b      	b.n	8000614 <FloorSelectionTaskHandle+0x154>
                }

                targetFloor = atoi(command_buffer + 6);
 800059c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80005a0:	3306      	adds	r3, #6
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fe28 	bl	80041f8 <atoi>
 80005a8:	4603      	mov	r3, r0
 80005aa:	643b      	str	r3, [r7, #64]	@ 0x40

                if (targetFloor >= 1 && targetFloor <= 3) {
 80005ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dd28      	ble.n	8000604 <FloorSelectionTaskHandle+0x144>
 80005b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	dc25      	bgt.n	8000604 <FloorSelectionTaskHandle+0x144>
                    if (targetFloor == currentFloor) {
 80005b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80005ba:	4b28      	ldr	r3, [pc, #160]	@ (800065c <FloorSelectionTaskHandle+0x19c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d10d      	bne.n	80005de <FloorSelectionTaskHandle+0x11e>
                        // Inform the user they are already on the requested floor
                        char message[50];
                        snprintf(message, sizeof(message), "You are already on floor %d\n", currentFloor);
 80005c2:	4b26      	ldr	r3, [pc, #152]	@ (800065c <FloorSelectionTaskHandle+0x19c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f107 000c 	add.w	r0, r7, #12
 80005ca:	4a25      	ldr	r2, [pc, #148]	@ (8000660 <FloorSelectionTaskHandle+0x1a0>)
 80005cc:	2132      	movs	r1, #50	@ 0x32
 80005ce:	f003 fe9b 	bl	8004308 <sniprintf>
                        CLI_Transmit(message);
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff16 	bl	8000408 <CLI_Transmit>
                    if (targetFloor == currentFloor) {
 80005dc:	e016      	b.n	800060c <FloorSelectionTaskHandle+0x14c>
                    } else if (xQueueSend(floorQueue, &targetFloor, pdMS_TO_TICKS(50)) != pdPASS) {
 80005de:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <FloorSelectionTaskHandle+0x1a4>)
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80005e6:	2300      	movs	r3, #0
 80005e8:	2232      	movs	r2, #50	@ 0x32
 80005ea:	f002 f88d 	bl	8002708 <xQueueGenericSend>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d003      	beq.n	80005fc <FloorSelectionTaskHandle+0x13c>
                        CLI_Transmit("Failed to send floor command. Try again.\n");
 80005f4:	481c      	ldr	r0, [pc, #112]	@ (8000668 <FloorSelectionTaskHandle+0x1a8>)
 80005f6:	f7ff ff07 	bl	8000408 <CLI_Transmit>
                    if (targetFloor == currentFloor) {
 80005fa:	e007      	b.n	800060c <FloorSelectionTaskHandle+0x14c>
                    } else {
                        CLI_Transmit("Moving to selected floor...\n"); // Acknowledge command
 80005fc:	481b      	ldr	r0, [pc, #108]	@ (800066c <FloorSelectionTaskHandle+0x1ac>)
 80005fe:	f7ff ff03 	bl	8000408 <CLI_Transmit>
                    if (targetFloor == currentFloor) {
 8000602:	e003      	b.n	800060c <FloorSelectionTaskHandle+0x14c>
                    }
                } else {
                    CLI_Transmit("Invalid floor. Enter 1, 2, or 3.\n");
 8000604:	481a      	ldr	r0, [pc, #104]	@ (8000670 <FloorSelectionTaskHandle+0x1b0>)
 8000606:	f7ff feff 	bl	8000408 <CLI_Transmit>
                }
                continue;
 800060a:	e003      	b.n	8000614 <FloorSelectionTaskHandle+0x154>
 800060c:	e002      	b.n	8000614 <FloorSelectionTaskHandle+0x154>
            }

            // Handle invalid commands
            CLI_Transmit("Invalid command. Use 'enter', 'exit', or 'floor=<1|2|3>'.\n");
 800060e:	4819      	ldr	r0, [pc, #100]	@ (8000674 <FloorSelectionTaskHandle+0x1b4>)
 8000610:	f7ff fefa 	bl	8000408 <CLI_Transmit>
        CLI_Transmit("\x1b[24;1H> ");   // Adjust 24 to the number of rows in your terminal
 8000614:	e764      	b.n	80004e0 <FloorSelectionTaskHandle+0x20>
 8000616:	bf00      	nop
 8000618:	08004d50 	.word	0x08004d50
 800061c:	08004d58 	.word	0x08004d58
 8000620:	08004d60 	.word	0x08004d60
 8000624:	08004d68 	.word	0x08004d68
 8000628:	08004d70 	.word	0x08004d70
 800062c:	08004d7c 	.word	0x08004d7c
 8000630:	08004d84 	.word	0x08004d84
 8000634:	08004d90 	.word	0x08004d90
 8000638:	08004d94 	.word	0x08004d94
 800063c:	2000032c 	.word	0x2000032c
 8000640:	08004d9c 	.word	0x08004d9c
 8000644:	08004dc4 	.word	0x08004dc4
 8000648:	08004de4 	.word	0x08004de4
 800064c:	08004dec 	.word	0x08004dec
 8000650:	08004e14 	.word	0x08004e14
 8000654:	08004e34 	.word	0x08004e34
 8000658:	08004e3c 	.word	0x08004e3c
 800065c:	20000000 	.word	0x20000000
 8000660:	08004e6c 	.word	0x08004e6c
 8000664:	20000328 	.word	0x20000328
 8000668:	08004e8c 	.word	0x08004e8c
 800066c:	08004eb8 	.word	0x08004eb8
 8000670:	08004ed8 	.word	0x08004ed8
 8000674:	08004efc 	.word	0x08004efc

08000678 <ElevatorMovementTaskHandle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ElevatorMovementTaskHandle */
void ElevatorMovementTaskHandle(void const * argument)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b092      	sub	sp, #72	@ 0x48
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    int targetFloor;

    for (;;) {
        if (xQueueReceive(floorQueue, &targetFloor, portMAX_DELAY) == pdPASS) {
 8000680:	4b30      	ldr	r3, [pc, #192]	@ (8000744 <ElevatorMovementTaskHandle+0xcc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000688:	f04f 32ff 	mov.w	r2, #4294967295
 800068c:	4618      	mov	r0, r3
 800068e:	f002 f93d 	bl	800290c <xQueueReceive>
 8000692:	4603      	mov	r3, r0
 8000694:	2b01      	cmp	r3, #1
 8000696:	d1f3      	bne.n	8000680 <ElevatorMovementTaskHandle+0x8>
            while (currentFloor != targetFloor) {
 8000698:	e02b      	b.n	80006f2 <ElevatorMovementTaskHandle+0x7a>
                if (currentFloor < targetFloor) currentFloor++;
 800069a:	4b2b      	ldr	r3, [pc, #172]	@ (8000748 <ElevatorMovementTaskHandle+0xd0>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006a0:	429a      	cmp	r2, r3
 80006a2:	da05      	bge.n	80006b0 <ElevatorMovementTaskHandle+0x38>
 80006a4:	4b28      	ldr	r3, [pc, #160]	@ (8000748 <ElevatorMovementTaskHandle+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a27      	ldr	r2, [pc, #156]	@ (8000748 <ElevatorMovementTaskHandle+0xd0>)
 80006ac:	6013      	str	r3, [r2, #0]
 80006ae:	e009      	b.n	80006c4 <ElevatorMovementTaskHandle+0x4c>
                else if (currentFloor > targetFloor) currentFloor--;
 80006b0:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <ElevatorMovementTaskHandle+0xd0>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006b6:	429a      	cmp	r2, r3
 80006b8:	dd04      	ble.n	80006c4 <ElevatorMovementTaskHandle+0x4c>
 80006ba:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <ElevatorMovementTaskHandle+0xd0>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3b01      	subs	r3, #1
 80006c0:	4a21      	ldr	r2, [pc, #132]	@ (8000748 <ElevatorMovementTaskHandle+0xd0>)
 80006c2:	6013      	str	r3, [r2, #0]

                // Update UI with the current floor (centralized updates recommended)
                CLI_Transmit("\x1b[4;1H"); // Move to row 4
 80006c4:	4821      	ldr	r0, [pc, #132]	@ (800074c <ElevatorMovementTaskHandle+0xd4>)
 80006c6:	f7ff fe9f 	bl	8000408 <CLI_Transmit>
                CLI_Transmit("\x1b[K");    // Clear the line
 80006ca:	4821      	ldr	r0, [pc, #132]	@ (8000750 <ElevatorMovementTaskHandle+0xd8>)
 80006cc:	f7ff fe9c 	bl	8000408 <CLI_Transmit>
                char move_message[50];
                snprintf(move_message, sizeof(move_message), "Moving... Floor: %d\n", currentFloor);
 80006d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <ElevatorMovementTaskHandle+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f107 000c 	add.w	r0, r7, #12
 80006d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <ElevatorMovementTaskHandle+0xdc>)
 80006da:	2132      	movs	r1, #50	@ 0x32
 80006dc:	f003 fe14 	bl	8004308 <sniprintf>
                CLI_Transmit(move_message);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fe8f 	bl	8000408 <CLI_Transmit>

                osDelay(1000); // Simulate movement delay
 80006ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ee:	f001 fe83 	bl	80023f8 <osDelay>
            while (currentFloor != targetFloor) {
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <ElevatorMovementTaskHandle+0xd0>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d1ce      	bne.n	800069a <ElevatorMovementTaskHandle+0x22>
            }

            // Flash LED 3 times upon arrival
            for (int i = 0; i < 3; i++) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8000700:	e012      	b.n	8000728 <ElevatorMovementTaskHandle+0xb0>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2120      	movs	r1, #32
 8000706:	4814      	ldr	r0, [pc, #80]	@ (8000758 <ElevatorMovementTaskHandle+0xe0>)
 8000708:	f000 fc98 	bl	800103c <HAL_GPIO_WritePin>
                osDelay(200);
 800070c:	20c8      	movs	r0, #200	@ 0xc8
 800070e:	f001 fe73 	bl	80023f8 <osDelay>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	4810      	ldr	r0, [pc, #64]	@ (8000758 <ElevatorMovementTaskHandle+0xe0>)
 8000718:	f000 fc90 	bl	800103c <HAL_GPIO_WritePin>
                osDelay(200);
 800071c:	20c8      	movs	r0, #200	@ 0xc8
 800071e:	f001 fe6b 	bl	80023f8 <osDelay>
            for (int i = 0; i < 3; i++) {
 8000722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000724:	3301      	adds	r3, #1
 8000726:	647b      	str	r3, [r7, #68]	@ 0x44
 8000728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800072a:	2b02      	cmp	r3, #2
 800072c:	dde9      	ble.n	8000702 <ElevatorMovementTaskHandle+0x8a>
            }

            // Update UI to indicate arrival
            CLI_Transmit("\x1b[4;1H"); // Move to row 4
 800072e:	4807      	ldr	r0, [pc, #28]	@ (800074c <ElevatorMovementTaskHandle+0xd4>)
 8000730:	f7ff fe6a 	bl	8000408 <CLI_Transmit>
            CLI_Transmit("\x1b[K");    // Clear the line
 8000734:	4806      	ldr	r0, [pc, #24]	@ (8000750 <ElevatorMovementTaskHandle+0xd8>)
 8000736:	f7ff fe67 	bl	8000408 <CLI_Transmit>
            CLI_Transmit("Arrived at Target Floor\n");
 800073a:	4808      	ldr	r0, [pc, #32]	@ (800075c <ElevatorMovementTaskHandle+0xe4>)
 800073c:	f7ff fe64 	bl	8000408 <CLI_Transmit>
        if (xQueueReceive(floorQueue, &targetFloor, portMAX_DELAY) == pdPASS) {
 8000740:	e79e      	b.n	8000680 <ElevatorMovementTaskHandle+0x8>
 8000742:	bf00      	nop
 8000744:	20000328 	.word	0x20000328
 8000748:	20000000 	.word	0x20000000
 800074c:	08004d68 	.word	0x08004d68
 8000750:	08004f38 	.word	0x08004f38
 8000754:	08004f3c 	.word	0x08004f3c
 8000758:	40010800 	.word	0x40010800
 800075c:	08004f54 	.word	0x08004f54

08000760 <DisplayUpdateTaskHandle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DisplayUpdateTaskHandle */
void DisplayUpdateTaskHandle(void const * argument)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b090      	sub	sp, #64	@ 0x40
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
    char message[50];

    // Set up the status window
    CLI_Transmit("\x1b[2J");               // Clear the entire screen
 8000768:	4813      	ldr	r0, [pc, #76]	@ (80007b8 <DisplayUpdateTaskHandle+0x58>)
 800076a:	f7ff fe4d 	bl	8000408 <CLI_Transmit>
    CLI_Transmit("\x1b[1;1H");             // Move to row 1, column 1
 800076e:	4813      	ldr	r0, [pc, #76]	@ (80007bc <DisplayUpdateTaskHandle+0x5c>)
 8000770:	f7ff fe4a 	bl	8000408 <CLI_Transmit>

    // Status window headers
    CLI_Transmit("Elevator Status\n");
 8000774:	4812      	ldr	r0, [pc, #72]	@ (80007c0 <DisplayUpdateTaskHandle+0x60>)
 8000776:	f7ff fe47 	bl	8000408 <CLI_Transmit>
    CLI_Transmit("Current Floor: 1\n");    // Initial floor display
 800077a:	4812      	ldr	r0, [pc, #72]	@ (80007c4 <DisplayUpdateTaskHandle+0x64>)
 800077c:	f7ff fe44 	bl	8000408 <CLI_Transmit>
    CLI_Transmit("=================================================\n");
 8000780:	4811      	ldr	r0, [pc, #68]	@ (80007c8 <DisplayUpdateTaskHandle+0x68>)
 8000782:	f7ff fe41 	bl	8000408 <CLI_Transmit>

    // Set up scrolling region for CLI commands
    CLI_Transmit("\x1b[4;1r");             // Set scrolling region from row 4 to the bottom
 8000786:	4811      	ldr	r0, [pc, #68]	@ (80007cc <DisplayUpdateTaskHandle+0x6c>)
 8000788:	f7ff fe3e 	bl	8000408 <CLI_Transmit>
    CLI_Transmit("\x1b[4;1H");             // Move cursor to the start of the scrolling region
 800078c:	4810      	ldr	r0, [pc, #64]	@ (80007d0 <DisplayUpdateTaskHandle+0x70>)
 800078e:	f7ff fe3b 	bl	8000408 <CLI_Transmit>

    for (;;) {
        // Dynamically update the current floor in the status window
        snprintf(message, sizeof(message), "\x1b[2;16H%d", currentFloor); // Update "Current Floor"
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <DisplayUpdateTaskHandle+0x74>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f107 000c 	add.w	r0, r7, #12
 800079a:	4a0f      	ldr	r2, [pc, #60]	@ (80007d8 <DisplayUpdateTaskHandle+0x78>)
 800079c:	2132      	movs	r1, #50	@ 0x32
 800079e:	f003 fdb3 	bl	8004308 <sniprintf>
        CLI_Transmit(message);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe2e 	bl	8000408 <CLI_Transmit>

        osDelay(1000); // Update every second
 80007ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b0:	f001 fe22 	bl	80023f8 <osDelay>
        snprintf(message, sizeof(message), "\x1b[2;16H%d", currentFloor); // Update "Current Floor"
 80007b4:	bf00      	nop
 80007b6:	e7ec      	b.n	8000792 <DisplayUpdateTaskHandle+0x32>
 80007b8:	08004d50 	.word	0x08004d50
 80007bc:	08004f70 	.word	0x08004f70
 80007c0:	08004f78 	.word	0x08004f78
 80007c4:	08004f8c 	.word	0x08004f8c
 80007c8:	08004fa0 	.word	0x08004fa0
 80007cc:	08004d60 	.word	0x08004d60
 80007d0:	08004d68 	.word	0x08004d68
 80007d4:	20000000 	.word	0x20000000
 80007d8:	08004fd4 	.word	0x08004fd4

080007dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ee:	f000 f9a5 	bl	8000b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40000800 	.word	0x40000800

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000812:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <HAL_MspInit+0x68>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a17      	ldr	r2, [pc, #92]	@ (8000874 <HAL_MspInit+0x68>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <HAL_MspInit+0x68>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <HAL_MspInit+0x68>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a11      	ldr	r2, [pc, #68]	@ (8000874 <HAL_MspInit+0x68>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <HAL_MspInit+0x68>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	210f      	movs	r1, #15
 8000846:	f06f 0001 	mvn.w	r0, #1
 800084a:	f000 fa48 	bl	8000cde <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800084e:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <HAL_MspInit+0x6c>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	4a04      	ldr	r2, [pc, #16]	@ (8000878 <HAL_MspInit+0x6c>)
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	40010000 	.word	0x40010000

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a15      	ldr	r2, [pc, #84]	@ (80008ec <HAL_UART_MspInit+0x70>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d123      	bne.n	80008e4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <HAL_UART_MspInit+0x74>)
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	4a13      	ldr	r2, [pc, #76]	@ (80008f0 <HAL_UART_MspInit+0x74>)
 80008a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a6:	61d3      	str	r3, [r2, #28]
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <HAL_UART_MspInit+0x74>)
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <HAL_UART_MspInit+0x74>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <HAL_UART_MspInit+0x74>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <HAL_UART_MspInit+0x74>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008cc:	230c      	movs	r3, #12
 80008ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4619      	mov	r1, r3
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <HAL_UART_MspInit+0x78>)
 80008e0:	f000 fa28 	bl	8000d34 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40004400 	.word	0x40004400
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800

080008f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08e      	sub	sp, #56	@ 0x38
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000908:	2300      	movs	r3, #0
 800090a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800090e:	4b34      	ldr	r3, [pc, #208]	@ (80009e0 <HAL_InitTick+0xe8>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a33      	ldr	r2, [pc, #204]	@ (80009e0 <HAL_InitTick+0xe8>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b31      	ldr	r3, [pc, #196]	@ (80009e0 <HAL_InitTick+0xe8>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000926:	f107 0210 	add.w	r2, r7, #16
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f000 ffaf 	bl	8001894 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000936:	6a3b      	ldr	r3, [r7, #32]
 8000938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800093a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800093c:	2b00      	cmp	r3, #0
 800093e:	d103      	bne.n	8000948 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000940:	f000 ff80 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8000944:	6378      	str	r0, [r7, #52]	@ 0x34
 8000946:	e004      	b.n	8000952 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000948:	f000 ff7c 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 800094c:	4603      	mov	r3, r0
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000954:	4a23      	ldr	r2, [pc, #140]	@ (80009e4 <HAL_InitTick+0xec>)
 8000956:	fba2 2303 	umull	r2, r3, r2, r3
 800095a:	0c9b      	lsrs	r3, r3, #18
 800095c:	3b01      	subs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000960:	4b21      	ldr	r3, [pc, #132]	@ (80009e8 <HAL_InitTick+0xf0>)
 8000962:	4a22      	ldr	r2, [pc, #136]	@ (80009ec <HAL_InitTick+0xf4>)
 8000964:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000966:	4b20      	ldr	r3, [pc, #128]	@ (80009e8 <HAL_InitTick+0xf0>)
 8000968:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800096c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800096e:	4a1e      	ldr	r2, [pc, #120]	@ (80009e8 <HAL_InitTick+0xf0>)
 8000970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000972:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000974:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <HAL_InitTick+0xf0>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <HAL_InitTick+0xf0>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000980:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <HAL_InitTick+0xf0>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000986:	4818      	ldr	r0, [pc, #96]	@ (80009e8 <HAL_InitTick+0xf0>)
 8000988:	f000 ffd2 	bl	8001930 <HAL_TIM_Base_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000992:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000996:	2b00      	cmp	r3, #0
 8000998:	d11b      	bne.n	80009d2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800099a:	4813      	ldr	r0, [pc, #76]	@ (80009e8 <HAL_InitTick+0xf0>)
 800099c:	f001 f820 	bl	80019e0 <HAL_TIM_Base_Start_IT>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d111      	bne.n	80009d2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009ae:	201e      	movs	r0, #30
 80009b0:	f000 f9b1 	bl	8000d16 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b0f      	cmp	r3, #15
 80009b8:	d808      	bhi.n	80009cc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80009ba:	2200      	movs	r2, #0
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	201e      	movs	r0, #30
 80009c0:	f000 f98d 	bl	8000cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c4:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <HAL_InitTick+0xf8>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
 80009ca:	e002      	b.n	80009d2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3738      	adds	r7, #56	@ 0x38
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000
 80009e4:	431bde83 	.word	0x431bde83
 80009e8:	20000330 	.word	0x20000330
 80009ec:	40000800 	.word	0x40000800
 80009f0:	20000008 	.word	0x20000008

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <NMI_Handler+0x4>

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <TIM4_IRQHandler+0x10>)
 8000a2e:	f001 f829 	bl	8001a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000330 	.word	0x20000330

08000a3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a40:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a44:	f000 fb12 	bl	800106c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	@ (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	@ (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f003 fc92 	bl	80043a4 <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20005000 	.word	0x20005000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	20000378 	.word	0x20000378
 8000ab4:	20001220 	.word	0x20001220

08000ab8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac4:	f7ff fff8 	bl	8000ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aca:	490c      	ldr	r1, [pc, #48]	@ (8000afc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000acc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a09      	ldr	r2, [pc, #36]	@ (8000b04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ae0:	4c09      	ldr	r4, [pc, #36]	@ (8000b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aee:	f003 fc5f 	bl	80043b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af2:	f7ff fb4d 	bl	8000190 <main>
  bx lr
 8000af6:	4770      	bx	lr
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000b00:	08005158 	.word	0x08005158
  ldr r2, =_sbss
 8000b04:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b08:	2000121c 	.word	0x2000121c

08000b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_2_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <HAL_Init+0x28>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <HAL_Init+0x28>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f8d1 	bl	8000cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f7ff fee6 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fe6e 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <HAL_IncTick+0x1c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <HAL_IncTick+0x20>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a03      	ldr	r2, [pc, #12]	@ (8000b5c <HAL_IncTick+0x20>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	2000000c 	.word	0x2000000c
 8000b5c:	2000037c 	.word	0x2000037c

08000b60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b02      	ldr	r3, [pc, #8]	@ (8000b70 <HAL_GetTick+0x10>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	2000037c 	.word	0x2000037c

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4906      	ldr	r1, [pc, #24]	@ (8000c0c <__NVIC_EnableIRQ+0x34>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	@ (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	@ (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	@ 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	@ 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ff4f 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf0:	f7ff ff64 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	6978      	ldr	r0, [r7, #20]
 8000cfc:	f7ff ffb2 	bl	8000c64 <NVIC_EncodePriority>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff81 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff57 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b08b      	sub	sp, #44	@ 0x2c
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d46:	e169      	b.n	800101c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	69fa      	ldr	r2, [r7, #28]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f040 8158 	bne.w	8001016 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4a9a      	ldr	r2, [pc, #616]	@ (8000fd4 <HAL_GPIO_Init+0x2a0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d05e      	beq.n	8000e2e <HAL_GPIO_Init+0xfa>
 8000d70:	4a98      	ldr	r2, [pc, #608]	@ (8000fd4 <HAL_GPIO_Init+0x2a0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d875      	bhi.n	8000e62 <HAL_GPIO_Init+0x12e>
 8000d76:	4a98      	ldr	r2, [pc, #608]	@ (8000fd8 <HAL_GPIO_Init+0x2a4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d058      	beq.n	8000e2e <HAL_GPIO_Init+0xfa>
 8000d7c:	4a96      	ldr	r2, [pc, #600]	@ (8000fd8 <HAL_GPIO_Init+0x2a4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d86f      	bhi.n	8000e62 <HAL_GPIO_Init+0x12e>
 8000d82:	4a96      	ldr	r2, [pc, #600]	@ (8000fdc <HAL_GPIO_Init+0x2a8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d052      	beq.n	8000e2e <HAL_GPIO_Init+0xfa>
 8000d88:	4a94      	ldr	r2, [pc, #592]	@ (8000fdc <HAL_GPIO_Init+0x2a8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d869      	bhi.n	8000e62 <HAL_GPIO_Init+0x12e>
 8000d8e:	4a94      	ldr	r2, [pc, #592]	@ (8000fe0 <HAL_GPIO_Init+0x2ac>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d04c      	beq.n	8000e2e <HAL_GPIO_Init+0xfa>
 8000d94:	4a92      	ldr	r2, [pc, #584]	@ (8000fe0 <HAL_GPIO_Init+0x2ac>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d863      	bhi.n	8000e62 <HAL_GPIO_Init+0x12e>
 8000d9a:	4a92      	ldr	r2, [pc, #584]	@ (8000fe4 <HAL_GPIO_Init+0x2b0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d046      	beq.n	8000e2e <HAL_GPIO_Init+0xfa>
 8000da0:	4a90      	ldr	r2, [pc, #576]	@ (8000fe4 <HAL_GPIO_Init+0x2b0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d85d      	bhi.n	8000e62 <HAL_GPIO_Init+0x12e>
 8000da6:	2b12      	cmp	r3, #18
 8000da8:	d82a      	bhi.n	8000e00 <HAL_GPIO_Init+0xcc>
 8000daa:	2b12      	cmp	r3, #18
 8000dac:	d859      	bhi.n	8000e62 <HAL_GPIO_Init+0x12e>
 8000dae:	a201      	add	r2, pc, #4	@ (adr r2, 8000db4 <HAL_GPIO_Init+0x80>)
 8000db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db4:	08000e2f 	.word	0x08000e2f
 8000db8:	08000e09 	.word	0x08000e09
 8000dbc:	08000e1b 	.word	0x08000e1b
 8000dc0:	08000e5d 	.word	0x08000e5d
 8000dc4:	08000e63 	.word	0x08000e63
 8000dc8:	08000e63 	.word	0x08000e63
 8000dcc:	08000e63 	.word	0x08000e63
 8000dd0:	08000e63 	.word	0x08000e63
 8000dd4:	08000e63 	.word	0x08000e63
 8000dd8:	08000e63 	.word	0x08000e63
 8000ddc:	08000e63 	.word	0x08000e63
 8000de0:	08000e63 	.word	0x08000e63
 8000de4:	08000e63 	.word	0x08000e63
 8000de8:	08000e63 	.word	0x08000e63
 8000dec:	08000e63 	.word	0x08000e63
 8000df0:	08000e63 	.word	0x08000e63
 8000df4:	08000e63 	.word	0x08000e63
 8000df8:	08000e11 	.word	0x08000e11
 8000dfc:	08000e25 	.word	0x08000e25
 8000e00:	4a79      	ldr	r2, [pc, #484]	@ (8000fe8 <HAL_GPIO_Init+0x2b4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d013      	beq.n	8000e2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e06:	e02c      	b.n	8000e62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	623b      	str	r3, [r7, #32]
          break;
 8000e0e:	e029      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	3304      	adds	r3, #4
 8000e16:	623b      	str	r3, [r7, #32]
          break;
 8000e18:	e024      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	3308      	adds	r3, #8
 8000e20:	623b      	str	r3, [r7, #32]
          break;
 8000e22:	e01f      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	330c      	adds	r3, #12
 8000e2a:	623b      	str	r3, [r7, #32]
          break;
 8000e2c:	e01a      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d102      	bne.n	8000e3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e36:	2304      	movs	r3, #4
 8000e38:	623b      	str	r3, [r7, #32]
          break;
 8000e3a:	e013      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d105      	bne.n	8000e50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e44:	2308      	movs	r3, #8
 8000e46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	611a      	str	r2, [r3, #16]
          break;
 8000e4e:	e009      	b.n	8000e64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e50:	2308      	movs	r3, #8
 8000e52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69fa      	ldr	r2, [r7, #28]
 8000e58:	615a      	str	r2, [r3, #20]
          break;
 8000e5a:	e003      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
          break;
 8000e60:	e000      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          break;
 8000e62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2bff      	cmp	r3, #255	@ 0xff
 8000e68:	d801      	bhi.n	8000e6e <HAL_GPIO_Init+0x13a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	e001      	b.n	8000e72 <HAL_GPIO_Init+0x13e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3304      	adds	r3, #4
 8000e72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	2bff      	cmp	r3, #255	@ 0xff
 8000e78:	d802      	bhi.n	8000e80 <HAL_GPIO_Init+0x14c>
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	e002      	b.n	8000e86 <HAL_GPIO_Init+0x152>
 8000e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e82:	3b08      	subs	r3, #8
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	210f      	movs	r1, #15
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	401a      	ands	r2, r3
 8000e98:	6a39      	ldr	r1, [r7, #32]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 80b1 	beq.w	8001016 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb4:	4b4d      	ldr	r3, [pc, #308]	@ (8000fec <HAL_GPIO_Init+0x2b8>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a4c      	ldr	r2, [pc, #304]	@ (8000fec <HAL_GPIO_Init+0x2b8>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b4a      	ldr	r3, [pc, #296]	@ (8000fec <HAL_GPIO_Init+0x2b8>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ecc:	4a48      	ldr	r2, [pc, #288]	@ (8000ff0 <HAL_GPIO_Init+0x2bc>)
 8000ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a40      	ldr	r2, [pc, #256]	@ (8000ff4 <HAL_GPIO_Init+0x2c0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d013      	beq.n	8000f20 <HAL_GPIO_Init+0x1ec>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a3f      	ldr	r2, [pc, #252]	@ (8000ff8 <HAL_GPIO_Init+0x2c4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d00d      	beq.n	8000f1c <HAL_GPIO_Init+0x1e8>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a3e      	ldr	r2, [pc, #248]	@ (8000ffc <HAL_GPIO_Init+0x2c8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d007      	beq.n	8000f18 <HAL_GPIO_Init+0x1e4>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a3d      	ldr	r2, [pc, #244]	@ (8001000 <HAL_GPIO_Init+0x2cc>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d101      	bne.n	8000f14 <HAL_GPIO_Init+0x1e0>
 8000f10:	2303      	movs	r3, #3
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x1ee>
 8000f14:	2304      	movs	r3, #4
 8000f16:	e004      	b.n	8000f22 <HAL_GPIO_Init+0x1ee>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e002      	b.n	8000f22 <HAL_GPIO_Init+0x1ee>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <HAL_GPIO_Init+0x1ee>
 8000f20:	2300      	movs	r3, #0
 8000f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f24:	f002 0203 	and.w	r2, r2, #3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4093      	lsls	r3, r2
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f32:	492f      	ldr	r1, [pc, #188]	@ (8000ff0 <HAL_GPIO_Init+0x2bc>)
 8000f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d006      	beq.n	8000f5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	492c      	ldr	r1, [pc, #176]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	608b      	str	r3, [r1, #8]
 8000f58:	e006      	b.n	8000f68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	4928      	ldr	r1, [pc, #160]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d006      	beq.n	8000f82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f74:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	4922      	ldr	r1, [pc, #136]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	60cb      	str	r3, [r1, #12]
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	491e      	ldr	r1, [pc, #120]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d006      	beq.n	8000faa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	4918      	ldr	r1, [pc, #96]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	4914      	ldr	r1, [pc, #80]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d021      	beq.n	8001008 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	490e      	ldr	r1, [pc, #56]	@ (8001004 <HAL_GPIO_Init+0x2d0>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
 8000fd0:	e021      	b.n	8001016 <HAL_GPIO_Init+0x2e2>
 8000fd2:	bf00      	nop
 8000fd4:	10320000 	.word	0x10320000
 8000fd8:	10310000 	.word	0x10310000
 8000fdc:	10220000 	.word	0x10220000
 8000fe0:	10210000 	.word	0x10210000
 8000fe4:	10120000 	.word	0x10120000
 8000fe8:	10110000 	.word	0x10110000
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	40010c00 	.word	0x40010c00
 8000ffc:	40011000 	.word	0x40011000
 8001000:	40011400 	.word	0x40011400
 8001004:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_GPIO_Init+0x304>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	43db      	mvns	r3, r3
 8001010:	4909      	ldr	r1, [pc, #36]	@ (8001038 <HAL_GPIO_Init+0x304>)
 8001012:	4013      	ands	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001018:	3301      	adds	r3, #1
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001022:	fa22 f303 	lsr.w	r3, r2, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	f47f ae8e 	bne.w	8000d48 <HAL_GPIO_Init+0x14>
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	372c      	adds	r7, #44	@ 0x2c
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	40010400 	.word	0x40010400

0800103c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800104c:	787b      	ldrb	r3, [r7, #1]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001058:	e003      	b.n	8001062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	611a      	str	r2, [r3, #16]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4013      	ands	r3, r2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f806 	bl	800109c <HAL_GPIO_EXTI_Callback>
  }
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40010400 	.word	0x40010400

0800109c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e272      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8087 	beq.w	80011de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010d0:	4b92      	ldr	r3, [pc, #584]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d00c      	beq.n	80010f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010dc:	4b8f      	ldr	r3, [pc, #572]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d112      	bne.n	800110e <HAL_RCC_OscConfig+0x5e>
 80010e8:	4b8c      	ldr	r3, [pc, #560]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f4:	d10b      	bne.n	800110e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f6:	4b89      	ldr	r3, [pc, #548]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d06c      	beq.n	80011dc <HAL_RCC_OscConfig+0x12c>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d168      	bne.n	80011dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e24c      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001116:	d106      	bne.n	8001126 <HAL_RCC_OscConfig+0x76>
 8001118:	4b80      	ldr	r3, [pc, #512]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a7f      	ldr	r2, [pc, #508]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 800111e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e02e      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x98>
 800112e:	4b7b      	ldr	r3, [pc, #492]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a7a      	ldr	r2, [pc, #488]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b78      	ldr	r3, [pc, #480]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a77      	ldr	r2, [pc, #476]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001140:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e01d      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0xbc>
 8001152:	4b72      	ldr	r3, [pc, #456]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a71      	ldr	r2, [pc, #452]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b6f      	ldr	r3, [pc, #444]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a6e      	ldr	r2, [pc, #440]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e00b      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 800116c:	4b6b      	ldr	r3, [pc, #428]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a6a      	ldr	r2, [pc, #424]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b68      	ldr	r3, [pc, #416]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a67      	ldr	r2, [pc, #412]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 800117e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001182:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d013      	beq.n	80011b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fce8 	bl	8000b60 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fce4 	bl	8000b60 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	@ 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e200      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	4b5d      	ldr	r3, [pc, #372]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0xe4>
 80011b2:	e014      	b.n	80011de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcd4 	bl	8000b60 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcd0 	bl	8000b60 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	@ 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e1ec      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	4b53      	ldr	r3, [pc, #332]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x10c>
 80011da:	e000      	b.n	80011de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d063      	beq.n	80012b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ea:	4b4c      	ldr	r3, [pc, #304]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011f6:	4b49      	ldr	r3, [pc, #292]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d11c      	bne.n	800123c <HAL_RCC_OscConfig+0x18c>
 8001202:	4b46      	ldr	r3, [pc, #280]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d116      	bne.n	800123c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	4b43      	ldr	r3, [pc, #268]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_RCC_OscConfig+0x176>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d001      	beq.n	8001226 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e1c0      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	4b3d      	ldr	r3, [pc, #244]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4939      	ldr	r1, [pc, #228]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	e03a      	b.n	80012b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d020      	beq.n	8001286 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001244:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff fc89 	bl	8000b60 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fc85 	bl	8000b60 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e1a1      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	4b2d      	ldr	r3, [pc, #180]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4927      	ldr	r1, [pc, #156]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]
 8001284:	e015      	b.n	80012b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001286:	4b26      	ldr	r3, [pc, #152]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fc68 	bl	8000b60 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001294:	f7ff fc64 	bl	8000b60 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e180      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d03a      	beq.n	8001334 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d019      	beq.n	80012fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <HAL_RCC_OscConfig+0x274>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012cc:	f7ff fc48 	bl	8000b60 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff fc44 	bl	8000b60 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e160      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f000 fafe 	bl	80018f4 <RCC_Delay>
 80012f8:	e01c      	b.n	8001334 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <HAL_RCC_OscConfig+0x274>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001300:	f7ff fc2e 	bl	8000b60 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001306:	e00f      	b.n	8001328 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001308:	f7ff fc2a 	bl	8000b60 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d908      	bls.n	8001328 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e146      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	42420000 	.word	0x42420000
 8001324:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	4b92      	ldr	r3, [pc, #584]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1e9      	bne.n	8001308 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a6 	beq.w	800148e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001346:	4b8b      	ldr	r3, [pc, #556]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b88      	ldr	r3, [pc, #544]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a87      	ldr	r2, [pc, #540]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b85      	ldr	r3, [pc, #532]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800136a:	2301      	movs	r3, #1
 800136c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136e:	4b82      	ldr	r3, [pc, #520]	@ (8001578 <HAL_RCC_OscConfig+0x4c8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d118      	bne.n	80013ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137a:	4b7f      	ldr	r3, [pc, #508]	@ (8001578 <HAL_RCC_OscConfig+0x4c8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a7e      	ldr	r2, [pc, #504]	@ (8001578 <HAL_RCC_OscConfig+0x4c8>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001386:	f7ff fbeb 	bl	8000b60 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138e:	f7ff fbe7 	bl	8000b60 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b64      	cmp	r3, #100	@ 0x64
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e103      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	4b75      	ldr	r3, [pc, #468]	@ (8001578 <HAL_RCC_OscConfig+0x4c8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d106      	bne.n	80013c2 <HAL_RCC_OscConfig+0x312>
 80013b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6213      	str	r3, [r2, #32]
 80013c0:	e02d      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x334>
 80013ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	4a69      	ldr	r2, [pc, #420]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	6213      	str	r3, [r2, #32]
 80013d6:	4b67      	ldr	r3, [pc, #412]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4a66      	ldr	r2, [pc, #408]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	f023 0304 	bic.w	r3, r3, #4
 80013e0:	6213      	str	r3, [r2, #32]
 80013e2:	e01c      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d10c      	bne.n	8001406 <HAL_RCC_OscConfig+0x356>
 80013ec:	4b61      	ldr	r3, [pc, #388]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4a60      	ldr	r2, [pc, #384]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6213      	str	r3, [r2, #32]
 80013f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6213      	str	r3, [r2, #32]
 8001404:	e00b      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 8001406:	4b5b      	ldr	r3, [pc, #364]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4a5a      	ldr	r2, [pc, #360]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6213      	str	r3, [r2, #32]
 8001412:	4b58      	ldr	r3, [pc, #352]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4a57      	ldr	r2, [pc, #348]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	f023 0304 	bic.w	r3, r3, #4
 800141c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d015      	beq.n	8001452 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fb9b 	bl	8000b60 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fb97 	bl	8000b60 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e0b1      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	4b4b      	ldr	r3, [pc, #300]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0ee      	beq.n	800142e <HAL_RCC_OscConfig+0x37e>
 8001450:	e014      	b.n	800147c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fb85 	bl	8000b60 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fb81 	bl	8000b60 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e09b      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	4b40      	ldr	r3, [pc, #256]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ee      	bne.n	800145a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800147c:	7dfb      	ldrb	r3, [r7, #23]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d105      	bne.n	800148e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001482:	4b3c      	ldr	r3, [pc, #240]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a3b      	ldr	r2, [pc, #236]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800148c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8087 	beq.w	80015a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001498:	4b36      	ldr	r3, [pc, #216]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d061      	beq.n	8001568 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d146      	bne.n	800153a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ac:	4b33      	ldr	r3, [pc, #204]	@ (800157c <HAL_RCC_OscConfig+0x4cc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb55 	bl	8000b60 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fb51 	bl	8000b60 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e06d      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014cc:	4b29      	ldr	r3, [pc, #164]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e0:	d108      	bne.n	80014f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014e2:	4b24      	ldr	r3, [pc, #144]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	4921      	ldr	r1, [pc, #132]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a19      	ldr	r1, [r3, #32]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001504:	430b      	orrs	r3, r1
 8001506:	491b      	ldr	r1, [pc, #108]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <HAL_RCC_OscConfig+0x4cc>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fb25 	bl	8000b60 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fb21 	bl	8000b60 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e03d      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x46a>
 8001538:	e035      	b.n	80015a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_RCC_OscConfig+0x4cc>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fb0e 	bl	8000b60 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff fb0a 	bl	8000b60 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e026      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x498>
 8001566:	e01e      	b.n	80015a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e019      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
 8001574:	40021000 	.word	0x40021000
 8001578:	40007000 	.word	0x40007000
 800157c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001580:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	429a      	cmp	r2, r3
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0d0      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d910      	bls.n	80015f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	4b67      	ldr	r3, [pc, #412]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 0207 	bic.w	r2, r3, #7
 80015de:	4965      	ldr	r1, [pc, #404]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b63      	ldr	r3, [pc, #396]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0b8      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001610:	4b59      	ldr	r3, [pc, #356]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a58      	ldr	r2, [pc, #352]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800161a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001628:	4b53      	ldr	r3, [pc, #332]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a52      	ldr	r2, [pc, #328]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001634:	4b50      	ldr	r3, [pc, #320]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	494d      	ldr	r1, [pc, #308]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d040      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	4b47      	ldr	r3, [pc, #284]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d115      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e07f      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001672:	4b41      	ldr	r3, [pc, #260]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e073      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001682:	4b3d      	ldr	r3, [pc, #244]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e06b      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001692:	4b39      	ldr	r3, [pc, #228]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f023 0203 	bic.w	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4936      	ldr	r1, [pc, #216]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a4:	f7ff fa5c 	bl	8000b60 <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ac:	f7ff fa58 	bl	8000b60 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e053      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 020c 	and.w	r2, r3, #12
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d1eb      	bne.n	80016ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d210      	bcs.n	8001704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 0207 	bic.w	r2, r3, #7
 80016ea:	4922      	ldr	r1, [pc, #136]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e032      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001710:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4916      	ldr	r1, [pc, #88]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800172e:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	490e      	ldr	r1, [pc, #56]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001742:	f000 f821 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001746:	4602      	mov	r2, r0
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	490a      	ldr	r1, [pc, #40]	@ (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	5ccb      	ldrb	r3, [r1, r3]
 8001756:	fa22 f303 	lsr.w	r3, r2, r3
 800175a:	4a09      	ldr	r2, [pc, #36]	@ (8001780 <HAL_RCC_ClockConfig+0x1cc>)
 800175c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <HAL_RCC_ClockConfig+0x1d0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff f8c8 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40022000 	.word	0x40022000
 8001778:	40021000 	.word	0x40021000
 800177c:	08004fe8 	.word	0x08004fe8
 8001780:	20000004 	.word	0x20000004
 8001784:	20000008 	.word	0x20000008

08001788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <HAL_RCC_GetSysClockFreq+0x94>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d002      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x30>
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d003      	beq.n	80017be <HAL_RCC_GetSysClockFreq+0x36>
 80017b6:	e027      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ba:	613b      	str	r3, [r7, #16]
      break;
 80017bc:	e027      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	0c9b      	lsrs	r3, r3, #18
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	4a17      	ldr	r2, [pc, #92]	@ (8001824 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d010      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017d6:	4b11      	ldr	r3, [pc, #68]	@ (800181c <HAL_RCC_GetSysClockFreq+0x94>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	0c5b      	lsrs	r3, r3, #17
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	4a11      	ldr	r2, [pc, #68]	@ (8001828 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017e2:	5cd3      	ldrb	r3, [r2, r3]
 80017e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ea:	fb03 f202 	mul.w	r2, r3, r2
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e004      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a0c      	ldr	r2, [pc, #48]	@ (800182c <HAL_RCC_GetSysClockFreq+0xa4>)
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	613b      	str	r3, [r7, #16]
      break;
 8001806:	e002      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x98>)
 800180a:	613b      	str	r3, [r7, #16]
      break;
 800180c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800180e:	693b      	ldr	r3, [r7, #16]
}
 8001810:	4618      	mov	r0, r3
 8001812:	371c      	adds	r7, #28
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	007a1200 	.word	0x007a1200
 8001824:	08005000 	.word	0x08005000
 8001828:	08005010 	.word	0x08005010
 800182c:	003d0900 	.word	0x003d0900

08001830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001834:	4b02      	ldr	r3, [pc, #8]	@ (8001840 <HAL_RCC_GetHCLKFreq+0x10>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	20000004 	.word	0x20000004

08001844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001848:	f7ff fff2 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 800184c:	4602      	mov	r2, r0
 800184e:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	4903      	ldr	r1, [pc, #12]	@ (8001868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800185a:	5ccb      	ldrb	r3, [r1, r3]
 800185c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	08004ff8 	.word	0x08004ff8

0800186c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001870:	f7ff ffde 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 8001874:	4602      	mov	r2, r0
 8001876:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	0adb      	lsrs	r3, r3, #11
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	4903      	ldr	r1, [pc, #12]	@ (8001890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	08004ff8 	.word	0x08004ff8

08001894 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	220f      	movs	r2, #15
 80018a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <HAL_RCC_GetClockConfig+0x58>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018b0:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_RCC_GetClockConfig+0x58>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_RCC_GetClockConfig+0x58>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_RCC_GetClockConfig+0x58>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_RCC_GetClockConfig+0x5c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0207 	and.w	r2, r3, #7
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40022000 	.word	0x40022000

080018f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <RCC_Delay+0x34>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <RCC_Delay+0x38>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0a5b      	lsrs	r3, r3, #9
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	fb02 f303 	mul.w	r3, r2, r3
 800190e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001910:	bf00      	nop
  }
  while (Delay --);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	60fa      	str	r2, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f9      	bne.n	8001910 <RCC_Delay+0x1c>
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	20000004 	.word	0x20000004
 800192c:	10624dd3 	.word	0x10624dd3

08001930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e041      	b.n	80019c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f839 	bl	80019ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3304      	adds	r3, #4
 800196c:	4619      	mov	r1, r3
 800196e:	4610      	mov	r0, r2
 8001970:	f000 f99c 	bl	8001cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d001      	beq.n	80019f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e03a      	b.n	8001a6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a18      	ldr	r2, [pc, #96]	@ (8001a78 <HAL_TIM_Base_Start_IT+0x98>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00e      	beq.n	8001a38 <HAL_TIM_Base_Start_IT+0x58>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a22:	d009      	beq.n	8001a38 <HAL_TIM_Base_Start_IT+0x58>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a14      	ldr	r2, [pc, #80]	@ (8001a7c <HAL_TIM_Base_Start_IT+0x9c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d004      	beq.n	8001a38 <HAL_TIM_Base_Start_IT+0x58>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a13      	ldr	r2, [pc, #76]	@ (8001a80 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d111      	bne.n	8001a5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d010      	beq.n	8001a6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0201 	orr.w	r2, r2, #1
 8001a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5a:	e007      	b.n	8001a6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	40012c00 	.word	0x40012c00
 8001a7c:	40000400 	.word	0x40000400
 8001a80:	40000800 	.word	0x40000800

08001a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d020      	beq.n	8001ae8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01b      	beq.n	8001ae8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f06f 0202 	mvn.w	r2, #2
 8001ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8d1 	bl	8001c76 <HAL_TIM_IC_CaptureCallback>
 8001ad4:	e005      	b.n	8001ae2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f8c4 	bl	8001c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f8d3 	bl	8001c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d020      	beq.n	8001b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d01b      	beq.n	8001b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f06f 0204 	mvn.w	r2, #4
 8001b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8ab 	bl	8001c76 <HAL_TIM_IC_CaptureCallback>
 8001b20:	e005      	b.n	8001b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f89e 	bl	8001c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f8ad 	bl	8001c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d020      	beq.n	8001b80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d01b      	beq.n	8001b80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 0208 	mvn.w	r2, #8
 8001b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2204      	movs	r2, #4
 8001b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f885 	bl	8001c76 <HAL_TIM_IC_CaptureCallback>
 8001b6c:	e005      	b.n	8001b7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f878 	bl	8001c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f887 	bl	8001c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d020      	beq.n	8001bcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d01b      	beq.n	8001bcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0210 	mvn.w	r2, #16
 8001b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f85f 	bl	8001c76 <HAL_TIM_IC_CaptureCallback>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f852 	bl	8001c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f861 	bl	8001c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00c      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d007      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0201 	mvn.w	r2, #1
 8001be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7fe fdf6 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00c      	beq.n	8001c14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d007      	beq.n	8001c14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8c3 	bl	8001d9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00c      	beq.n	8001c38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f831 	bl	8001c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00c      	beq.n	8001c5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0220 	mvn.w	r2, #32
 8001c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f896 	bl	8001d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8001d7c <TIM_Base_SetConfig+0xd0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d00b      	beq.n	8001cdc <TIM_Base_SetConfig+0x30>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cca:	d007      	beq.n	8001cdc <TIM_Base_SetConfig+0x30>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a2c      	ldr	r2, [pc, #176]	@ (8001d80 <TIM_Base_SetConfig+0xd4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d003      	beq.n	8001cdc <TIM_Base_SetConfig+0x30>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8001d84 <TIM_Base_SetConfig+0xd8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d108      	bne.n	8001cee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a22      	ldr	r2, [pc, #136]	@ (8001d7c <TIM_Base_SetConfig+0xd0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00b      	beq.n	8001d0e <TIM_Base_SetConfig+0x62>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cfc:	d007      	beq.n	8001d0e <TIM_Base_SetConfig+0x62>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a1f      	ldr	r2, [pc, #124]	@ (8001d80 <TIM_Base_SetConfig+0xd4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d003      	beq.n	8001d0e <TIM_Base_SetConfig+0x62>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a1e      	ldr	r2, [pc, #120]	@ (8001d84 <TIM_Base_SetConfig+0xd8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d108      	bne.n	8001d20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a0d      	ldr	r2, [pc, #52]	@ (8001d7c <TIM_Base_SetConfig+0xd0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d103      	bne.n	8001d54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f023 0201 	bic.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	611a      	str	r2, [r3, #16]
  }
}
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	40012c00 	.word	0x40012c00
 8001d80:	40000400 	.word	0x40000400
 8001d84:	40000800 	.word	0x40000800

08001d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e042      	b.n	8001e44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fd52 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2224      	movs	r2, #36	@ 0x24
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fa09 	bl	8002208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d175      	bne.n	8001f58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_UART_Transmit+0x2c>
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e06e      	b.n	8001f5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2221      	movs	r2, #33	@ 0x21
 8001e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e8a:	f7fe fe69 	bl	8000b60 <HAL_GetTick>
 8001e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	88fa      	ldrh	r2, [r7, #6]
 8001e9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ea4:	d108      	bne.n	8001eb8 <HAL_UART_Transmit+0x6c>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d104      	bne.n	8001eb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	e003      	b.n	8001ec0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ec0:	e02e      	b.n	8001f20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2180      	movs	r1, #128	@ 0x80
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f8df 	bl	8002090 <UART_WaitOnFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e03a      	b.n	8001f5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10b      	bne.n	8001f02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ef8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	3302      	adds	r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	e007      	b.n	8001f12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	781a      	ldrb	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1cb      	bne.n	8001ec2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2200      	movs	r2, #0
 8001f32:	2140      	movs	r1, #64	@ 0x40
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f8ab 	bl	8002090 <UART_WaitOnFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e006      	b.n	8001f5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e000      	b.n	8001f5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f58:	2302      	movs	r3, #2
  }
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3720      	adds	r7, #32
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b08a      	sub	sp, #40	@ 0x28
 8001f66:	af02      	add	r7, sp, #8
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	f040 8081 	bne.w	8002086 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_UART_Receive+0x2e>
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e079      	b.n	8002088 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2222      	movs	r2, #34	@ 0x22
 8001f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fdda 	bl	8000b60 <HAL_GetTick>
 8001fac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	88fa      	ldrh	r2, [r7, #6]
 8001fb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fc2:	d108      	bne.n	8001fd6 <HAL_UART_Receive+0x74>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d104      	bne.n	8001fd6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	e003      	b.n	8001fde <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001fde:	e047      	b.n	8002070 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2120      	movs	r1, #32
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 f850 	bl	8002090 <UART_WaitOnFlagUntilTimeout>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e042      	b.n	8002088 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10c      	bne.n	8002022 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	b29b      	uxth	r3, r3
 8002010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002014:	b29a      	uxth	r2, r3
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	3302      	adds	r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	e01f      	b.n	8002062 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800202a:	d007      	beq.n	800203c <HAL_UART_Receive+0xda>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <HAL_UART_Receive+0xe8>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	e008      	b.n	800205c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002056:	b2da      	uxtb	r2, r3
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3301      	adds	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1b2      	bne.n	8001fe0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002086:	2302      	movs	r3, #2
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	3720      	adds	r7, #32
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020a0:	e03b      	b.n	800211a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d037      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020aa:	f7fe fd59 	bl	8000b60 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	6a3a      	ldr	r2, [r7, #32]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d302      	bcc.n	80020c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e03a      	b.n	800213a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d023      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0x8a>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b80      	cmp	r3, #128	@ 0x80
 80020d6:	d020      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0x8a>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b40      	cmp	r3, #64	@ 0x40
 80020dc:	d01d      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d116      	bne.n	800211a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f81d 	bl	8002142 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2208      	movs	r2, #8
 800210c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00f      	b.n	800213a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4013      	ands	r3, r2
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	429a      	cmp	r2, r3
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	429a      	cmp	r2, r3
 8002136:	d0b4      	beq.n	80020a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002142:	b480      	push	{r7}
 8002144:	b095      	sub	sp, #84	@ 0x54
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	330c      	adds	r3, #12
 8002150:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002154:	e853 3f00 	ldrex	r3, [r3]
 8002158:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800215a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002160:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	330c      	adds	r3, #12
 8002168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800216a:	643a      	str	r2, [r7, #64]	@ 0x40
 800216c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002170:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002172:	e841 2300 	strex	r3, r2, [r1]
 8002176:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1e5      	bne.n	800214a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3314      	adds	r3, #20
 8002184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	e853 3f00 	ldrex	r3, [r3]
 800218c:	61fb      	str	r3, [r7, #28]
   return(result);
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3314      	adds	r3, #20
 800219c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800219e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021a6:	e841 2300 	strex	r3, r2, [r1]
 80021aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80021ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1e5      	bne.n	800217e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d119      	bne.n	80021ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	330c      	adds	r3, #12
 80021c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	e853 3f00 	ldrex	r3, [r3]
 80021c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f023 0310 	bic.w	r3, r3, #16
 80021d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	330c      	adds	r3, #12
 80021d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021da:	61ba      	str	r2, [r7, #24]
 80021dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021de:	6979      	ldr	r1, [r7, #20]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	e841 2300 	strex	r3, r2, [r1]
 80021e6:	613b      	str	r3, [r7, #16]
   return(result);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1e5      	bne.n	80021ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80021fc:	bf00      	nop
 80021fe:	3754      	adds	r7, #84	@ 0x54
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
	...

08002208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002242:	f023 030c 	bic.w	r3, r3, #12
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	430b      	orrs	r3, r1
 800224e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2c      	ldr	r2, [pc, #176]	@ (800231c <UART_SetConfig+0x114>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d103      	bne.n	8002278 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002270:	f7ff fafc 	bl	800186c <HAL_RCC_GetPCLK2Freq>
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	e002      	b.n	800227e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002278:	f7ff fae4 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 800227c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	009a      	lsls	r2, r3, #2
 8002288:	441a      	add	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	4a22      	ldr	r2, [pc, #136]	@ (8002320 <UART_SetConfig+0x118>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	0119      	lsls	r1, r3, #4
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	441a      	add	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <UART_SetConfig+0x118>)
 80022b6:	fba3 0302 	umull	r0, r3, r3, r2
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2064      	movs	r0, #100	@ 0x64
 80022be:	fb00 f303 	mul.w	r3, r0, r3
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	3332      	adds	r3, #50	@ 0x32
 80022c8:	4a15      	ldr	r2, [pc, #84]	@ (8002320 <UART_SetConfig+0x118>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022d4:	4419      	add	r1, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	009a      	lsls	r2, r3, #2
 80022e0:	441a      	add	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <UART_SetConfig+0x118>)
 80022ee:	fba3 0302 	umull	r0, r3, r3, r2
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	2064      	movs	r0, #100	@ 0x64
 80022f6:	fb00 f303 	mul.w	r3, r0, r3
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	3332      	adds	r3, #50	@ 0x32
 8002300:	4a07      	ldr	r2, [pc, #28]	@ (8002320 <UART_SetConfig+0x118>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	f003 020f 	and.w	r2, r3, #15
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	440a      	add	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40013800 	.word	0x40013800
 8002320:	51eb851f 	.word	0x51eb851f

08002324 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002336:	2b84      	cmp	r3, #132	@ 0x84
 8002338:	d005      	beq.n	8002346 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800233a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4413      	add	r3, r2
 8002342:	3303      	adds	r3, #3
 8002344:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002356:	f000 fe99 	bl	800308c <vTaskStartScheduler>
  
  return osOK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd80      	pop	{r7, pc}

08002360 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002362:	b089      	sub	sp, #36	@ 0x24
 8002364:	af04      	add	r7, sp, #16
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d020      	beq.n	80023b4 <osThreadCreate+0x54>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01c      	beq.n	80023b4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685c      	ldr	r4, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691e      	ldr	r6, [r3, #16]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ffc9 	bl	8002324 <makeFreeRtosPriority>
 8002392:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800239c:	9202      	str	r2, [sp, #8]
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	9100      	str	r1, [sp, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	4632      	mov	r2, r6
 80023a6:	4629      	mov	r1, r5
 80023a8:	4620      	mov	r0, r4
 80023aa:	f000 fca1 	bl	8002cf0 <xTaskCreateStatic>
 80023ae:	4603      	mov	r3, r0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e01c      	b.n	80023ee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685c      	ldr	r4, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023c0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ffab 	bl	8002324 <makeFreeRtosPriority>
 80023ce:	4602      	mov	r2, r0
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	9200      	str	r2, [sp, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4632      	mov	r2, r6
 80023dc:	4629      	mov	r1, r5
 80023de:	4620      	mov	r0, r4
 80023e0:	f000 fce6 	bl	8002db0 <xTaskCreate>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d001      	beq.n	80023ee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <osDelay+0x16>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	e000      	b.n	8002410 <osDelay+0x18>
 800240e:	2301      	movs	r3, #1
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fe05 	bl	8003020 <vTaskDelay>
  
  return osOK;
 8002416:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f103 0208 	add.w	r2, r3, #8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f103 0208 	add.w	r2, r3, #8
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f103 0208 	add.w	r2, r3, #8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d2:	d103      	bne.n	80024dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	e00c      	b.n	80024f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3308      	adds	r3, #8
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	e002      	b.n	80024ea <vListInsert+0x2e>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d2f6      	bcs.n	80024e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	601a      	str	r2, [r3, #0]
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6892      	ldr	r2, [r2, #8]
 8002542:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6852      	ldr	r2, [r2, #4]
 800254c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	d103      	bne.n	8002560 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	1e5a      	subs	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
	...

08002580 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80025ac:	f001 fb76 	bl	8003c9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b8:	68f9      	ldr	r1, [r7, #12]
 80025ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	441a      	add	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025dc:	3b01      	subs	r3, #1
 80025de:	68f9      	ldr	r1, [r7, #12]
 80025e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	441a      	add	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	22ff      	movs	r2, #255	@ 0xff
 80025f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	22ff      	movs	r2, #255	@ 0xff
 80025f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d114      	bne.n	800262c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d01a      	beq.n	8002640 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	3310      	adds	r3, #16
 800260e:	4618      	mov	r0, r3
 8002610:	f000 ff86 	bl	8003520 <xTaskRemoveFromEventList>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d012      	beq.n	8002640 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800261a:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <xQueueGenericReset+0xd0>)
 800261c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	e009      	b.n	8002640 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3310      	adds	r3, #16
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fef5 	bl	8002420 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3324      	adds	r3, #36	@ 0x24
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fef0 	bl	8002420 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002640:	f001 fb5c 	bl	8003cfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002644:	2301      	movs	r3, #1
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	e000ed04 	.word	0xe000ed04

08002654 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	@ 0x28
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	4613      	mov	r3, r2
 8002660:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10b      	bne.n	8002680 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	613b      	str	r3, [r7, #16]
}
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3348      	adds	r3, #72	@ 0x48
 800268e:	4618      	mov	r0, r3
 8002690:	f001 fbc6 	bl	8003e20 <pvPortMalloc>
 8002694:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d011      	beq.n	80026c0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3348      	adds	r3, #72	@ 0x48
 80026a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026ae:	79fa      	ldrb	r2, [r7, #7]
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f805 	bl	80026ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80026c0:	69bb      	ldr	r3, [r7, #24]
	}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d103      	bne.n	80026e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e002      	b.n	80026ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026f8:	2101      	movs	r1, #1
 80026fa:	69b8      	ldr	r0, [r7, #24]
 80026fc:	f7ff ff40 	bl	8002580 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08e      	sub	sp, #56	@ 0x38
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002716:	2300      	movs	r3, #0
 8002718:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10b      	bne.n	800273c <xQueueGenericSend+0x34>
	__asm volatile
 8002724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <xQueueGenericSend+0x42>
 8002742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <xQueueGenericSend+0x46>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <xQueueGenericSend+0x48>
 800274e:	2300      	movs	r3, #0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10b      	bne.n	800276c <xQueueGenericSend+0x64>
	__asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002766:	bf00      	nop
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d103      	bne.n	800277a <xQueueGenericSend+0x72>
 8002772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <xQueueGenericSend+0x76>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <xQueueGenericSend+0x78>
 800277e:	2300      	movs	r3, #0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10b      	bne.n	800279c <xQueueGenericSend+0x94>
	__asm volatile
 8002784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	623b      	str	r3, [r7, #32]
}
 8002796:	bf00      	nop
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800279c:	f001 f880 	bl	80038a0 <xTaskGetSchedulerState>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <xQueueGenericSend+0xa4>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <xQueueGenericSend+0xa8>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <xQueueGenericSend+0xaa>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10b      	bne.n	80027ce <xQueueGenericSend+0xc6>
	__asm volatile
 80027b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ba:	f383 8811 	msr	BASEPRI, r3
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	61fb      	str	r3, [r7, #28]
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	e7fd      	b.n	80027ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027ce:	f001 fa65 	bl	8003c9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027da:	429a      	cmp	r2, r3
 80027dc:	d302      	bcc.n	80027e4 <xQueueGenericSend+0xdc>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d129      	bne.n	8002838 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027ea:	f000 f971 	bl	8002ad0 <prvCopyDataToQueue>
 80027ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d010      	beq.n	800281a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fa:	3324      	adds	r3, #36	@ 0x24
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fe8f 	bl	8003520 <xTaskRemoveFromEventList>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d013      	beq.n	8002830 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002808:	4b3f      	ldr	r3, [pc, #252]	@ (8002908 <xQueueGenericSend+0x200>)
 800280a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	e00a      	b.n	8002830 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800281a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002820:	4b39      	ldr	r3, [pc, #228]	@ (8002908 <xQueueGenericSend+0x200>)
 8002822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002830:	f001 fa64 	bl	8003cfc <vPortExitCritical>
				return pdPASS;
 8002834:	2301      	movs	r3, #1
 8002836:	e063      	b.n	8002900 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d103      	bne.n	8002846 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800283e:	f001 fa5d 	bl	8003cfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002842:	2300      	movs	r3, #0
 8002844:	e05c      	b.n	8002900 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fec9 	bl	80035e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002856:	2301      	movs	r3, #1
 8002858:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800285a:	f001 fa4f 	bl	8003cfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800285e:	f000 fc77 	bl	8003150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002862:	f001 fa1b 	bl	8003c9c <vPortEnterCritical>
 8002866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002868:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800286c:	b25b      	sxtb	r3, r3
 800286e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002872:	d103      	bne.n	800287c <xQueueGenericSend+0x174>
 8002874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800287c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002882:	b25b      	sxtb	r3, r3
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d103      	bne.n	8002892 <xQueueGenericSend+0x18a>
 800288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002892:	f001 fa33 	bl	8003cfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002896:	1d3a      	adds	r2, r7, #4
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 feb8 	bl	8003614 <xTaskCheckForTimeOut>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d124      	bne.n	80028f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028ac:	f000 fa08 	bl	8002cc0 <prvIsQueueFull>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d018      	beq.n	80028e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b8:	3310      	adds	r3, #16
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fe08 	bl	80034d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80028c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028c6:	f000 f993 	bl	8002bf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80028ca:	f000 fc4f 	bl	800316c <xTaskResumeAll>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f47f af7c 	bne.w	80027ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80028d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <xQueueGenericSend+0x200>)
 80028d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	e772      	b.n	80027ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80028e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028ea:	f000 f981 	bl	8002bf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028ee:	f000 fc3d 	bl	800316c <xTaskResumeAll>
 80028f2:	e76c      	b.n	80027ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80028f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028f6:	f000 f97b 	bl	8002bf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028fa:	f000 fc37 	bl	800316c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80028fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002900:	4618      	mov	r0, r3
 8002902:	3738      	adds	r7, #56	@ 0x38
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	e000ed04 	.word	0xe000ed04

0800290c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08c      	sub	sp, #48	@ 0x30
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002918:	2300      	movs	r3, #0
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10b      	bne.n	800293e <xQueueReceive+0x32>
	__asm volatile
 8002926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800292a:	f383 8811 	msr	BASEPRI, r3
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	623b      	str	r3, [r7, #32]
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	e7fd      	b.n	800293a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d103      	bne.n	800294c <xQueueReceive+0x40>
 8002944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <xQueueReceive+0x44>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <xQueueReceive+0x46>
 8002950:	2300      	movs	r3, #0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10b      	bne.n	800296e <xQueueReceive+0x62>
	__asm volatile
 8002956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	61fb      	str	r3, [r7, #28]
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	e7fd      	b.n	800296a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800296e:	f000 ff97 	bl	80038a0 <xTaskGetSchedulerState>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <xQueueReceive+0x72>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <xQueueReceive+0x76>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <xQueueReceive+0x78>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10b      	bne.n	80029a0 <xQueueReceive+0x94>
	__asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	61bb      	str	r3, [r7, #24]
}
 800299a:	bf00      	nop
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029a0:	f001 f97c 	bl	8003c9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01f      	beq.n	80029f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029b4:	f000 f8f6 	bl	8002ba4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ba:	1e5a      	subs	r2, r3, #1
 80029bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00f      	beq.n	80029e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ca:	3310      	adds	r3, #16
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fda7 	bl	8003520 <xTaskRemoveFromEventList>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029d8:	4b3c      	ldr	r3, [pc, #240]	@ (8002acc <xQueueReceive+0x1c0>)
 80029da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029e8:	f001 f988 	bl	8003cfc <vPortExitCritical>
				return pdPASS;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e069      	b.n	8002ac4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d103      	bne.n	80029fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029f6:	f001 f981 	bl	8003cfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e062      	b.n	8002ac4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fded 	bl	80035e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a12:	f001 f973 	bl	8003cfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a16:	f000 fb9b 	bl	8003150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a1a:	f001 f93f 	bl	8003c9c <vPortEnterCritical>
 8002a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a24:	b25b      	sxtb	r3, r3
 8002a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2a:	d103      	bne.n	8002a34 <xQueueReceive+0x128>
 8002a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a3a:	b25b      	sxtb	r3, r3
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d103      	bne.n	8002a4a <xQueueReceive+0x13e>
 8002a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a4a:	f001 f957 	bl	8003cfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a4e:	1d3a      	adds	r2, r7, #4
 8002a50:	f107 0310 	add.w	r3, r7, #16
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fddc 	bl	8003614 <xTaskCheckForTimeOut>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d123      	bne.n	8002aaa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a64:	f000 f916 	bl	8002c94 <prvIsQueueEmpty>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d017      	beq.n	8002a9e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a70:	3324      	adds	r3, #36	@ 0x24
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fd2c 	bl	80034d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a7e:	f000 f8b7 	bl	8002bf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a82:	f000 fb73 	bl	800316c <xTaskResumeAll>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d189      	bne.n	80029a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <xQueueReceive+0x1c0>)
 8002a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	e780      	b.n	80029a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002aa0:	f000 f8a6 	bl	8002bf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002aa4:	f000 fb62 	bl	800316c <xTaskResumeAll>
 8002aa8:	e77a      	b.n	80029a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002aaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002aac:	f000 f8a0 	bl	8002bf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ab0:	f000 fb5c 	bl	800316c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ab6:	f000 f8ed 	bl	8002c94 <prvIsQueueEmpty>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f43f af6f 	beq.w	80029a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ac2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3730      	adds	r7, #48	@ 0x30
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	e000ed04 	.word	0xe000ed04

08002ad0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10d      	bne.n	8002b0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d14d      	bne.n	8002b92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 feee 	bl	80038dc <xTaskPriorityDisinherit>
 8002b00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	e043      	b.n	8002b92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d119      	bne.n	8002b44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6858      	ldr	r0, [r3, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	f001 fc6e 	bl	80043fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	441a      	add	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d32b      	bcc.n	8002b92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	e026      	b.n	8002b92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68d8      	ldr	r0, [r3, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	f001 fc54 	bl	80043fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	425b      	negs	r3, r3
 8002b5e:	441a      	add	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d207      	bcs.n	8002b80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	425b      	negs	r3, r3
 8002b7a:	441a      	add	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d105      	bne.n	8002b92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002b9a:	697b      	ldr	r3, [r7, #20]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d018      	beq.n	8002be8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	441a      	add	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d303      	bcc.n	8002bd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68d9      	ldr	r1, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	461a      	mov	r2, r3
 8002be2:	6838      	ldr	r0, [r7, #0]
 8002be4:	f001 fc0a 	bl	80043fc <memcpy>
	}
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bf8:	f001 f850 	bl	8003c9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c04:	e011      	b.n	8002c2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3324      	adds	r3, #36	@ 0x24
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fc84 	bl	8003520 <xTaskRemoveFromEventList>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c1e:	f000 fd5d 	bl	80036dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	dce9      	bgt.n	8002c06 <prvUnlockQueue+0x16>
 8002c32:	e000      	b.n	8002c36 <prvUnlockQueue+0x46>
					break;
 8002c34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	22ff      	movs	r2, #255	@ 0xff
 8002c3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002c3e:	f001 f85d 	bl	8003cfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c42:	f001 f82b 	bl	8003c9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c4e:	e011      	b.n	8002c74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d012      	beq.n	8002c7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3310      	adds	r3, #16
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fc5f 	bl	8003520 <xTaskRemoveFromEventList>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c68:	f000 fd38 	bl	80036dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c6c:	7bbb      	ldrb	r3, [r7, #14]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	dce9      	bgt.n	8002c50 <prvUnlockQueue+0x60>
 8002c7c:	e000      	b.n	8002c80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	22ff      	movs	r2, #255	@ 0xff
 8002c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002c88:	f001 f838 	bl	8003cfc <vPortExitCritical>
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c9c:	f000 fffe 	bl	8003c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d102      	bne.n	8002cae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e001      	b.n	8002cb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cb2:	f001 f823 	bl	8003cfc <vPortExitCritical>

	return xReturn;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cc8:	f000 ffe8 	bl	8003c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d102      	bne.n	8002cde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	e001      	b.n	8002ce2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ce2:	f001 f80b 	bl	8003cfc <vPortExitCritical>

	return xReturn;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	@ 0x38
 8002cf4:	af04      	add	r7, sp, #16
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <xTaskCreateStatic+0x2c>
	__asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	623b      	str	r3, [r7, #32]
}
 8002d16:	bf00      	nop
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10b      	bne.n	8002d3a <xTaskCreateStatic+0x4a>
	__asm volatile
 8002d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	61fb      	str	r3, [r7, #28]
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	e7fd      	b.n	8002d36 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d3a:	2354      	movs	r3, #84	@ 0x54
 8002d3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b54      	cmp	r3, #84	@ 0x54
 8002d42:	d00b      	beq.n	8002d5c <xTaskCreateStatic+0x6c>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	61bb      	str	r3, [r7, #24]
}
 8002d56:	bf00      	nop
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01e      	beq.n	8002da2 <xTaskCreateStatic+0xb2>
 8002d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01b      	beq.n	8002da2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	9303      	str	r3, [sp, #12]
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	9302      	str	r3, [sp, #8]
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f850 	bl	8002e3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d9c:	f000 f8d6 	bl	8002f4c <prvAddNewTaskToReadyList>
 8002da0:	e001      	b.n	8002da6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002da6:	697b      	ldr	r3, [r7, #20]
	}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3728      	adds	r7, #40	@ 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08c      	sub	sp, #48	@ 0x30
 8002db4:	af04      	add	r7, sp, #16
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 f82b 	bl	8003e20 <pvPortMalloc>
 8002dca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00e      	beq.n	8002df0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002dd2:	2054      	movs	r0, #84	@ 0x54
 8002dd4:	f001 f824 	bl	8003e20 <pvPortMalloc>
 8002dd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002de6:	e005      	b.n	8002df4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002de8:	6978      	ldr	r0, [r7, #20]
 8002dea:	f001 f8e7 	bl	8003fbc <vPortFree>
 8002dee:	e001      	b.n	8002df4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d017      	beq.n	8002e2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e02:	88fa      	ldrh	r2, [r7, #6]
 8002e04:	2300      	movs	r3, #0
 8002e06:	9303      	str	r3, [sp, #12]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	9302      	str	r3, [sp, #8]
 8002e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f80e 	bl	8002e3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e1e:	69f8      	ldr	r0, [r7, #28]
 8002e20:	f000 f894 	bl	8002f4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e24:	2301      	movs	r3, #1
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	e002      	b.n	8002e30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e30:	69bb      	ldr	r3, [r7, #24]
	}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b088      	sub	sp, #32
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e52:	3b01      	subs	r3, #1
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f023 0307 	bic.w	r3, r3, #7
 8002e60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00b      	beq.n	8002e84 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	617b      	str	r3, [r7, #20]
}
 8002e7e:	bf00      	nop
 8002e80:	bf00      	nop
 8002e82:	e7fd      	b.n	8002e80 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d01f      	beq.n	8002eca <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e012      	b.n	8002eb6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	4413      	add	r3, r2
 8002e96:	7819      	ldrb	r1, [r3, #0]
 8002e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3334      	adds	r3, #52	@ 0x34
 8002ea0:	460a      	mov	r2, r1
 8002ea2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	2b0f      	cmp	r3, #15
 8002eba:	d9e9      	bls.n	8002e90 <prvInitialiseNewTask+0x56>
 8002ebc:	e000      	b.n	8002ec0 <prvInitialiseNewTask+0x86>
			{
				break;
 8002ebe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ec8:	e003      	b.n	8002ed2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed4:	2b06      	cmp	r3, #6
 8002ed6:	d901      	bls.n	8002edc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ed8:	2306      	movs	r3, #6
 8002eda:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ede:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ee6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eea:	2200      	movs	r2, #0
 8002eec:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fab3 	bl	800245e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efa:	3318      	adds	r3, #24
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff faae 	bl	800245e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0a:	f1c3 0207 	rsb	r2, r3, #7
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f16:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	69b8      	ldr	r0, [r7, #24]
 8002f2c:	f000 fdc4 	bl	8003ab8 <pxPortInitialiseStack>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f42:	bf00      	nop
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f54:	f000 fea2 	bl	8003c9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f58:	4b2a      	ldr	r3, [pc, #168]	@ (8003004 <prvAddNewTaskToReadyList+0xb8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	4a29      	ldr	r2, [pc, #164]	@ (8003004 <prvAddNewTaskToReadyList+0xb8>)
 8002f60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f62:	4b29      	ldr	r3, [pc, #164]	@ (8003008 <prvAddNewTaskToReadyList+0xbc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f6a:	4a27      	ldr	r2, [pc, #156]	@ (8003008 <prvAddNewTaskToReadyList+0xbc>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f70:	4b24      	ldr	r3, [pc, #144]	@ (8003004 <prvAddNewTaskToReadyList+0xb8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d110      	bne.n	8002f9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f78:	f000 fbd4 	bl	8003724 <prvInitialiseTaskLists>
 8002f7c:	e00d      	b.n	8002f9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f7e:	4b23      	ldr	r3, [pc, #140]	@ (800300c <prvAddNewTaskToReadyList+0xc0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f86:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <prvAddNewTaskToReadyList+0xbc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d802      	bhi.n	8002f9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f94:	4a1c      	ldr	r2, [pc, #112]	@ (8003008 <prvAddNewTaskToReadyList+0xbc>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <prvAddNewTaskToReadyList+0xc4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8003010 <prvAddNewTaskToReadyList+0xc4>)
 8002fa2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa8:	2201      	movs	r2, #1
 8002faa:	409a      	lsls	r2, r3
 8002fac:	4b19      	ldr	r3, [pc, #100]	@ (8003014 <prvAddNewTaskToReadyList+0xc8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	4a18      	ldr	r2, [pc, #96]	@ (8003014 <prvAddNewTaskToReadyList+0xc8>)
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4a15      	ldr	r2, [pc, #84]	@ (8003018 <prvAddNewTaskToReadyList+0xcc>)
 8002fc4:	441a      	add	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4610      	mov	r0, r2
 8002fce:	f7ff fa52 	bl	8002476 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fd2:	f000 fe93 	bl	8003cfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800300c <prvAddNewTaskToReadyList+0xc0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00e      	beq.n	8002ffc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <prvAddNewTaskToReadyList+0xbc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d207      	bcs.n	8002ffc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fec:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <prvAddNewTaskToReadyList+0xd0>)
 8002fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000480 	.word	0x20000480
 8003008:	20000380 	.word	0x20000380
 800300c:	2000048c 	.word	0x2000048c
 8003010:	2000049c 	.word	0x2000049c
 8003014:	20000488 	.word	0x20000488
 8003018:	20000384 	.word	0x20000384
 800301c:	e000ed04 	.word	0xe000ed04

08003020 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d018      	beq.n	8003064 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003032:	4b14      	ldr	r3, [pc, #80]	@ (8003084 <vTaskDelay+0x64>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <vTaskDelay+0x32>
	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	60bb      	str	r3, [r7, #8]
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	e7fd      	b.n	800304e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003052:	f000 f87d 	bl	8003150 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003056:	2100      	movs	r1, #0
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fcc7 	bl	80039ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800305e:	f000 f885 	bl	800316c <xTaskResumeAll>
 8003062:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d107      	bne.n	800307a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800306a:	4b07      	ldr	r3, [pc, #28]	@ (8003088 <vTaskDelay+0x68>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200004a8 	.word	0x200004a8
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	@ 0x28
 8003090:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800309a:	463a      	mov	r2, r7
 800309c:	1d39      	adds	r1, r7, #4
 800309e:	f107 0308 	add.w	r3, r7, #8
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd f85c 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030a8:	6839      	ldr	r1, [r7, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	9202      	str	r2, [sp, #8]
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	2300      	movs	r3, #0
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	2300      	movs	r3, #0
 80030b8:	460a      	mov	r2, r1
 80030ba:	491f      	ldr	r1, [pc, #124]	@ (8003138 <vTaskStartScheduler+0xac>)
 80030bc:	481f      	ldr	r0, [pc, #124]	@ (800313c <vTaskStartScheduler+0xb0>)
 80030be:	f7ff fe17 	bl	8002cf0 <xTaskCreateStatic>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003140 <vTaskStartScheduler+0xb4>)
 80030c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <vTaskStartScheduler+0xb4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030d0:	2301      	movs	r3, #1
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	e001      	b.n	80030da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d116      	bne.n	800310e <vTaskStartScheduler+0x82>
	__asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	613b      	str	r3, [r7, #16]
}
 80030f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030f4:	4b13      	ldr	r3, [pc, #76]	@ (8003144 <vTaskStartScheduler+0xb8>)
 80030f6:	f04f 32ff 	mov.w	r2, #4294967295
 80030fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030fc:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <vTaskStartScheduler+0xbc>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003102:	4b12      	ldr	r3, [pc, #72]	@ (800314c <vTaskStartScheduler+0xc0>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003108:	f000 fd56 	bl	8003bb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800310c:	e00f      	b.n	800312e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d10b      	bne.n	800312e <vTaskStartScheduler+0xa2>
	__asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	60fb      	str	r3, [r7, #12]
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	e7fd      	b.n	800312a <vTaskStartScheduler+0x9e>
}
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	08004fe0 	.word	0x08004fe0
 800313c:	080036f5 	.word	0x080036f5
 8003140:	200004a4 	.word	0x200004a4
 8003144:	200004a0 	.word	0x200004a0
 8003148:	2000048c 	.word	0x2000048c
 800314c:	20000484 	.word	0x20000484

08003150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003154:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <vTaskSuspendAll+0x18>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	4a03      	ldr	r2, [pc, #12]	@ (8003168 <vTaskSuspendAll+0x18>)
 800315c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	200004a8 	.word	0x200004a8

0800316c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800317a:	4b42      	ldr	r3, [pc, #264]	@ (8003284 <xTaskResumeAll+0x118>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10b      	bne.n	800319a <xTaskResumeAll+0x2e>
	__asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	603b      	str	r3, [r7, #0]
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	e7fd      	b.n	8003196 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800319a:	f000 fd7f 	bl	8003c9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800319e:	4b39      	ldr	r3, [pc, #228]	@ (8003284 <xTaskResumeAll+0x118>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	4a37      	ldr	r2, [pc, #220]	@ (8003284 <xTaskResumeAll+0x118>)
 80031a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031a8:	4b36      	ldr	r3, [pc, #216]	@ (8003284 <xTaskResumeAll+0x118>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d161      	bne.n	8003274 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031b0:	4b35      	ldr	r3, [pc, #212]	@ (8003288 <xTaskResumeAll+0x11c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d05d      	beq.n	8003274 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031b8:	e02e      	b.n	8003218 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ba:	4b34      	ldr	r3, [pc, #208]	@ (800328c <xTaskResumeAll+0x120>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3318      	adds	r3, #24
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff f9b0 	bl	800252c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff f9ab 	bl	800252c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031da:	2201      	movs	r2, #1
 80031dc:	409a      	lsls	r2, r3
 80031de:	4b2c      	ldr	r3, [pc, #176]	@ (8003290 <xTaskResumeAll+0x124>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003290 <xTaskResumeAll+0x124>)
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4a27      	ldr	r2, [pc, #156]	@ (8003294 <xTaskResumeAll+0x128>)
 80031f6:	441a      	add	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3304      	adds	r3, #4
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f7ff f939 	bl	8002476 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003208:	4b23      	ldr	r3, [pc, #140]	@ (8003298 <xTaskResumeAll+0x12c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003212:	4b22      	ldr	r3, [pc, #136]	@ (800329c <xTaskResumeAll+0x130>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003218:	4b1c      	ldr	r3, [pc, #112]	@ (800328c <xTaskResumeAll+0x120>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1cc      	bne.n	80031ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003226:	f000 fb1b 	bl	8003860 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800322a:	4b1d      	ldr	r3, [pc, #116]	@ (80032a0 <xTaskResumeAll+0x134>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003236:	f000 f837 	bl	80032a8 <xTaskIncrementTick>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003240:	4b16      	ldr	r3, [pc, #88]	@ (800329c <xTaskResumeAll+0x130>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3b01      	subs	r3, #1
 800324a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f1      	bne.n	8003236 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003252:	4b13      	ldr	r3, [pc, #76]	@ (80032a0 <xTaskResumeAll+0x134>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003258:	4b10      	ldr	r3, [pc, #64]	@ (800329c <xTaskResumeAll+0x130>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003260:	2301      	movs	r3, #1
 8003262:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003264:	4b0f      	ldr	r3, [pc, #60]	@ (80032a4 <xTaskResumeAll+0x138>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003274:	f000 fd42 	bl	8003cfc <vPortExitCritical>

	return xAlreadyYielded;
 8003278:	68bb      	ldr	r3, [r7, #8]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200004a8 	.word	0x200004a8
 8003288:	20000480 	.word	0x20000480
 800328c:	20000440 	.word	0x20000440
 8003290:	20000488 	.word	0x20000488
 8003294:	20000384 	.word	0x20000384
 8003298:	20000380 	.word	0x20000380
 800329c:	20000494 	.word	0x20000494
 80032a0:	20000490 	.word	0x20000490
 80032a4:	e000ed04 	.word	0xe000ed04

080032a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032b2:	4b4f      	ldr	r3, [pc, #316]	@ (80033f0 <xTaskIncrementTick+0x148>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f040 808f 	bne.w	80033da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032bc:	4b4d      	ldr	r3, [pc, #308]	@ (80033f4 <xTaskIncrementTick+0x14c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032c4:	4a4b      	ldr	r2, [pc, #300]	@ (80033f4 <xTaskIncrementTick+0x14c>)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d121      	bne.n	8003314 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80032d0:	4b49      	ldr	r3, [pc, #292]	@ (80033f8 <xTaskIncrementTick+0x150>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00b      	beq.n	80032f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	603b      	str	r3, [r7, #0]
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	e7fd      	b.n	80032ee <xTaskIncrementTick+0x46>
 80032f2:	4b41      	ldr	r3, [pc, #260]	@ (80033f8 <xTaskIncrementTick+0x150>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	4b40      	ldr	r3, [pc, #256]	@ (80033fc <xTaskIncrementTick+0x154>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a3e      	ldr	r2, [pc, #248]	@ (80033f8 <xTaskIncrementTick+0x150>)
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4a3e      	ldr	r2, [pc, #248]	@ (80033fc <xTaskIncrementTick+0x154>)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	4b3e      	ldr	r3, [pc, #248]	@ (8003400 <xTaskIncrementTick+0x158>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3301      	adds	r3, #1
 800330c:	4a3c      	ldr	r2, [pc, #240]	@ (8003400 <xTaskIncrementTick+0x158>)
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	f000 faa6 	bl	8003860 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003314:	4b3b      	ldr	r3, [pc, #236]	@ (8003404 <xTaskIncrementTick+0x15c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	429a      	cmp	r2, r3
 800331c:	d348      	bcc.n	80033b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800331e:	4b36      	ldr	r3, [pc, #216]	@ (80033f8 <xTaskIncrementTick+0x150>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d104      	bne.n	8003332 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003328:	4b36      	ldr	r3, [pc, #216]	@ (8003404 <xTaskIncrementTick+0x15c>)
 800332a:	f04f 32ff 	mov.w	r2, #4294967295
 800332e:	601a      	str	r2, [r3, #0]
					break;
 8003330:	e03e      	b.n	80033b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003332:	4b31      	ldr	r3, [pc, #196]	@ (80033f8 <xTaskIncrementTick+0x150>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d203      	bcs.n	8003352 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800334a:	4a2e      	ldr	r2, [pc, #184]	@ (8003404 <xTaskIncrementTick+0x15c>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003350:	e02e      	b.n	80033b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	3304      	adds	r3, #4
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff f8e8 	bl	800252c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d004      	beq.n	800336e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	3318      	adds	r3, #24
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f8df 	bl	800252c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	2201      	movs	r2, #1
 8003374:	409a      	lsls	r2, r3
 8003376:	4b24      	ldr	r3, [pc, #144]	@ (8003408 <xTaskIncrementTick+0x160>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4313      	orrs	r3, r2
 800337c:	4a22      	ldr	r2, [pc, #136]	@ (8003408 <xTaskIncrementTick+0x160>)
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4a1f      	ldr	r2, [pc, #124]	@ (800340c <xTaskIncrementTick+0x164>)
 800338e:	441a      	add	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7ff f86d 	bl	8002476 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003410 <xTaskIncrementTick+0x168>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d3b9      	bcc.n	800331e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80033aa:	2301      	movs	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ae:	e7b6      	b.n	800331e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033b0:	4b17      	ldr	r3, [pc, #92]	@ (8003410 <xTaskIncrementTick+0x168>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b6:	4915      	ldr	r1, [pc, #84]	@ (800340c <xTaskIncrementTick+0x164>)
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d901      	bls.n	80033cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80033c8:	2301      	movs	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80033cc:	4b11      	ldr	r3, [pc, #68]	@ (8003414 <xTaskIncrementTick+0x16c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e004      	b.n	80033e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80033da:	4b0f      	ldr	r3, [pc, #60]	@ (8003418 <xTaskIncrementTick+0x170>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003418 <xTaskIncrementTick+0x170>)
 80033e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80033e4:	697b      	ldr	r3, [r7, #20]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200004a8 	.word	0x200004a8
 80033f4:	20000484 	.word	0x20000484
 80033f8:	20000438 	.word	0x20000438
 80033fc:	2000043c 	.word	0x2000043c
 8003400:	20000498 	.word	0x20000498
 8003404:	200004a0 	.word	0x200004a0
 8003408:	20000488 	.word	0x20000488
 800340c:	20000384 	.word	0x20000384
 8003410:	20000380 	.word	0x20000380
 8003414:	20000494 	.word	0x20000494
 8003418:	20000490 	.word	0x20000490

0800341c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003422:	4b27      	ldr	r3, [pc, #156]	@ (80034c0 <vTaskSwitchContext+0xa4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800342a:	4b26      	ldr	r3, [pc, #152]	@ (80034c4 <vTaskSwitchContext+0xa8>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003430:	e040      	b.n	80034b4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003432:	4b24      	ldr	r3, [pc, #144]	@ (80034c4 <vTaskSwitchContext+0xa8>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003438:	4b23      	ldr	r3, [pc, #140]	@ (80034c8 <vTaskSwitchContext+0xac>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	fab3 f383 	clz	r3, r3
 8003444:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003446:	7afb      	ldrb	r3, [r7, #11]
 8003448:	f1c3 031f 	rsb	r3, r3, #31
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	491f      	ldr	r1, [pc, #124]	@ (80034cc <vTaskSwitchContext+0xb0>)
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10b      	bne.n	800347a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	607b      	str	r3, [r7, #4]
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	e7fd      	b.n	8003476 <vTaskSwitchContext+0x5a>
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4a11      	ldr	r2, [pc, #68]	@ (80034cc <vTaskSwitchContext+0xb0>)
 8003486:	4413      	add	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	3308      	adds	r3, #8
 800349c:	429a      	cmp	r2, r3
 800349e:	d104      	bne.n	80034aa <vTaskSwitchContext+0x8e>
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a07      	ldr	r2, [pc, #28]	@ (80034d0 <vTaskSwitchContext+0xb4>)
 80034b2:	6013      	str	r3, [r2, #0]
}
 80034b4:	bf00      	nop
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	200004a8 	.word	0x200004a8
 80034c4:	20000494 	.word	0x20000494
 80034c8:	20000488 	.word	0x20000488
 80034cc:	20000384 	.word	0x20000384
 80034d0:	20000380 	.word	0x20000380

080034d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10b      	bne.n	80034fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	60fb      	str	r3, [r7, #12]
}
 80034f6:	bf00      	nop
 80034f8:	bf00      	nop
 80034fa:	e7fd      	b.n	80034f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034fc:	4b07      	ldr	r3, [pc, #28]	@ (800351c <vTaskPlaceOnEventList+0x48>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3318      	adds	r3, #24
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fe ffd9 	bl	80024bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800350a:	2101      	movs	r1, #1
 800350c:	6838      	ldr	r0, [r7, #0]
 800350e:	f000 fa6d 	bl	80039ec <prvAddCurrentTaskToDelayedList>
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000380 	.word	0x20000380

08003520 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10b      	bne.n	800354e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	60fb      	str	r3, [r7, #12]
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	e7fd      	b.n	800354a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	3318      	adds	r3, #24
 8003552:	4618      	mov	r0, r3
 8003554:	f7fe ffea 	bl	800252c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003558:	4b1d      	ldr	r3, [pc, #116]	@ (80035d0 <xTaskRemoveFromEventList+0xb0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d11c      	bne.n	800359a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	3304      	adds	r3, #4
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe ffe1 	bl	800252c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	2201      	movs	r2, #1
 8003570:	409a      	lsls	r2, r3
 8003572:	4b18      	ldr	r3, [pc, #96]	@ (80035d4 <xTaskRemoveFromEventList+0xb4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4313      	orrs	r3, r2
 8003578:	4a16      	ldr	r2, [pc, #88]	@ (80035d4 <xTaskRemoveFromEventList+0xb4>)
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4a13      	ldr	r2, [pc, #76]	@ (80035d8 <xTaskRemoveFromEventList+0xb8>)
 800358a:	441a      	add	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	3304      	adds	r3, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f7fe ff6f 	bl	8002476 <vListInsertEnd>
 8003598:	e005      	b.n	80035a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	3318      	adds	r3, #24
 800359e:	4619      	mov	r1, r3
 80035a0:	480e      	ldr	r0, [pc, #56]	@ (80035dc <xTaskRemoveFromEventList+0xbc>)
 80035a2:	f7fe ff68 	bl	8002476 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035aa:	4b0d      	ldr	r3, [pc, #52]	@ (80035e0 <xTaskRemoveFromEventList+0xc0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d905      	bls.n	80035c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035b4:	2301      	movs	r3, #1
 80035b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035b8:	4b0a      	ldr	r3, [pc, #40]	@ (80035e4 <xTaskRemoveFromEventList+0xc4>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e001      	b.n	80035c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80035c4:	697b      	ldr	r3, [r7, #20]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200004a8 	.word	0x200004a8
 80035d4:	20000488 	.word	0x20000488
 80035d8:	20000384 	.word	0x20000384
 80035dc:	20000440 	.word	0x20000440
 80035e0:	20000380 	.word	0x20000380
 80035e4:	20000494 	.word	0x20000494

080035e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035f0:	4b06      	ldr	r3, [pc, #24]	@ (800360c <vTaskInternalSetTimeOutState+0x24>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <vTaskInternalSetTimeOutState+0x28>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	605a      	str	r2, [r3, #4]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000498 	.word	0x20000498
 8003610:	20000484 	.word	0x20000484

08003614 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	613b      	str	r3, [r7, #16]
}
 8003636:	bf00      	nop
 8003638:	bf00      	nop
 800363a:	e7fd      	b.n	8003638 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10b      	bne.n	800365a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	60fb      	str	r3, [r7, #12]
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	e7fd      	b.n	8003656 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800365a:	f000 fb1f 	bl	8003c9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800365e:	4b1d      	ldr	r3, [pc, #116]	@ (80036d4 <xTaskCheckForTimeOut+0xc0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d102      	bne.n	800367e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	e023      	b.n	80036c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	4b15      	ldr	r3, [pc, #84]	@ (80036d8 <xTaskCheckForTimeOut+0xc4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d007      	beq.n	800369a <xTaskCheckForTimeOut+0x86>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	429a      	cmp	r2, r3
 8003692:	d302      	bcc.n	800369a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003694:	2301      	movs	r3, #1
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	e015      	b.n	80036c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d20b      	bcs.n	80036bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	1ad2      	subs	r2, r2, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff99 	bl	80035e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	e004      	b.n	80036c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036c2:	2301      	movs	r3, #1
 80036c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036c6:	f000 fb19 	bl	8003cfc <vPortExitCritical>

	return xReturn;
 80036ca:	69fb      	ldr	r3, [r7, #28]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000484 	.word	0x20000484
 80036d8:	20000498 	.word	0x20000498

080036dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036e0:	4b03      	ldr	r3, [pc, #12]	@ (80036f0 <vTaskMissedYield+0x14>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
}
 80036e6:	bf00      	nop
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000494 	.word	0x20000494

080036f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036fc:	f000 f852 	bl	80037a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <prvIdleTask+0x28>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d9f9      	bls.n	80036fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003708:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <prvIdleTask+0x2c>)
 800370a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003718:	e7f0      	b.n	80036fc <prvIdleTask+0x8>
 800371a:	bf00      	nop
 800371c:	20000384 	.word	0x20000384
 8003720:	e000ed04 	.word	0xe000ed04

08003724 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	e00c      	b.n	800374a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4a12      	ldr	r2, [pc, #72]	@ (8003784 <prvInitialiseTaskLists+0x60>)
 800373c:	4413      	add	r3, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe fe6e 	bl	8002420 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3301      	adds	r3, #1
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b06      	cmp	r3, #6
 800374e:	d9ef      	bls.n	8003730 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003750:	480d      	ldr	r0, [pc, #52]	@ (8003788 <prvInitialiseTaskLists+0x64>)
 8003752:	f7fe fe65 	bl	8002420 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003756:	480d      	ldr	r0, [pc, #52]	@ (800378c <prvInitialiseTaskLists+0x68>)
 8003758:	f7fe fe62 	bl	8002420 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800375c:	480c      	ldr	r0, [pc, #48]	@ (8003790 <prvInitialiseTaskLists+0x6c>)
 800375e:	f7fe fe5f 	bl	8002420 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003762:	480c      	ldr	r0, [pc, #48]	@ (8003794 <prvInitialiseTaskLists+0x70>)
 8003764:	f7fe fe5c 	bl	8002420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003768:	480b      	ldr	r0, [pc, #44]	@ (8003798 <prvInitialiseTaskLists+0x74>)
 800376a:	f7fe fe59 	bl	8002420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800376e:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <prvInitialiseTaskLists+0x78>)
 8003770:	4a05      	ldr	r2, [pc, #20]	@ (8003788 <prvInitialiseTaskLists+0x64>)
 8003772:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003774:	4b0a      	ldr	r3, [pc, #40]	@ (80037a0 <prvInitialiseTaskLists+0x7c>)
 8003776:	4a05      	ldr	r2, [pc, #20]	@ (800378c <prvInitialiseTaskLists+0x68>)
 8003778:	601a      	str	r2, [r3, #0]
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000384 	.word	0x20000384
 8003788:	20000410 	.word	0x20000410
 800378c:	20000424 	.word	0x20000424
 8003790:	20000440 	.word	0x20000440
 8003794:	20000454 	.word	0x20000454
 8003798:	2000046c 	.word	0x2000046c
 800379c:	20000438 	.word	0x20000438
 80037a0:	2000043c 	.word	0x2000043c

080037a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037aa:	e019      	b.n	80037e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037ac:	f000 fa76 	bl	8003c9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b0:	4b10      	ldr	r3, [pc, #64]	@ (80037f4 <prvCheckTasksWaitingTermination+0x50>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3304      	adds	r3, #4
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe feb5 	bl	800252c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <prvCheckTasksWaitingTermination+0x54>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	4a0b      	ldr	r2, [pc, #44]	@ (80037f8 <prvCheckTasksWaitingTermination+0x54>)
 80037ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037cc:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <prvCheckTasksWaitingTermination+0x58>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	4a0a      	ldr	r2, [pc, #40]	@ (80037fc <prvCheckTasksWaitingTermination+0x58>)
 80037d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80037d6:	f000 fa91 	bl	8003cfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f810 	bl	8003800 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <prvCheckTasksWaitingTermination+0x58>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e1      	bne.n	80037ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000454 	.word	0x20000454
 80037f8:	20000480 	.word	0x20000480
 80037fc:	20000468 	.word	0x20000468

08003800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800380e:	2b00      	cmp	r3, #0
 8003810:	d108      	bne.n	8003824 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fbd0 	bl	8003fbc <vPortFree>
				vPortFree( pxTCB );
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fbcd 	bl	8003fbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003822:	e019      	b.n	8003858 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800382a:	2b01      	cmp	r3, #1
 800382c:	d103      	bne.n	8003836 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fbc4 	bl	8003fbc <vPortFree>
	}
 8003834:	e010      	b.n	8003858 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800383c:	2b02      	cmp	r3, #2
 800383e:	d00b      	beq.n	8003858 <prvDeleteTCB+0x58>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	60fb      	str	r3, [r7, #12]
}
 8003852:	bf00      	nop
 8003854:	bf00      	nop
 8003856:	e7fd      	b.n	8003854 <prvDeleteTCB+0x54>
	}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003866:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <prvResetNextTaskUnblockTime+0x38>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003870:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <prvResetNextTaskUnblockTime+0x3c>)
 8003872:	f04f 32ff 	mov.w	r2, #4294967295
 8003876:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003878:	e008      	b.n	800388c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800387a:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <prvResetNextTaskUnblockTime+0x38>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a04      	ldr	r2, [pc, #16]	@ (800389c <prvResetNextTaskUnblockTime+0x3c>)
 800388a:	6013      	str	r3, [r2, #0]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20000438 	.word	0x20000438
 800389c:	200004a0 	.word	0x200004a0

080038a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038a6:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <xTaskGetSchedulerState+0x34>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038ae:	2301      	movs	r3, #1
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	e008      	b.n	80038c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038b4:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <xTaskGetSchedulerState+0x38>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038bc:	2302      	movs	r3, #2
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	e001      	b.n	80038c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038c6:	687b      	ldr	r3, [r7, #4]
	}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	2000048c 	.word	0x2000048c
 80038d8:	200004a8 	.word	0x200004a8

080038dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d070      	beq.n	80039d4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80038f2:	4b3b      	ldr	r3, [pc, #236]	@ (80039e0 <xTaskPriorityDisinherit+0x104>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d00b      	beq.n	8003914 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	60fb      	str	r3, [r7, #12]
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10b      	bne.n	8003934 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	60bb      	str	r3, [r7, #8]
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	e7fd      	b.n	8003930 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003938:	1e5a      	subs	r2, r3, #1
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003946:	429a      	cmp	r2, r3
 8003948:	d044      	beq.n	80039d4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394e:	2b00      	cmp	r3, #0
 8003950:	d140      	bne.n	80039d4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	3304      	adds	r3, #4
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fde8 	bl	800252c <uxListRemove>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d115      	bne.n	800398e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003966:	491f      	ldr	r1, [pc, #124]	@ (80039e4 <xTaskPriorityDisinherit+0x108>)
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <xTaskPriorityDisinherit+0xb2>
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	2201      	movs	r2, #1
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43da      	mvns	r2, r3
 8003984:	4b18      	ldr	r3, [pc, #96]	@ (80039e8 <xTaskPriorityDisinherit+0x10c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4013      	ands	r3, r2
 800398a:	4a17      	ldr	r2, [pc, #92]	@ (80039e8 <xTaskPriorityDisinherit+0x10c>)
 800398c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399a:	f1c3 0207 	rsb	r2, r3, #7
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a6:	2201      	movs	r2, #1
 80039a8:	409a      	lsls	r2, r3
 80039aa:	4b0f      	ldr	r3, [pc, #60]	@ (80039e8 <xTaskPriorityDisinherit+0x10c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	4a0d      	ldr	r2, [pc, #52]	@ (80039e8 <xTaskPriorityDisinherit+0x10c>)
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4a08      	ldr	r2, [pc, #32]	@ (80039e4 <xTaskPriorityDisinherit+0x108>)
 80039c2:	441a      	add	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	3304      	adds	r3, #4
 80039c8:	4619      	mov	r1, r3
 80039ca:	4610      	mov	r0, r2
 80039cc:	f7fe fd53 	bl	8002476 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039d0:	2301      	movs	r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039d4:	697b      	ldr	r3, [r7, #20]
	}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000380 	.word	0x20000380
 80039e4:	20000384 	.word	0x20000384
 80039e8:	20000488 	.word	0x20000488

080039ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039f6:	4b29      	ldr	r3, [pc, #164]	@ (8003a9c <prvAddCurrentTaskToDelayedList+0xb0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039fc:	4b28      	ldr	r3, [pc, #160]	@ (8003aa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fd92 	bl	800252c <uxListRemove>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10b      	bne.n	8003a26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a0e:	4b24      	ldr	r3, [pc, #144]	@ (8003aa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	2201      	movs	r2, #1
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43da      	mvns	r2, r3
 8003a1c:	4b21      	ldr	r3, [pc, #132]	@ (8003aa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4013      	ands	r3, r2
 8003a22:	4a20      	ldr	r2, [pc, #128]	@ (8003aa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d10a      	bne.n	8003a44 <prvAddCurrentTaskToDelayedList+0x58>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a34:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	481a      	ldr	r0, [pc, #104]	@ (8003aa8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003a3e:	f7fe fd1a 	bl	8002476 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a42:	e026      	b.n	8003a92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a4c:	4b14      	ldr	r3, [pc, #80]	@ (8003aa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d209      	bcs.n	8003a70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a5c:	4b13      	ldr	r3, [pc, #76]	@ (8003aac <prvAddCurrentTaskToDelayedList+0xc0>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3304      	adds	r3, #4
 8003a66:	4619      	mov	r1, r3
 8003a68:	4610      	mov	r0, r2
 8003a6a:	f7fe fd27 	bl	80024bc <vListInsert>
}
 8003a6e:	e010      	b.n	8003a92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a70:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f7fe fd1d 	bl	80024bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a82:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d202      	bcs.n	8003a92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003a8c:	4a09      	ldr	r2, [pc, #36]	@ (8003ab4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6013      	str	r3, [r2, #0]
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000484 	.word	0x20000484
 8003aa0:	20000380 	.word	0x20000380
 8003aa4:	20000488 	.word	0x20000488
 8003aa8:	2000046c 	.word	0x2000046c
 8003aac:	2000043c 	.word	0x2000043c
 8003ab0:	20000438 	.word	0x20000438
 8003ab4:	200004a0 	.word	0x200004a0

08003ab8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3b04      	subs	r3, #4
 8003ac8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3b04      	subs	r3, #4
 8003ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f023 0201 	bic.w	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3b04      	subs	r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ae8:	4a08      	ldr	r2, [pc, #32]	@ (8003b0c <pxPortInitialiseStack+0x54>)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3b14      	subs	r3, #20
 8003af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3b20      	subs	r3, #32
 8003afe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b00:	68fb      	ldr	r3, [r7, #12]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	08003b11 	.word	0x08003b11

08003b10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b1a:	4b12      	ldr	r3, [pc, #72]	@ (8003b64 <prvTaskExitError+0x54>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b22:	d00b      	beq.n	8003b3c <prvTaskExitError+0x2c>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	60fb      	str	r3, [r7, #12]
}
 8003b36:	bf00      	nop
 8003b38:	bf00      	nop
 8003b3a:	e7fd      	b.n	8003b38 <prvTaskExitError+0x28>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	60bb      	str	r3, [r7, #8]
}
 8003b4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b50:	bf00      	nop
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0fc      	beq.n	8003b52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	20000010 	.word	0x20000010
	...

08003b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b70:	4b07      	ldr	r3, [pc, #28]	@ (8003b90 <pxCurrentTCBConst2>)
 8003b72:	6819      	ldr	r1, [r3, #0]
 8003b74:	6808      	ldr	r0, [r1, #0]
 8003b76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b7a:	f380 8809 	msr	PSP, r0
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f04f 0000 	mov.w	r0, #0
 8003b86:	f380 8811 	msr	BASEPRI, r0
 8003b8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003b8e:	4770      	bx	lr

08003b90 <pxCurrentTCBConst2>:
 8003b90:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop

08003b98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003b98:	4806      	ldr	r0, [pc, #24]	@ (8003bb4 <prvPortStartFirstTask+0x1c>)
 8003b9a:	6800      	ldr	r0, [r0, #0]
 8003b9c:	6800      	ldr	r0, [r0, #0]
 8003b9e:	f380 8808 	msr	MSP, r0
 8003ba2:	b662      	cpsie	i
 8003ba4:	b661      	cpsie	f
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	df00      	svc	0
 8003bb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003bb2:	bf00      	nop
 8003bb4:	e000ed08 	.word	0xe000ed08

08003bb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bbe:	4b32      	ldr	r3, [pc, #200]	@ (8003c88 <xPortStartScheduler+0xd0>)
 8003bc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	22ff      	movs	r2, #255	@ 0xff
 8003bce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c8c <xPortStartScheduler+0xd4>)
 8003be4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003be6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c90 <xPortStartScheduler+0xd8>)
 8003be8:	2207      	movs	r2, #7
 8003bea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bec:	e009      	b.n	8003c02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003bee:	4b28      	ldr	r3, [pc, #160]	@ (8003c90 <xPortStartScheduler+0xd8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	4a26      	ldr	r2, [pc, #152]	@ (8003c90 <xPortStartScheduler+0xd8>)
 8003bf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c0a:	2b80      	cmp	r3, #128	@ 0x80
 8003c0c:	d0ef      	beq.n	8003bee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c0e:	4b20      	ldr	r3, [pc, #128]	@ (8003c90 <xPortStartScheduler+0xd8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f1c3 0307 	rsb	r3, r3, #7
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d00b      	beq.n	8003c32 <xPortStartScheduler+0x7a>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	60bb      	str	r3, [r7, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	e7fd      	b.n	8003c2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c32:	4b17      	ldr	r3, [pc, #92]	@ (8003c90 <xPortStartScheduler+0xd8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	4a15      	ldr	r2, [pc, #84]	@ (8003c90 <xPortStartScheduler+0xd8>)
 8003c3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c3c:	4b14      	ldr	r3, [pc, #80]	@ (8003c90 <xPortStartScheduler+0xd8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c44:	4a12      	ldr	r2, [pc, #72]	@ (8003c90 <xPortStartScheduler+0xd8>)
 8003c46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c50:	4b10      	ldr	r3, [pc, #64]	@ (8003c94 <xPortStartScheduler+0xdc>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a0f      	ldr	r2, [pc, #60]	@ (8003c94 <xPortStartScheduler+0xdc>)
 8003c56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c94 <xPortStartScheduler+0xdc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0c      	ldr	r2, [pc, #48]	@ (8003c94 <xPortStartScheduler+0xdc>)
 8003c62:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003c66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c68:	f000 f8b8 	bl	8003ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c98 <xPortStartScheduler+0xe0>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c72:	f7ff ff91 	bl	8003b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c76:	f7ff fbd1 	bl	800341c <vTaskSwitchContext>
	prvTaskExitError();
 8003c7a:	f7ff ff49 	bl	8003b10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	e000e400 	.word	0xe000e400
 8003c8c:	200004ac 	.word	0x200004ac
 8003c90:	200004b0 	.word	0x200004b0
 8003c94:	e000ed20 	.word	0xe000ed20
 8003c98:	20000010 	.word	0x20000010

08003c9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	607b      	str	r3, [r7, #4]
}
 8003cb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf4 <vPortEnterCritical+0x58>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf4 <vPortEnterCritical+0x58>)
 8003cbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf4 <vPortEnterCritical+0x58>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d110      	bne.n	8003cea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <vPortEnterCritical+0x5c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <vPortEnterCritical+0x4e>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	603b      	str	r3, [r7, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	e7fd      	b.n	8003ce6 <vPortEnterCritical+0x4a>
	}
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	20000010 	.word	0x20000010
 8003cf8:	e000ed04 	.word	0xe000ed04

08003cfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d02:	4b12      	ldr	r3, [pc, #72]	@ (8003d4c <vPortExitCritical+0x50>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10b      	bne.n	8003d22 <vPortExitCritical+0x26>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	607b      	str	r3, [r7, #4]
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	e7fd      	b.n	8003d1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d22:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <vPortExitCritical+0x50>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	4a08      	ldr	r2, [pc, #32]	@ (8003d4c <vPortExitCritical+0x50>)
 8003d2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d2c:	4b07      	ldr	r3, [pc, #28]	@ (8003d4c <vPortExitCritical+0x50>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <vPortExitCritical+0x44>
 8003d34:	2300      	movs	r3, #0
 8003d36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000010 	.word	0x20000010

08003d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d50:	f3ef 8009 	mrs	r0, PSP
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	4b0d      	ldr	r3, [pc, #52]	@ (8003d90 <pxCurrentTCBConst>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d60:	6010      	str	r0, [r2, #0]
 8003d62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003d66:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003d6a:	f380 8811 	msr	BASEPRI, r0
 8003d6e:	f7ff fb55 	bl	800341c <vTaskSwitchContext>
 8003d72:	f04f 0000 	mov.w	r0, #0
 8003d76:	f380 8811 	msr	BASEPRI, r0
 8003d7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	6808      	ldr	r0, [r1, #0]
 8003d82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d86:	f380 8809 	msr	PSP, r0
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	4770      	bx	lr

08003d90 <pxCurrentTCBConst>:
 8003d90:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop

08003d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	607b      	str	r3, [r7, #4]
}
 8003db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003db2:	f7ff fa79 	bl	80032a8 <xTaskIncrementTick>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dbc:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <SysTick_Handler+0x40>)
 8003dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	f383 8811 	msr	BASEPRI, r3
}
 8003dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003de0:	4b0a      	ldr	r3, [pc, #40]	@ (8003e0c <vPortSetupTimerInterrupt+0x30>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003de6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <vPortSetupTimerInterrupt+0x34>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dec:	4b09      	ldr	r3, [pc, #36]	@ (8003e14 <vPortSetupTimerInterrupt+0x38>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a09      	ldr	r2, [pc, #36]	@ (8003e18 <vPortSetupTimerInterrupt+0x3c>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	4a08      	ldr	r2, [pc, #32]	@ (8003e1c <vPortSetupTimerInterrupt+0x40>)
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dfe:	4b03      	ldr	r3, [pc, #12]	@ (8003e0c <vPortSetupTimerInterrupt+0x30>)
 8003e00:	2207      	movs	r2, #7
 8003e02:	601a      	str	r2, [r3, #0]
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr
 8003e0c:	e000e010 	.word	0xe000e010
 8003e10:	e000e018 	.word	0xe000e018
 8003e14:	20000004 	.word	0x20000004
 8003e18:	10624dd3 	.word	0x10624dd3
 8003e1c:	e000e014 	.word	0xe000e014

08003e20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08a      	sub	sp, #40	@ 0x28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e2c:	f7ff f990 	bl	8003150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e30:	4b5c      	ldr	r3, [pc, #368]	@ (8003fa4 <pvPortMalloc+0x184>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e38:	f000 f924 	bl	8004084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8003fa8 <pvPortMalloc+0x188>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f040 8095 	bne.w	8003f74 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01e      	beq.n	8003e8e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003e50:	2208      	movs	r2, #8
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d015      	beq.n	8003e8e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f023 0307 	bic.w	r3, r3, #7
 8003e68:	3308      	adds	r3, #8
 8003e6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <pvPortMalloc+0x6e>
	__asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	617b      	str	r3, [r7, #20]
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	e7fd      	b.n	8003e8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d06f      	beq.n	8003f74 <pvPortMalloc+0x154>
 8003e94:	4b45      	ldr	r3, [pc, #276]	@ (8003fac <pvPortMalloc+0x18c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d86a      	bhi.n	8003f74 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e9e:	4b44      	ldr	r3, [pc, #272]	@ (8003fb0 <pvPortMalloc+0x190>)
 8003ea0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ea2:	4b43      	ldr	r3, [pc, #268]	@ (8003fb0 <pvPortMalloc+0x190>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ea8:	e004      	b.n	8003eb4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d903      	bls.n	8003ec6 <pvPortMalloc+0xa6>
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f1      	bne.n	8003eaa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ec6:	4b37      	ldr	r3, [pc, #220]	@ (8003fa4 <pvPortMalloc+0x184>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d051      	beq.n	8003f74 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	4413      	add	r3, r2
 8003ed8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	1ad2      	subs	r2, r2, r3
 8003eea:	2308      	movs	r3, #8
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d920      	bls.n	8003f34 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <pvPortMalloc+0xfc>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	613b      	str	r3, [r7, #16]
}
 8003f16:	bf00      	nop
 8003f18:	bf00      	nop
 8003f1a:	e7fd      	b.n	8003f18 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	1ad2      	subs	r2, r2, r3
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f2e:	69b8      	ldr	r0, [r7, #24]
 8003f30:	f000 f90a 	bl	8004148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f34:	4b1d      	ldr	r3, [pc, #116]	@ (8003fac <pvPortMalloc+0x18c>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fac <pvPortMalloc+0x18c>)
 8003f40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f42:	4b1a      	ldr	r3, [pc, #104]	@ (8003fac <pvPortMalloc+0x18c>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb4 <pvPortMalloc+0x194>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d203      	bcs.n	8003f56 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f4e:	4b17      	ldr	r3, [pc, #92]	@ (8003fac <pvPortMalloc+0x18c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a18      	ldr	r2, [pc, #96]	@ (8003fb4 <pvPortMalloc+0x194>)
 8003f54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	4b13      	ldr	r3, [pc, #76]	@ (8003fa8 <pvPortMalloc+0x188>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003f6a:	4b13      	ldr	r3, [pc, #76]	@ (8003fb8 <pvPortMalloc+0x198>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	4a11      	ldr	r2, [pc, #68]	@ (8003fb8 <pvPortMalloc+0x198>)
 8003f72:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f74:	f7ff f8fa 	bl	800316c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <pvPortMalloc+0x17a>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	60fb      	str	r3, [r7, #12]
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	e7fd      	b.n	8003f96 <pvPortMalloc+0x176>
	return pvReturn;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3728      	adds	r7, #40	@ 0x28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200010bc 	.word	0x200010bc
 8003fa8:	200010d0 	.word	0x200010d0
 8003fac:	200010c0 	.word	0x200010c0
 8003fb0:	200010b4 	.word	0x200010b4
 8003fb4:	200010c4 	.word	0x200010c4
 8003fb8:	200010c8 	.word	0x200010c8

08003fbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d04f      	beq.n	800406e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003fce:	2308      	movs	r3, #8
 8003fd0:	425b      	negs	r3, r3
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	4b25      	ldr	r3, [pc, #148]	@ (8004078 <vPortFree+0xbc>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <vPortFree+0x46>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	60fb      	str	r3, [r7, #12]
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	e7fd      	b.n	8003ffe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <vPortFree+0x66>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	60bb      	str	r3, [r7, #8]
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	e7fd      	b.n	800401e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	4b14      	ldr	r3, [pc, #80]	@ (8004078 <vPortFree+0xbc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01e      	beq.n	800406e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d11a      	bne.n	800406e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	4b0e      	ldr	r3, [pc, #56]	@ (8004078 <vPortFree+0xbc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	43db      	mvns	r3, r3
 8004042:	401a      	ands	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004048:	f7ff f882 	bl	8003150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <vPortFree+0xc0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4413      	add	r3, r2
 8004056:	4a09      	ldr	r2, [pc, #36]	@ (800407c <vPortFree+0xc0>)
 8004058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800405a:	6938      	ldr	r0, [r7, #16]
 800405c:	f000 f874 	bl	8004148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004060:	4b07      	ldr	r3, [pc, #28]	@ (8004080 <vPortFree+0xc4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	4a06      	ldr	r2, [pc, #24]	@ (8004080 <vPortFree+0xc4>)
 8004068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800406a:	f7ff f87f 	bl	800316c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800406e:	bf00      	nop
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200010d0 	.word	0x200010d0
 800407c:	200010c0 	.word	0x200010c0
 8004080:	200010cc 	.word	0x200010cc

08004084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800408a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800408e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004090:	4b27      	ldr	r3, [pc, #156]	@ (8004130 <prvHeapInit+0xac>)
 8004092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00c      	beq.n	80040b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3307      	adds	r3, #7
 80040a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0307 	bic.w	r3, r3, #7
 80040aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004130 <prvHeapInit+0xac>)
 80040b4:	4413      	add	r3, r2
 80040b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004134 <prvHeapInit+0xb0>)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80040c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004134 <prvHeapInit+0xb0>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	4413      	add	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80040d0:	2208      	movs	r2, #8
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0307 	bic.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a15      	ldr	r2, [pc, #84]	@ (8004138 <prvHeapInit+0xb4>)
 80040e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80040e6:	4b14      	ldr	r3, [pc, #80]	@ (8004138 <prvHeapInit+0xb4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2200      	movs	r2, #0
 80040ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80040ee:	4b12      	ldr	r3, [pc, #72]	@ (8004138 <prvHeapInit+0xb4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	1ad2      	subs	r2, r2, r3
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004104:	4b0c      	ldr	r3, [pc, #48]	@ (8004138 <prvHeapInit+0xb4>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4a0a      	ldr	r2, [pc, #40]	@ (800413c <prvHeapInit+0xb8>)
 8004112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4a09      	ldr	r2, [pc, #36]	@ (8004140 <prvHeapInit+0xbc>)
 800411a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800411c:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <prvHeapInit+0xc0>)
 800411e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004122:	601a      	str	r2, [r3, #0]
}
 8004124:	bf00      	nop
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	200004b4 	.word	0x200004b4
 8004134:	200010b4 	.word	0x200010b4
 8004138:	200010bc 	.word	0x200010bc
 800413c:	200010c4 	.word	0x200010c4
 8004140:	200010c0 	.word	0x200010c0
 8004144:	200010d0 	.word	0x200010d0

08004148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004150:	4b27      	ldr	r3, [pc, #156]	@ (80041f0 <prvInsertBlockIntoFreeList+0xa8>)
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e002      	b.n	800415c <prvInsertBlockIntoFreeList+0x14>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	429a      	cmp	r2, r3
 8004164:	d8f7      	bhi.n	8004156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	4413      	add	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	d108      	bne.n	800418a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	441a      	add	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	441a      	add	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d118      	bne.n	80041d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4b14      	ldr	r3, [pc, #80]	@ (80041f4 <prvInsertBlockIntoFreeList+0xac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d00d      	beq.n	80041c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	441a      	add	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e008      	b.n	80041d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80041c6:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <prvInsertBlockIntoFreeList+0xac>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e003      	b.n	80041d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d002      	beq.n	80041e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr
 80041f0:	200010b4 	.word	0x200010b4
 80041f4:	200010bc 	.word	0x200010bc

080041f8 <atoi>:
 80041f8:	220a      	movs	r2, #10
 80041fa:	2100      	movs	r1, #0
 80041fc:	f000 b87a 	b.w	80042f4 <strtol>

08004200 <_strtol_l.constprop.0>:
 8004200:	2b24      	cmp	r3, #36	@ 0x24
 8004202:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004206:	4686      	mov	lr, r0
 8004208:	4690      	mov	r8, r2
 800420a:	d801      	bhi.n	8004210 <_strtol_l.constprop.0+0x10>
 800420c:	2b01      	cmp	r3, #1
 800420e:	d106      	bne.n	800421e <_strtol_l.constprop.0+0x1e>
 8004210:	f000 f8c8 	bl	80043a4 <__errno>
 8004214:	2316      	movs	r3, #22
 8004216:	6003      	str	r3, [r0, #0]
 8004218:	2000      	movs	r0, #0
 800421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421e:	460d      	mov	r5, r1
 8004220:	4833      	ldr	r0, [pc, #204]	@ (80042f0 <_strtol_l.constprop.0+0xf0>)
 8004222:	462a      	mov	r2, r5
 8004224:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004228:	5d06      	ldrb	r6, [r0, r4]
 800422a:	f016 0608 	ands.w	r6, r6, #8
 800422e:	d1f8      	bne.n	8004222 <_strtol_l.constprop.0+0x22>
 8004230:	2c2d      	cmp	r4, #45	@ 0x2d
 8004232:	d12d      	bne.n	8004290 <_strtol_l.constprop.0+0x90>
 8004234:	2601      	movs	r6, #1
 8004236:	782c      	ldrb	r4, [r5, #0]
 8004238:	1c95      	adds	r5, r2, #2
 800423a:	f033 0210 	bics.w	r2, r3, #16
 800423e:	d109      	bne.n	8004254 <_strtol_l.constprop.0+0x54>
 8004240:	2c30      	cmp	r4, #48	@ 0x30
 8004242:	d12a      	bne.n	800429a <_strtol_l.constprop.0+0x9a>
 8004244:	782a      	ldrb	r2, [r5, #0]
 8004246:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800424a:	2a58      	cmp	r2, #88	@ 0x58
 800424c:	d125      	bne.n	800429a <_strtol_l.constprop.0+0x9a>
 800424e:	2310      	movs	r3, #16
 8004250:	786c      	ldrb	r4, [r5, #1]
 8004252:	3502      	adds	r5, #2
 8004254:	2200      	movs	r2, #0
 8004256:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800425a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800425e:	fbbc f9f3 	udiv	r9, ip, r3
 8004262:	4610      	mov	r0, r2
 8004264:	fb03 ca19 	mls	sl, r3, r9, ip
 8004268:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800426c:	2f09      	cmp	r7, #9
 800426e:	d81b      	bhi.n	80042a8 <_strtol_l.constprop.0+0xa8>
 8004270:	463c      	mov	r4, r7
 8004272:	42a3      	cmp	r3, r4
 8004274:	dd27      	ble.n	80042c6 <_strtol_l.constprop.0+0xc6>
 8004276:	1c57      	adds	r7, r2, #1
 8004278:	d007      	beq.n	800428a <_strtol_l.constprop.0+0x8a>
 800427a:	4581      	cmp	r9, r0
 800427c:	d320      	bcc.n	80042c0 <_strtol_l.constprop.0+0xc0>
 800427e:	d101      	bne.n	8004284 <_strtol_l.constprop.0+0x84>
 8004280:	45a2      	cmp	sl, r4
 8004282:	db1d      	blt.n	80042c0 <_strtol_l.constprop.0+0xc0>
 8004284:	2201      	movs	r2, #1
 8004286:	fb00 4003 	mla	r0, r0, r3, r4
 800428a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800428e:	e7eb      	b.n	8004268 <_strtol_l.constprop.0+0x68>
 8004290:	2c2b      	cmp	r4, #43	@ 0x2b
 8004292:	bf04      	itt	eq
 8004294:	782c      	ldrbeq	r4, [r5, #0]
 8004296:	1c95      	addeq	r5, r2, #2
 8004298:	e7cf      	b.n	800423a <_strtol_l.constprop.0+0x3a>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1da      	bne.n	8004254 <_strtol_l.constprop.0+0x54>
 800429e:	2c30      	cmp	r4, #48	@ 0x30
 80042a0:	bf0c      	ite	eq
 80042a2:	2308      	moveq	r3, #8
 80042a4:	230a      	movne	r3, #10
 80042a6:	e7d5      	b.n	8004254 <_strtol_l.constprop.0+0x54>
 80042a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80042ac:	2f19      	cmp	r7, #25
 80042ae:	d801      	bhi.n	80042b4 <_strtol_l.constprop.0+0xb4>
 80042b0:	3c37      	subs	r4, #55	@ 0x37
 80042b2:	e7de      	b.n	8004272 <_strtol_l.constprop.0+0x72>
 80042b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80042b8:	2f19      	cmp	r7, #25
 80042ba:	d804      	bhi.n	80042c6 <_strtol_l.constprop.0+0xc6>
 80042bc:	3c57      	subs	r4, #87	@ 0x57
 80042be:	e7d8      	b.n	8004272 <_strtol_l.constprop.0+0x72>
 80042c0:	f04f 32ff 	mov.w	r2, #4294967295
 80042c4:	e7e1      	b.n	800428a <_strtol_l.constprop.0+0x8a>
 80042c6:	1c53      	adds	r3, r2, #1
 80042c8:	d108      	bne.n	80042dc <_strtol_l.constprop.0+0xdc>
 80042ca:	2322      	movs	r3, #34	@ 0x22
 80042cc:	4660      	mov	r0, ip
 80042ce:	f8ce 3000 	str.w	r3, [lr]
 80042d2:	f1b8 0f00 	cmp.w	r8, #0
 80042d6:	d0a0      	beq.n	800421a <_strtol_l.constprop.0+0x1a>
 80042d8:	1e69      	subs	r1, r5, #1
 80042da:	e006      	b.n	80042ea <_strtol_l.constprop.0+0xea>
 80042dc:	b106      	cbz	r6, 80042e0 <_strtol_l.constprop.0+0xe0>
 80042de:	4240      	negs	r0, r0
 80042e0:	f1b8 0f00 	cmp.w	r8, #0
 80042e4:	d099      	beq.n	800421a <_strtol_l.constprop.0+0x1a>
 80042e6:	2a00      	cmp	r2, #0
 80042e8:	d1f6      	bne.n	80042d8 <_strtol_l.constprop.0+0xd8>
 80042ea:	f8c8 1000 	str.w	r1, [r8]
 80042ee:	e794      	b.n	800421a <_strtol_l.constprop.0+0x1a>
 80042f0:	08005013 	.word	0x08005013

080042f4 <strtol>:
 80042f4:	4613      	mov	r3, r2
 80042f6:	460a      	mov	r2, r1
 80042f8:	4601      	mov	r1, r0
 80042fa:	4802      	ldr	r0, [pc, #8]	@ (8004304 <strtol+0x10>)
 80042fc:	6800      	ldr	r0, [r0, #0]
 80042fe:	f7ff bf7f 	b.w	8004200 <_strtol_l.constprop.0>
 8004302:	bf00      	nop
 8004304:	20000014 	.word	0x20000014

08004308 <sniprintf>:
 8004308:	b40c      	push	{r2, r3}
 800430a:	b530      	push	{r4, r5, lr}
 800430c:	4b17      	ldr	r3, [pc, #92]	@ (800436c <sniprintf+0x64>)
 800430e:	1e0c      	subs	r4, r1, #0
 8004310:	681d      	ldr	r5, [r3, #0]
 8004312:	b09d      	sub	sp, #116	@ 0x74
 8004314:	da08      	bge.n	8004328 <sniprintf+0x20>
 8004316:	238b      	movs	r3, #139	@ 0x8b
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	602b      	str	r3, [r5, #0]
 800431e:	b01d      	add	sp, #116	@ 0x74
 8004320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004324:	b002      	add	sp, #8
 8004326:	4770      	bx	lr
 8004328:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800432c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004330:	bf0c      	ite	eq
 8004332:	4623      	moveq	r3, r4
 8004334:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004338:	9304      	str	r3, [sp, #16]
 800433a:	9307      	str	r3, [sp, #28]
 800433c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004340:	9002      	str	r0, [sp, #8]
 8004342:	9006      	str	r0, [sp, #24]
 8004344:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004348:	4628      	mov	r0, r5
 800434a:	ab21      	add	r3, sp, #132	@ 0x84
 800434c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800434e:	a902      	add	r1, sp, #8
 8004350:	9301      	str	r3, [sp, #4]
 8004352:	f000 f9b3 	bl	80046bc <_svfiprintf_r>
 8004356:	1c43      	adds	r3, r0, #1
 8004358:	bfbc      	itt	lt
 800435a:	238b      	movlt	r3, #139	@ 0x8b
 800435c:	602b      	strlt	r3, [r5, #0]
 800435e:	2c00      	cmp	r4, #0
 8004360:	d0dd      	beq.n	800431e <sniprintf+0x16>
 8004362:	2200      	movs	r2, #0
 8004364:	9b02      	ldr	r3, [sp, #8]
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	e7d9      	b.n	800431e <sniprintf+0x16>
 800436a:	bf00      	nop
 800436c:	20000014 	.word	0x20000014

08004370 <memset>:
 8004370:	4603      	mov	r3, r0
 8004372:	4402      	add	r2, r0
 8004374:	4293      	cmp	r3, r2
 8004376:	d100      	bne.n	800437a <memset+0xa>
 8004378:	4770      	bx	lr
 800437a:	f803 1b01 	strb.w	r1, [r3], #1
 800437e:	e7f9      	b.n	8004374 <memset+0x4>

08004380 <strncmp>:
 8004380:	b510      	push	{r4, lr}
 8004382:	b16a      	cbz	r2, 80043a0 <strncmp+0x20>
 8004384:	3901      	subs	r1, #1
 8004386:	1884      	adds	r4, r0, r2
 8004388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800438c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004390:	429a      	cmp	r2, r3
 8004392:	d103      	bne.n	800439c <strncmp+0x1c>
 8004394:	42a0      	cmp	r0, r4
 8004396:	d001      	beq.n	800439c <strncmp+0x1c>
 8004398:	2a00      	cmp	r2, #0
 800439a:	d1f5      	bne.n	8004388 <strncmp+0x8>
 800439c:	1ad0      	subs	r0, r2, r3
 800439e:	bd10      	pop	{r4, pc}
 80043a0:	4610      	mov	r0, r2
 80043a2:	e7fc      	b.n	800439e <strncmp+0x1e>

080043a4 <__errno>:
 80043a4:	4b01      	ldr	r3, [pc, #4]	@ (80043ac <__errno+0x8>)
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000014 	.word	0x20000014

080043b0 <__libc_init_array>:
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	2600      	movs	r6, #0
 80043b4:	4d0c      	ldr	r5, [pc, #48]	@ (80043e8 <__libc_init_array+0x38>)
 80043b6:	4c0d      	ldr	r4, [pc, #52]	@ (80043ec <__libc_init_array+0x3c>)
 80043b8:	1b64      	subs	r4, r4, r5
 80043ba:	10a4      	asrs	r4, r4, #2
 80043bc:	42a6      	cmp	r6, r4
 80043be:	d109      	bne.n	80043d4 <__libc_init_array+0x24>
 80043c0:	f000 fc78 	bl	8004cb4 <_init>
 80043c4:	2600      	movs	r6, #0
 80043c6:	4d0a      	ldr	r5, [pc, #40]	@ (80043f0 <__libc_init_array+0x40>)
 80043c8:	4c0a      	ldr	r4, [pc, #40]	@ (80043f4 <__libc_init_array+0x44>)
 80043ca:	1b64      	subs	r4, r4, r5
 80043cc:	10a4      	asrs	r4, r4, #2
 80043ce:	42a6      	cmp	r6, r4
 80043d0:	d105      	bne.n	80043de <__libc_init_array+0x2e>
 80043d2:	bd70      	pop	{r4, r5, r6, pc}
 80043d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d8:	4798      	blx	r3
 80043da:	3601      	adds	r6, #1
 80043dc:	e7ee      	b.n	80043bc <__libc_init_array+0xc>
 80043de:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e2:	4798      	blx	r3
 80043e4:	3601      	adds	r6, #1
 80043e6:	e7f2      	b.n	80043ce <__libc_init_array+0x1e>
 80043e8:	08005150 	.word	0x08005150
 80043ec:	08005150 	.word	0x08005150
 80043f0:	08005150 	.word	0x08005150
 80043f4:	08005154 	.word	0x08005154

080043f8 <__retarget_lock_acquire_recursive>:
 80043f8:	4770      	bx	lr

080043fa <__retarget_lock_release_recursive>:
 80043fa:	4770      	bx	lr

080043fc <memcpy>:
 80043fc:	440a      	add	r2, r1
 80043fe:	4291      	cmp	r1, r2
 8004400:	f100 33ff 	add.w	r3, r0, #4294967295
 8004404:	d100      	bne.n	8004408 <memcpy+0xc>
 8004406:	4770      	bx	lr
 8004408:	b510      	push	{r4, lr}
 800440a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800440e:	4291      	cmp	r1, r2
 8004410:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004414:	d1f9      	bne.n	800440a <memcpy+0xe>
 8004416:	bd10      	pop	{r4, pc}

08004418 <_free_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4605      	mov	r5, r0
 800441c:	2900      	cmp	r1, #0
 800441e:	d040      	beq.n	80044a2 <_free_r+0x8a>
 8004420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004424:	1f0c      	subs	r4, r1, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	bfb8      	it	lt
 800442a:	18e4      	addlt	r4, r4, r3
 800442c:	f000 f8de 	bl	80045ec <__malloc_lock>
 8004430:	4a1c      	ldr	r2, [pc, #112]	@ (80044a4 <_free_r+0x8c>)
 8004432:	6813      	ldr	r3, [r2, #0]
 8004434:	b933      	cbnz	r3, 8004444 <_free_r+0x2c>
 8004436:	6063      	str	r3, [r4, #4]
 8004438:	6014      	str	r4, [r2, #0]
 800443a:	4628      	mov	r0, r5
 800443c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004440:	f000 b8da 	b.w	80045f8 <__malloc_unlock>
 8004444:	42a3      	cmp	r3, r4
 8004446:	d908      	bls.n	800445a <_free_r+0x42>
 8004448:	6820      	ldr	r0, [r4, #0]
 800444a:	1821      	adds	r1, r4, r0
 800444c:	428b      	cmp	r3, r1
 800444e:	bf01      	itttt	eq
 8004450:	6819      	ldreq	r1, [r3, #0]
 8004452:	685b      	ldreq	r3, [r3, #4]
 8004454:	1809      	addeq	r1, r1, r0
 8004456:	6021      	streq	r1, [r4, #0]
 8004458:	e7ed      	b.n	8004436 <_free_r+0x1e>
 800445a:	461a      	mov	r2, r3
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	b10b      	cbz	r3, 8004464 <_free_r+0x4c>
 8004460:	42a3      	cmp	r3, r4
 8004462:	d9fa      	bls.n	800445a <_free_r+0x42>
 8004464:	6811      	ldr	r1, [r2, #0]
 8004466:	1850      	adds	r0, r2, r1
 8004468:	42a0      	cmp	r0, r4
 800446a:	d10b      	bne.n	8004484 <_free_r+0x6c>
 800446c:	6820      	ldr	r0, [r4, #0]
 800446e:	4401      	add	r1, r0
 8004470:	1850      	adds	r0, r2, r1
 8004472:	4283      	cmp	r3, r0
 8004474:	6011      	str	r1, [r2, #0]
 8004476:	d1e0      	bne.n	800443a <_free_r+0x22>
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4408      	add	r0, r1
 800447e:	6010      	str	r0, [r2, #0]
 8004480:	6053      	str	r3, [r2, #4]
 8004482:	e7da      	b.n	800443a <_free_r+0x22>
 8004484:	d902      	bls.n	800448c <_free_r+0x74>
 8004486:	230c      	movs	r3, #12
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	e7d6      	b.n	800443a <_free_r+0x22>
 800448c:	6820      	ldr	r0, [r4, #0]
 800448e:	1821      	adds	r1, r4, r0
 8004490:	428b      	cmp	r3, r1
 8004492:	bf01      	itttt	eq
 8004494:	6819      	ldreq	r1, [r3, #0]
 8004496:	685b      	ldreq	r3, [r3, #4]
 8004498:	1809      	addeq	r1, r1, r0
 800449a:	6021      	streq	r1, [r4, #0]
 800449c:	6063      	str	r3, [r4, #4]
 800449e:	6054      	str	r4, [r2, #4]
 80044a0:	e7cb      	b.n	800443a <_free_r+0x22>
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
 80044a4:	20001218 	.word	0x20001218

080044a8 <sbrk_aligned>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	4e0f      	ldr	r6, [pc, #60]	@ (80044e8 <sbrk_aligned+0x40>)
 80044ac:	460c      	mov	r4, r1
 80044ae:	6831      	ldr	r1, [r6, #0]
 80044b0:	4605      	mov	r5, r0
 80044b2:	b911      	cbnz	r1, 80044ba <sbrk_aligned+0x12>
 80044b4:	f000 fbaa 	bl	8004c0c <_sbrk_r>
 80044b8:	6030      	str	r0, [r6, #0]
 80044ba:	4621      	mov	r1, r4
 80044bc:	4628      	mov	r0, r5
 80044be:	f000 fba5 	bl	8004c0c <_sbrk_r>
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	d103      	bne.n	80044ce <sbrk_aligned+0x26>
 80044c6:	f04f 34ff 	mov.w	r4, #4294967295
 80044ca:	4620      	mov	r0, r4
 80044cc:	bd70      	pop	{r4, r5, r6, pc}
 80044ce:	1cc4      	adds	r4, r0, #3
 80044d0:	f024 0403 	bic.w	r4, r4, #3
 80044d4:	42a0      	cmp	r0, r4
 80044d6:	d0f8      	beq.n	80044ca <sbrk_aligned+0x22>
 80044d8:	1a21      	subs	r1, r4, r0
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 fb96 	bl	8004c0c <_sbrk_r>
 80044e0:	3001      	adds	r0, #1
 80044e2:	d1f2      	bne.n	80044ca <sbrk_aligned+0x22>
 80044e4:	e7ef      	b.n	80044c6 <sbrk_aligned+0x1e>
 80044e6:	bf00      	nop
 80044e8:	20001214 	.word	0x20001214

080044ec <_malloc_r>:
 80044ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f0:	1ccd      	adds	r5, r1, #3
 80044f2:	f025 0503 	bic.w	r5, r5, #3
 80044f6:	3508      	adds	r5, #8
 80044f8:	2d0c      	cmp	r5, #12
 80044fa:	bf38      	it	cc
 80044fc:	250c      	movcc	r5, #12
 80044fe:	2d00      	cmp	r5, #0
 8004500:	4606      	mov	r6, r0
 8004502:	db01      	blt.n	8004508 <_malloc_r+0x1c>
 8004504:	42a9      	cmp	r1, r5
 8004506:	d904      	bls.n	8004512 <_malloc_r+0x26>
 8004508:	230c      	movs	r3, #12
 800450a:	6033      	str	r3, [r6, #0]
 800450c:	2000      	movs	r0, #0
 800450e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004512:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045e8 <_malloc_r+0xfc>
 8004516:	f000 f869 	bl	80045ec <__malloc_lock>
 800451a:	f8d8 3000 	ldr.w	r3, [r8]
 800451e:	461c      	mov	r4, r3
 8004520:	bb44      	cbnz	r4, 8004574 <_malloc_r+0x88>
 8004522:	4629      	mov	r1, r5
 8004524:	4630      	mov	r0, r6
 8004526:	f7ff ffbf 	bl	80044a8 <sbrk_aligned>
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	4604      	mov	r4, r0
 800452e:	d158      	bne.n	80045e2 <_malloc_r+0xf6>
 8004530:	f8d8 4000 	ldr.w	r4, [r8]
 8004534:	4627      	mov	r7, r4
 8004536:	2f00      	cmp	r7, #0
 8004538:	d143      	bne.n	80045c2 <_malloc_r+0xd6>
 800453a:	2c00      	cmp	r4, #0
 800453c:	d04b      	beq.n	80045d6 <_malloc_r+0xea>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	4639      	mov	r1, r7
 8004542:	4630      	mov	r0, r6
 8004544:	eb04 0903 	add.w	r9, r4, r3
 8004548:	f000 fb60 	bl	8004c0c <_sbrk_r>
 800454c:	4581      	cmp	r9, r0
 800454e:	d142      	bne.n	80045d6 <_malloc_r+0xea>
 8004550:	6821      	ldr	r1, [r4, #0]
 8004552:	4630      	mov	r0, r6
 8004554:	1a6d      	subs	r5, r5, r1
 8004556:	4629      	mov	r1, r5
 8004558:	f7ff ffa6 	bl	80044a8 <sbrk_aligned>
 800455c:	3001      	adds	r0, #1
 800455e:	d03a      	beq.n	80045d6 <_malloc_r+0xea>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	442b      	add	r3, r5
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	f8d8 3000 	ldr.w	r3, [r8]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	bb62      	cbnz	r2, 80045c8 <_malloc_r+0xdc>
 800456e:	f8c8 7000 	str.w	r7, [r8]
 8004572:	e00f      	b.n	8004594 <_malloc_r+0xa8>
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	1b52      	subs	r2, r2, r5
 8004578:	d420      	bmi.n	80045bc <_malloc_r+0xd0>
 800457a:	2a0b      	cmp	r2, #11
 800457c:	d917      	bls.n	80045ae <_malloc_r+0xc2>
 800457e:	1961      	adds	r1, r4, r5
 8004580:	42a3      	cmp	r3, r4
 8004582:	6025      	str	r5, [r4, #0]
 8004584:	bf18      	it	ne
 8004586:	6059      	strne	r1, [r3, #4]
 8004588:	6863      	ldr	r3, [r4, #4]
 800458a:	bf08      	it	eq
 800458c:	f8c8 1000 	streq.w	r1, [r8]
 8004590:	5162      	str	r2, [r4, r5]
 8004592:	604b      	str	r3, [r1, #4]
 8004594:	4630      	mov	r0, r6
 8004596:	f000 f82f 	bl	80045f8 <__malloc_unlock>
 800459a:	f104 000b 	add.w	r0, r4, #11
 800459e:	1d23      	adds	r3, r4, #4
 80045a0:	f020 0007 	bic.w	r0, r0, #7
 80045a4:	1ac2      	subs	r2, r0, r3
 80045a6:	bf1c      	itt	ne
 80045a8:	1a1b      	subne	r3, r3, r0
 80045aa:	50a3      	strne	r3, [r4, r2]
 80045ac:	e7af      	b.n	800450e <_malloc_r+0x22>
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	42a3      	cmp	r3, r4
 80045b2:	bf0c      	ite	eq
 80045b4:	f8c8 2000 	streq.w	r2, [r8]
 80045b8:	605a      	strne	r2, [r3, #4]
 80045ba:	e7eb      	b.n	8004594 <_malloc_r+0xa8>
 80045bc:	4623      	mov	r3, r4
 80045be:	6864      	ldr	r4, [r4, #4]
 80045c0:	e7ae      	b.n	8004520 <_malloc_r+0x34>
 80045c2:	463c      	mov	r4, r7
 80045c4:	687f      	ldr	r7, [r7, #4]
 80045c6:	e7b6      	b.n	8004536 <_malloc_r+0x4a>
 80045c8:	461a      	mov	r2, r3
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	42a3      	cmp	r3, r4
 80045ce:	d1fb      	bne.n	80045c8 <_malloc_r+0xdc>
 80045d0:	2300      	movs	r3, #0
 80045d2:	6053      	str	r3, [r2, #4]
 80045d4:	e7de      	b.n	8004594 <_malloc_r+0xa8>
 80045d6:	230c      	movs	r3, #12
 80045d8:	4630      	mov	r0, r6
 80045da:	6033      	str	r3, [r6, #0]
 80045dc:	f000 f80c 	bl	80045f8 <__malloc_unlock>
 80045e0:	e794      	b.n	800450c <_malloc_r+0x20>
 80045e2:	6005      	str	r5, [r0, #0]
 80045e4:	e7d6      	b.n	8004594 <_malloc_r+0xa8>
 80045e6:	bf00      	nop
 80045e8:	20001218 	.word	0x20001218

080045ec <__malloc_lock>:
 80045ec:	4801      	ldr	r0, [pc, #4]	@ (80045f4 <__malloc_lock+0x8>)
 80045ee:	f7ff bf03 	b.w	80043f8 <__retarget_lock_acquire_recursive>
 80045f2:	bf00      	nop
 80045f4:	20001210 	.word	0x20001210

080045f8 <__malloc_unlock>:
 80045f8:	4801      	ldr	r0, [pc, #4]	@ (8004600 <__malloc_unlock+0x8>)
 80045fa:	f7ff befe 	b.w	80043fa <__retarget_lock_release_recursive>
 80045fe:	bf00      	nop
 8004600:	20001210 	.word	0x20001210

08004604 <__ssputs_r>:
 8004604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004608:	461f      	mov	r7, r3
 800460a:	688e      	ldr	r6, [r1, #8]
 800460c:	4682      	mov	sl, r0
 800460e:	42be      	cmp	r6, r7
 8004610:	460c      	mov	r4, r1
 8004612:	4690      	mov	r8, r2
 8004614:	680b      	ldr	r3, [r1, #0]
 8004616:	d82d      	bhi.n	8004674 <__ssputs_r+0x70>
 8004618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800461c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004620:	d026      	beq.n	8004670 <__ssputs_r+0x6c>
 8004622:	6965      	ldr	r5, [r4, #20]
 8004624:	6909      	ldr	r1, [r1, #16]
 8004626:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800462a:	eba3 0901 	sub.w	r9, r3, r1
 800462e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004632:	1c7b      	adds	r3, r7, #1
 8004634:	444b      	add	r3, r9
 8004636:	106d      	asrs	r5, r5, #1
 8004638:	429d      	cmp	r5, r3
 800463a:	bf38      	it	cc
 800463c:	461d      	movcc	r5, r3
 800463e:	0553      	lsls	r3, r2, #21
 8004640:	d527      	bpl.n	8004692 <__ssputs_r+0x8e>
 8004642:	4629      	mov	r1, r5
 8004644:	f7ff ff52 	bl	80044ec <_malloc_r>
 8004648:	4606      	mov	r6, r0
 800464a:	b360      	cbz	r0, 80046a6 <__ssputs_r+0xa2>
 800464c:	464a      	mov	r2, r9
 800464e:	6921      	ldr	r1, [r4, #16]
 8004650:	f7ff fed4 	bl	80043fc <memcpy>
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800465a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800465e:	81a3      	strh	r3, [r4, #12]
 8004660:	6126      	str	r6, [r4, #16]
 8004662:	444e      	add	r6, r9
 8004664:	6026      	str	r6, [r4, #0]
 8004666:	463e      	mov	r6, r7
 8004668:	6165      	str	r5, [r4, #20]
 800466a:	eba5 0509 	sub.w	r5, r5, r9
 800466e:	60a5      	str	r5, [r4, #8]
 8004670:	42be      	cmp	r6, r7
 8004672:	d900      	bls.n	8004676 <__ssputs_r+0x72>
 8004674:	463e      	mov	r6, r7
 8004676:	4632      	mov	r2, r6
 8004678:	4641      	mov	r1, r8
 800467a:	6820      	ldr	r0, [r4, #0]
 800467c:	f000 faac 	bl	8004bd8 <memmove>
 8004680:	2000      	movs	r0, #0
 8004682:	68a3      	ldr	r3, [r4, #8]
 8004684:	1b9b      	subs	r3, r3, r6
 8004686:	60a3      	str	r3, [r4, #8]
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	4433      	add	r3, r6
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004692:	462a      	mov	r2, r5
 8004694:	f000 fad8 	bl	8004c48 <_realloc_r>
 8004698:	4606      	mov	r6, r0
 800469a:	2800      	cmp	r0, #0
 800469c:	d1e0      	bne.n	8004660 <__ssputs_r+0x5c>
 800469e:	4650      	mov	r0, sl
 80046a0:	6921      	ldr	r1, [r4, #16]
 80046a2:	f7ff feb9 	bl	8004418 <_free_r>
 80046a6:	230c      	movs	r3, #12
 80046a8:	f8ca 3000 	str.w	r3, [sl]
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	f04f 30ff 	mov.w	r0, #4294967295
 80046b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046b6:	81a3      	strh	r3, [r4, #12]
 80046b8:	e7e9      	b.n	800468e <__ssputs_r+0x8a>
	...

080046bc <_svfiprintf_r>:
 80046bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c0:	4698      	mov	r8, r3
 80046c2:	898b      	ldrh	r3, [r1, #12]
 80046c4:	4607      	mov	r7, r0
 80046c6:	061b      	lsls	r3, r3, #24
 80046c8:	460d      	mov	r5, r1
 80046ca:	4614      	mov	r4, r2
 80046cc:	b09d      	sub	sp, #116	@ 0x74
 80046ce:	d510      	bpl.n	80046f2 <_svfiprintf_r+0x36>
 80046d0:	690b      	ldr	r3, [r1, #16]
 80046d2:	b973      	cbnz	r3, 80046f2 <_svfiprintf_r+0x36>
 80046d4:	2140      	movs	r1, #64	@ 0x40
 80046d6:	f7ff ff09 	bl	80044ec <_malloc_r>
 80046da:	6028      	str	r0, [r5, #0]
 80046dc:	6128      	str	r0, [r5, #16]
 80046de:	b930      	cbnz	r0, 80046ee <_svfiprintf_r+0x32>
 80046e0:	230c      	movs	r3, #12
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	b01d      	add	sp, #116	@ 0x74
 80046ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ee:	2340      	movs	r3, #64	@ 0x40
 80046f0:	616b      	str	r3, [r5, #20]
 80046f2:	2300      	movs	r3, #0
 80046f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80046f6:	2320      	movs	r3, #32
 80046f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046fc:	2330      	movs	r3, #48	@ 0x30
 80046fe:	f04f 0901 	mov.w	r9, #1
 8004702:	f8cd 800c 	str.w	r8, [sp, #12]
 8004706:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80048a0 <_svfiprintf_r+0x1e4>
 800470a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800470e:	4623      	mov	r3, r4
 8004710:	469a      	mov	sl, r3
 8004712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004716:	b10a      	cbz	r2, 800471c <_svfiprintf_r+0x60>
 8004718:	2a25      	cmp	r2, #37	@ 0x25
 800471a:	d1f9      	bne.n	8004710 <_svfiprintf_r+0x54>
 800471c:	ebba 0b04 	subs.w	fp, sl, r4
 8004720:	d00b      	beq.n	800473a <_svfiprintf_r+0x7e>
 8004722:	465b      	mov	r3, fp
 8004724:	4622      	mov	r2, r4
 8004726:	4629      	mov	r1, r5
 8004728:	4638      	mov	r0, r7
 800472a:	f7ff ff6b 	bl	8004604 <__ssputs_r>
 800472e:	3001      	adds	r0, #1
 8004730:	f000 80a7 	beq.w	8004882 <_svfiprintf_r+0x1c6>
 8004734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004736:	445a      	add	r2, fp
 8004738:	9209      	str	r2, [sp, #36]	@ 0x24
 800473a:	f89a 3000 	ldrb.w	r3, [sl]
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 809f 	beq.w	8004882 <_svfiprintf_r+0x1c6>
 8004744:	2300      	movs	r3, #0
 8004746:	f04f 32ff 	mov.w	r2, #4294967295
 800474a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800474e:	f10a 0a01 	add.w	sl, sl, #1
 8004752:	9304      	str	r3, [sp, #16]
 8004754:	9307      	str	r3, [sp, #28]
 8004756:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800475a:	931a      	str	r3, [sp, #104]	@ 0x68
 800475c:	4654      	mov	r4, sl
 800475e:	2205      	movs	r2, #5
 8004760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004764:	484e      	ldr	r0, [pc, #312]	@ (80048a0 <_svfiprintf_r+0x1e4>)
 8004766:	f000 fa61 	bl	8004c2c <memchr>
 800476a:	9a04      	ldr	r2, [sp, #16]
 800476c:	b9d8      	cbnz	r0, 80047a6 <_svfiprintf_r+0xea>
 800476e:	06d0      	lsls	r0, r2, #27
 8004770:	bf44      	itt	mi
 8004772:	2320      	movmi	r3, #32
 8004774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004778:	0711      	lsls	r1, r2, #28
 800477a:	bf44      	itt	mi
 800477c:	232b      	movmi	r3, #43	@ 0x2b
 800477e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004782:	f89a 3000 	ldrb.w	r3, [sl]
 8004786:	2b2a      	cmp	r3, #42	@ 0x2a
 8004788:	d015      	beq.n	80047b6 <_svfiprintf_r+0xfa>
 800478a:	4654      	mov	r4, sl
 800478c:	2000      	movs	r0, #0
 800478e:	f04f 0c0a 	mov.w	ip, #10
 8004792:	9a07      	ldr	r2, [sp, #28]
 8004794:	4621      	mov	r1, r4
 8004796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800479a:	3b30      	subs	r3, #48	@ 0x30
 800479c:	2b09      	cmp	r3, #9
 800479e:	d94b      	bls.n	8004838 <_svfiprintf_r+0x17c>
 80047a0:	b1b0      	cbz	r0, 80047d0 <_svfiprintf_r+0x114>
 80047a2:	9207      	str	r2, [sp, #28]
 80047a4:	e014      	b.n	80047d0 <_svfiprintf_r+0x114>
 80047a6:	eba0 0308 	sub.w	r3, r0, r8
 80047aa:	fa09 f303 	lsl.w	r3, r9, r3
 80047ae:	4313      	orrs	r3, r2
 80047b0:	46a2      	mov	sl, r4
 80047b2:	9304      	str	r3, [sp, #16]
 80047b4:	e7d2      	b.n	800475c <_svfiprintf_r+0xa0>
 80047b6:	9b03      	ldr	r3, [sp, #12]
 80047b8:	1d19      	adds	r1, r3, #4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	9103      	str	r1, [sp, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	bfbb      	ittet	lt
 80047c2:	425b      	neglt	r3, r3
 80047c4:	f042 0202 	orrlt.w	r2, r2, #2
 80047c8:	9307      	strge	r3, [sp, #28]
 80047ca:	9307      	strlt	r3, [sp, #28]
 80047cc:	bfb8      	it	lt
 80047ce:	9204      	strlt	r2, [sp, #16]
 80047d0:	7823      	ldrb	r3, [r4, #0]
 80047d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80047d4:	d10a      	bne.n	80047ec <_svfiprintf_r+0x130>
 80047d6:	7863      	ldrb	r3, [r4, #1]
 80047d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80047da:	d132      	bne.n	8004842 <_svfiprintf_r+0x186>
 80047dc:	9b03      	ldr	r3, [sp, #12]
 80047de:	3402      	adds	r4, #2
 80047e0:	1d1a      	adds	r2, r3, #4
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	9203      	str	r2, [sp, #12]
 80047e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047ea:	9305      	str	r3, [sp, #20]
 80047ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80048a4 <_svfiprintf_r+0x1e8>
 80047f0:	2203      	movs	r2, #3
 80047f2:	4650      	mov	r0, sl
 80047f4:	7821      	ldrb	r1, [r4, #0]
 80047f6:	f000 fa19 	bl	8004c2c <memchr>
 80047fa:	b138      	cbz	r0, 800480c <_svfiprintf_r+0x150>
 80047fc:	2240      	movs	r2, #64	@ 0x40
 80047fe:	9b04      	ldr	r3, [sp, #16]
 8004800:	eba0 000a 	sub.w	r0, r0, sl
 8004804:	4082      	lsls	r2, r0
 8004806:	4313      	orrs	r3, r2
 8004808:	3401      	adds	r4, #1
 800480a:	9304      	str	r3, [sp, #16]
 800480c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004810:	2206      	movs	r2, #6
 8004812:	4825      	ldr	r0, [pc, #148]	@ (80048a8 <_svfiprintf_r+0x1ec>)
 8004814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004818:	f000 fa08 	bl	8004c2c <memchr>
 800481c:	2800      	cmp	r0, #0
 800481e:	d036      	beq.n	800488e <_svfiprintf_r+0x1d2>
 8004820:	4b22      	ldr	r3, [pc, #136]	@ (80048ac <_svfiprintf_r+0x1f0>)
 8004822:	bb1b      	cbnz	r3, 800486c <_svfiprintf_r+0x1b0>
 8004824:	9b03      	ldr	r3, [sp, #12]
 8004826:	3307      	adds	r3, #7
 8004828:	f023 0307 	bic.w	r3, r3, #7
 800482c:	3308      	adds	r3, #8
 800482e:	9303      	str	r3, [sp, #12]
 8004830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004832:	4433      	add	r3, r6
 8004834:	9309      	str	r3, [sp, #36]	@ 0x24
 8004836:	e76a      	b.n	800470e <_svfiprintf_r+0x52>
 8004838:	460c      	mov	r4, r1
 800483a:	2001      	movs	r0, #1
 800483c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004840:	e7a8      	b.n	8004794 <_svfiprintf_r+0xd8>
 8004842:	2300      	movs	r3, #0
 8004844:	f04f 0c0a 	mov.w	ip, #10
 8004848:	4619      	mov	r1, r3
 800484a:	3401      	adds	r4, #1
 800484c:	9305      	str	r3, [sp, #20]
 800484e:	4620      	mov	r0, r4
 8004850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004854:	3a30      	subs	r2, #48	@ 0x30
 8004856:	2a09      	cmp	r2, #9
 8004858:	d903      	bls.n	8004862 <_svfiprintf_r+0x1a6>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0c6      	beq.n	80047ec <_svfiprintf_r+0x130>
 800485e:	9105      	str	r1, [sp, #20]
 8004860:	e7c4      	b.n	80047ec <_svfiprintf_r+0x130>
 8004862:	4604      	mov	r4, r0
 8004864:	2301      	movs	r3, #1
 8004866:	fb0c 2101 	mla	r1, ip, r1, r2
 800486a:	e7f0      	b.n	800484e <_svfiprintf_r+0x192>
 800486c:	ab03      	add	r3, sp, #12
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	462a      	mov	r2, r5
 8004872:	4638      	mov	r0, r7
 8004874:	4b0e      	ldr	r3, [pc, #56]	@ (80048b0 <_svfiprintf_r+0x1f4>)
 8004876:	a904      	add	r1, sp, #16
 8004878:	f3af 8000 	nop.w
 800487c:	1c42      	adds	r2, r0, #1
 800487e:	4606      	mov	r6, r0
 8004880:	d1d6      	bne.n	8004830 <_svfiprintf_r+0x174>
 8004882:	89ab      	ldrh	r3, [r5, #12]
 8004884:	065b      	lsls	r3, r3, #25
 8004886:	f53f af2d 	bmi.w	80046e4 <_svfiprintf_r+0x28>
 800488a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800488c:	e72c      	b.n	80046e8 <_svfiprintf_r+0x2c>
 800488e:	ab03      	add	r3, sp, #12
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	462a      	mov	r2, r5
 8004894:	4638      	mov	r0, r7
 8004896:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <_svfiprintf_r+0x1f4>)
 8004898:	a904      	add	r1, sp, #16
 800489a:	f000 f87d 	bl	8004998 <_printf_i>
 800489e:	e7ed      	b.n	800487c <_svfiprintf_r+0x1c0>
 80048a0:	08005113 	.word	0x08005113
 80048a4:	08005119 	.word	0x08005119
 80048a8:	0800511d 	.word	0x0800511d
 80048ac:	00000000 	.word	0x00000000
 80048b0:	08004605 	.word	0x08004605

080048b4 <_printf_common>:
 80048b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b8:	4616      	mov	r6, r2
 80048ba:	4698      	mov	r8, r3
 80048bc:	688a      	ldr	r2, [r1, #8]
 80048be:	690b      	ldr	r3, [r1, #16]
 80048c0:	4607      	mov	r7, r0
 80048c2:	4293      	cmp	r3, r2
 80048c4:	bfb8      	it	lt
 80048c6:	4613      	movlt	r3, r2
 80048c8:	6033      	str	r3, [r6, #0]
 80048ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048ce:	460c      	mov	r4, r1
 80048d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048d4:	b10a      	cbz	r2, 80048da <_printf_common+0x26>
 80048d6:	3301      	adds	r3, #1
 80048d8:	6033      	str	r3, [r6, #0]
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	0699      	lsls	r1, r3, #26
 80048de:	bf42      	ittt	mi
 80048e0:	6833      	ldrmi	r3, [r6, #0]
 80048e2:	3302      	addmi	r3, #2
 80048e4:	6033      	strmi	r3, [r6, #0]
 80048e6:	6825      	ldr	r5, [r4, #0]
 80048e8:	f015 0506 	ands.w	r5, r5, #6
 80048ec:	d106      	bne.n	80048fc <_printf_common+0x48>
 80048ee:	f104 0a19 	add.w	sl, r4, #25
 80048f2:	68e3      	ldr	r3, [r4, #12]
 80048f4:	6832      	ldr	r2, [r6, #0]
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	42ab      	cmp	r3, r5
 80048fa:	dc2b      	bgt.n	8004954 <_printf_common+0xa0>
 80048fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	3b00      	subs	r3, #0
 8004904:	bf18      	it	ne
 8004906:	2301      	movne	r3, #1
 8004908:	0692      	lsls	r2, r2, #26
 800490a:	d430      	bmi.n	800496e <_printf_common+0xba>
 800490c:	4641      	mov	r1, r8
 800490e:	4638      	mov	r0, r7
 8004910:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004914:	47c8      	blx	r9
 8004916:	3001      	adds	r0, #1
 8004918:	d023      	beq.n	8004962 <_printf_common+0xae>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	6922      	ldr	r2, [r4, #16]
 800491e:	f003 0306 	and.w	r3, r3, #6
 8004922:	2b04      	cmp	r3, #4
 8004924:	bf14      	ite	ne
 8004926:	2500      	movne	r5, #0
 8004928:	6833      	ldreq	r3, [r6, #0]
 800492a:	f04f 0600 	mov.w	r6, #0
 800492e:	bf08      	it	eq
 8004930:	68e5      	ldreq	r5, [r4, #12]
 8004932:	f104 041a 	add.w	r4, r4, #26
 8004936:	bf08      	it	eq
 8004938:	1aed      	subeq	r5, r5, r3
 800493a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800493e:	bf08      	it	eq
 8004940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004944:	4293      	cmp	r3, r2
 8004946:	bfc4      	itt	gt
 8004948:	1a9b      	subgt	r3, r3, r2
 800494a:	18ed      	addgt	r5, r5, r3
 800494c:	42b5      	cmp	r5, r6
 800494e:	d11a      	bne.n	8004986 <_printf_common+0xd2>
 8004950:	2000      	movs	r0, #0
 8004952:	e008      	b.n	8004966 <_printf_common+0xb2>
 8004954:	2301      	movs	r3, #1
 8004956:	4652      	mov	r2, sl
 8004958:	4641      	mov	r1, r8
 800495a:	4638      	mov	r0, r7
 800495c:	47c8      	blx	r9
 800495e:	3001      	adds	r0, #1
 8004960:	d103      	bne.n	800496a <_printf_common+0xb6>
 8004962:	f04f 30ff 	mov.w	r0, #4294967295
 8004966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496a:	3501      	adds	r5, #1
 800496c:	e7c1      	b.n	80048f2 <_printf_common+0x3e>
 800496e:	2030      	movs	r0, #48	@ 0x30
 8004970:	18e1      	adds	r1, r4, r3
 8004972:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800497c:	4422      	add	r2, r4
 800497e:	3302      	adds	r3, #2
 8004980:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004984:	e7c2      	b.n	800490c <_printf_common+0x58>
 8004986:	2301      	movs	r3, #1
 8004988:	4622      	mov	r2, r4
 800498a:	4641      	mov	r1, r8
 800498c:	4638      	mov	r0, r7
 800498e:	47c8      	blx	r9
 8004990:	3001      	adds	r0, #1
 8004992:	d0e6      	beq.n	8004962 <_printf_common+0xae>
 8004994:	3601      	adds	r6, #1
 8004996:	e7d9      	b.n	800494c <_printf_common+0x98>

08004998 <_printf_i>:
 8004998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800499c:	7e0f      	ldrb	r7, [r1, #24]
 800499e:	4691      	mov	r9, r2
 80049a0:	2f78      	cmp	r7, #120	@ 0x78
 80049a2:	4680      	mov	r8, r0
 80049a4:	460c      	mov	r4, r1
 80049a6:	469a      	mov	sl, r3
 80049a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049ae:	d807      	bhi.n	80049c0 <_printf_i+0x28>
 80049b0:	2f62      	cmp	r7, #98	@ 0x62
 80049b2:	d80a      	bhi.n	80049ca <_printf_i+0x32>
 80049b4:	2f00      	cmp	r7, #0
 80049b6:	f000 80d3 	beq.w	8004b60 <_printf_i+0x1c8>
 80049ba:	2f58      	cmp	r7, #88	@ 0x58
 80049bc:	f000 80ba 	beq.w	8004b34 <_printf_i+0x19c>
 80049c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049c8:	e03a      	b.n	8004a40 <_printf_i+0xa8>
 80049ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049ce:	2b15      	cmp	r3, #21
 80049d0:	d8f6      	bhi.n	80049c0 <_printf_i+0x28>
 80049d2:	a101      	add	r1, pc, #4	@ (adr r1, 80049d8 <_printf_i+0x40>)
 80049d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049d8:	08004a31 	.word	0x08004a31
 80049dc:	08004a45 	.word	0x08004a45
 80049e0:	080049c1 	.word	0x080049c1
 80049e4:	080049c1 	.word	0x080049c1
 80049e8:	080049c1 	.word	0x080049c1
 80049ec:	080049c1 	.word	0x080049c1
 80049f0:	08004a45 	.word	0x08004a45
 80049f4:	080049c1 	.word	0x080049c1
 80049f8:	080049c1 	.word	0x080049c1
 80049fc:	080049c1 	.word	0x080049c1
 8004a00:	080049c1 	.word	0x080049c1
 8004a04:	08004b47 	.word	0x08004b47
 8004a08:	08004a6f 	.word	0x08004a6f
 8004a0c:	08004b01 	.word	0x08004b01
 8004a10:	080049c1 	.word	0x080049c1
 8004a14:	080049c1 	.word	0x080049c1
 8004a18:	08004b69 	.word	0x08004b69
 8004a1c:	080049c1 	.word	0x080049c1
 8004a20:	08004a6f 	.word	0x08004a6f
 8004a24:	080049c1 	.word	0x080049c1
 8004a28:	080049c1 	.word	0x080049c1
 8004a2c:	08004b09 	.word	0x08004b09
 8004a30:	6833      	ldr	r3, [r6, #0]
 8004a32:	1d1a      	adds	r2, r3, #4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6032      	str	r2, [r6, #0]
 8004a38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a40:	2301      	movs	r3, #1
 8004a42:	e09e      	b.n	8004b82 <_printf_i+0x1ea>
 8004a44:	6833      	ldr	r3, [r6, #0]
 8004a46:	6820      	ldr	r0, [r4, #0]
 8004a48:	1d19      	adds	r1, r3, #4
 8004a4a:	6031      	str	r1, [r6, #0]
 8004a4c:	0606      	lsls	r6, r0, #24
 8004a4e:	d501      	bpl.n	8004a54 <_printf_i+0xbc>
 8004a50:	681d      	ldr	r5, [r3, #0]
 8004a52:	e003      	b.n	8004a5c <_printf_i+0xc4>
 8004a54:	0645      	lsls	r5, r0, #25
 8004a56:	d5fb      	bpl.n	8004a50 <_printf_i+0xb8>
 8004a58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a5c:	2d00      	cmp	r5, #0
 8004a5e:	da03      	bge.n	8004a68 <_printf_i+0xd0>
 8004a60:	232d      	movs	r3, #45	@ 0x2d
 8004a62:	426d      	negs	r5, r5
 8004a64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a68:	230a      	movs	r3, #10
 8004a6a:	4859      	ldr	r0, [pc, #356]	@ (8004bd0 <_printf_i+0x238>)
 8004a6c:	e011      	b.n	8004a92 <_printf_i+0xfa>
 8004a6e:	6821      	ldr	r1, [r4, #0]
 8004a70:	6833      	ldr	r3, [r6, #0]
 8004a72:	0608      	lsls	r0, r1, #24
 8004a74:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a78:	d402      	bmi.n	8004a80 <_printf_i+0xe8>
 8004a7a:	0649      	lsls	r1, r1, #25
 8004a7c:	bf48      	it	mi
 8004a7e:	b2ad      	uxthmi	r5, r5
 8004a80:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a82:	6033      	str	r3, [r6, #0]
 8004a84:	bf14      	ite	ne
 8004a86:	230a      	movne	r3, #10
 8004a88:	2308      	moveq	r3, #8
 8004a8a:	4851      	ldr	r0, [pc, #324]	@ (8004bd0 <_printf_i+0x238>)
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a92:	6866      	ldr	r6, [r4, #4]
 8004a94:	2e00      	cmp	r6, #0
 8004a96:	bfa8      	it	ge
 8004a98:	6821      	ldrge	r1, [r4, #0]
 8004a9a:	60a6      	str	r6, [r4, #8]
 8004a9c:	bfa4      	itt	ge
 8004a9e:	f021 0104 	bicge.w	r1, r1, #4
 8004aa2:	6021      	strge	r1, [r4, #0]
 8004aa4:	b90d      	cbnz	r5, 8004aaa <_printf_i+0x112>
 8004aa6:	2e00      	cmp	r6, #0
 8004aa8:	d04b      	beq.n	8004b42 <_printf_i+0x1aa>
 8004aaa:	4616      	mov	r6, r2
 8004aac:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ab0:	fb03 5711 	mls	r7, r3, r1, r5
 8004ab4:	5dc7      	ldrb	r7, [r0, r7]
 8004ab6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004aba:	462f      	mov	r7, r5
 8004abc:	42bb      	cmp	r3, r7
 8004abe:	460d      	mov	r5, r1
 8004ac0:	d9f4      	bls.n	8004aac <_printf_i+0x114>
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d10b      	bne.n	8004ade <_printf_i+0x146>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	07df      	lsls	r7, r3, #31
 8004aca:	d508      	bpl.n	8004ade <_printf_i+0x146>
 8004acc:	6923      	ldr	r3, [r4, #16]
 8004ace:	6861      	ldr	r1, [r4, #4]
 8004ad0:	4299      	cmp	r1, r3
 8004ad2:	bfde      	ittt	le
 8004ad4:	2330      	movle	r3, #48	@ 0x30
 8004ad6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ada:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ade:	1b92      	subs	r2, r2, r6
 8004ae0:	6122      	str	r2, [r4, #16]
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4640      	mov	r0, r8
 8004ae8:	f8cd a000 	str.w	sl, [sp]
 8004aec:	aa03      	add	r2, sp, #12
 8004aee:	f7ff fee1 	bl	80048b4 <_printf_common>
 8004af2:	3001      	adds	r0, #1
 8004af4:	d14a      	bne.n	8004b8c <_printf_i+0x1f4>
 8004af6:	f04f 30ff 	mov.w	r0, #4294967295
 8004afa:	b004      	add	sp, #16
 8004afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	f043 0320 	orr.w	r3, r3, #32
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	2778      	movs	r7, #120	@ 0x78
 8004b0a:	4832      	ldr	r0, [pc, #200]	@ (8004bd4 <_printf_i+0x23c>)
 8004b0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	6831      	ldr	r1, [r6, #0]
 8004b14:	061f      	lsls	r7, r3, #24
 8004b16:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b1a:	d402      	bmi.n	8004b22 <_printf_i+0x18a>
 8004b1c:	065f      	lsls	r7, r3, #25
 8004b1e:	bf48      	it	mi
 8004b20:	b2ad      	uxthmi	r5, r5
 8004b22:	6031      	str	r1, [r6, #0]
 8004b24:	07d9      	lsls	r1, r3, #31
 8004b26:	bf44      	itt	mi
 8004b28:	f043 0320 	orrmi.w	r3, r3, #32
 8004b2c:	6023      	strmi	r3, [r4, #0]
 8004b2e:	b11d      	cbz	r5, 8004b38 <_printf_i+0x1a0>
 8004b30:	2310      	movs	r3, #16
 8004b32:	e7ab      	b.n	8004a8c <_printf_i+0xf4>
 8004b34:	4826      	ldr	r0, [pc, #152]	@ (8004bd0 <_printf_i+0x238>)
 8004b36:	e7e9      	b.n	8004b0c <_printf_i+0x174>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	f023 0320 	bic.w	r3, r3, #32
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	e7f6      	b.n	8004b30 <_printf_i+0x198>
 8004b42:	4616      	mov	r6, r2
 8004b44:	e7bd      	b.n	8004ac2 <_printf_i+0x12a>
 8004b46:	6833      	ldr	r3, [r6, #0]
 8004b48:	6825      	ldr	r5, [r4, #0]
 8004b4a:	1d18      	adds	r0, r3, #4
 8004b4c:	6961      	ldr	r1, [r4, #20]
 8004b4e:	6030      	str	r0, [r6, #0]
 8004b50:	062e      	lsls	r6, r5, #24
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	d501      	bpl.n	8004b5a <_printf_i+0x1c2>
 8004b56:	6019      	str	r1, [r3, #0]
 8004b58:	e002      	b.n	8004b60 <_printf_i+0x1c8>
 8004b5a:	0668      	lsls	r0, r5, #25
 8004b5c:	d5fb      	bpl.n	8004b56 <_printf_i+0x1be>
 8004b5e:	8019      	strh	r1, [r3, #0]
 8004b60:	2300      	movs	r3, #0
 8004b62:	4616      	mov	r6, r2
 8004b64:	6123      	str	r3, [r4, #16]
 8004b66:	e7bc      	b.n	8004ae2 <_printf_i+0x14a>
 8004b68:	6833      	ldr	r3, [r6, #0]
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	1d1a      	adds	r2, r3, #4
 8004b6e:	6032      	str	r2, [r6, #0]
 8004b70:	681e      	ldr	r6, [r3, #0]
 8004b72:	6862      	ldr	r2, [r4, #4]
 8004b74:	4630      	mov	r0, r6
 8004b76:	f000 f859 	bl	8004c2c <memchr>
 8004b7a:	b108      	cbz	r0, 8004b80 <_printf_i+0x1e8>
 8004b7c:	1b80      	subs	r0, r0, r6
 8004b7e:	6060      	str	r0, [r4, #4]
 8004b80:	6863      	ldr	r3, [r4, #4]
 8004b82:	6123      	str	r3, [r4, #16]
 8004b84:	2300      	movs	r3, #0
 8004b86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b8a:	e7aa      	b.n	8004ae2 <_printf_i+0x14a>
 8004b8c:	4632      	mov	r2, r6
 8004b8e:	4649      	mov	r1, r9
 8004b90:	4640      	mov	r0, r8
 8004b92:	6923      	ldr	r3, [r4, #16]
 8004b94:	47d0      	blx	sl
 8004b96:	3001      	adds	r0, #1
 8004b98:	d0ad      	beq.n	8004af6 <_printf_i+0x15e>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	079b      	lsls	r3, r3, #30
 8004b9e:	d413      	bmi.n	8004bc8 <_printf_i+0x230>
 8004ba0:	68e0      	ldr	r0, [r4, #12]
 8004ba2:	9b03      	ldr	r3, [sp, #12]
 8004ba4:	4298      	cmp	r0, r3
 8004ba6:	bfb8      	it	lt
 8004ba8:	4618      	movlt	r0, r3
 8004baa:	e7a6      	b.n	8004afa <_printf_i+0x162>
 8004bac:	2301      	movs	r3, #1
 8004bae:	4632      	mov	r2, r6
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	47d0      	blx	sl
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	d09d      	beq.n	8004af6 <_printf_i+0x15e>
 8004bba:	3501      	adds	r5, #1
 8004bbc:	68e3      	ldr	r3, [r4, #12]
 8004bbe:	9903      	ldr	r1, [sp, #12]
 8004bc0:	1a5b      	subs	r3, r3, r1
 8004bc2:	42ab      	cmp	r3, r5
 8004bc4:	dcf2      	bgt.n	8004bac <_printf_i+0x214>
 8004bc6:	e7eb      	b.n	8004ba0 <_printf_i+0x208>
 8004bc8:	2500      	movs	r5, #0
 8004bca:	f104 0619 	add.w	r6, r4, #25
 8004bce:	e7f5      	b.n	8004bbc <_printf_i+0x224>
 8004bd0:	08005124 	.word	0x08005124
 8004bd4:	08005135 	.word	0x08005135

08004bd8 <memmove>:
 8004bd8:	4288      	cmp	r0, r1
 8004bda:	b510      	push	{r4, lr}
 8004bdc:	eb01 0402 	add.w	r4, r1, r2
 8004be0:	d902      	bls.n	8004be8 <memmove+0x10>
 8004be2:	4284      	cmp	r4, r0
 8004be4:	4623      	mov	r3, r4
 8004be6:	d807      	bhi.n	8004bf8 <memmove+0x20>
 8004be8:	1e43      	subs	r3, r0, #1
 8004bea:	42a1      	cmp	r1, r4
 8004bec:	d008      	beq.n	8004c00 <memmove+0x28>
 8004bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bf6:	e7f8      	b.n	8004bea <memmove+0x12>
 8004bf8:	4601      	mov	r1, r0
 8004bfa:	4402      	add	r2, r0
 8004bfc:	428a      	cmp	r2, r1
 8004bfe:	d100      	bne.n	8004c02 <memmove+0x2a>
 8004c00:	bd10      	pop	{r4, pc}
 8004c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c0a:	e7f7      	b.n	8004bfc <memmove+0x24>

08004c0c <_sbrk_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	2300      	movs	r3, #0
 8004c10:	4d05      	ldr	r5, [pc, #20]	@ (8004c28 <_sbrk_r+0x1c>)
 8004c12:	4604      	mov	r4, r0
 8004c14:	4608      	mov	r0, r1
 8004c16:	602b      	str	r3, [r5, #0]
 8004c18:	f7fb ff18 	bl	8000a4c <_sbrk>
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d102      	bne.n	8004c26 <_sbrk_r+0x1a>
 8004c20:	682b      	ldr	r3, [r5, #0]
 8004c22:	b103      	cbz	r3, 8004c26 <_sbrk_r+0x1a>
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
 8004c28:	2000120c 	.word	0x2000120c

08004c2c <memchr>:
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	b2c9      	uxtb	r1, r1
 8004c32:	4402      	add	r2, r0
 8004c34:	4293      	cmp	r3, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	d101      	bne.n	8004c3e <memchr+0x12>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e003      	b.n	8004c46 <memchr+0x1a>
 8004c3e:	7804      	ldrb	r4, [r0, #0]
 8004c40:	3301      	adds	r3, #1
 8004c42:	428c      	cmp	r4, r1
 8004c44:	d1f6      	bne.n	8004c34 <memchr+0x8>
 8004c46:	bd10      	pop	{r4, pc}

08004c48 <_realloc_r>:
 8004c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4c:	4680      	mov	r8, r0
 8004c4e:	4615      	mov	r5, r2
 8004c50:	460c      	mov	r4, r1
 8004c52:	b921      	cbnz	r1, 8004c5e <_realloc_r+0x16>
 8004c54:	4611      	mov	r1, r2
 8004c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5a:	f7ff bc47 	b.w	80044ec <_malloc_r>
 8004c5e:	b92a      	cbnz	r2, 8004c6c <_realloc_r+0x24>
 8004c60:	f7ff fbda 	bl	8004418 <_free_r>
 8004c64:	2400      	movs	r4, #0
 8004c66:	4620      	mov	r0, r4
 8004c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c6c:	f000 f81a 	bl	8004ca4 <_malloc_usable_size_r>
 8004c70:	4285      	cmp	r5, r0
 8004c72:	4606      	mov	r6, r0
 8004c74:	d802      	bhi.n	8004c7c <_realloc_r+0x34>
 8004c76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c7a:	d8f4      	bhi.n	8004c66 <_realloc_r+0x1e>
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	4640      	mov	r0, r8
 8004c80:	f7ff fc34 	bl	80044ec <_malloc_r>
 8004c84:	4607      	mov	r7, r0
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d0ec      	beq.n	8004c64 <_realloc_r+0x1c>
 8004c8a:	42b5      	cmp	r5, r6
 8004c8c:	462a      	mov	r2, r5
 8004c8e:	4621      	mov	r1, r4
 8004c90:	bf28      	it	cs
 8004c92:	4632      	movcs	r2, r6
 8004c94:	f7ff fbb2 	bl	80043fc <memcpy>
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f7ff fbbc 	bl	8004418 <_free_r>
 8004ca0:	463c      	mov	r4, r7
 8004ca2:	e7e0      	b.n	8004c66 <_realloc_r+0x1e>

08004ca4 <_malloc_usable_size_r>:
 8004ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ca8:	1f18      	subs	r0, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bfbc      	itt	lt
 8004cae:	580b      	ldrlt	r3, [r1, r0]
 8004cb0:	18c0      	addlt	r0, r0, r3
 8004cb2:	4770      	bx	lr

08004cb4 <_init>:
 8004cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb6:	bf00      	nop
 8004cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cba:	bc08      	pop	{r3}
 8004cbc:	469e      	mov	lr, r3
 8004cbe:	4770      	bx	lr

08004cc0 <_fini>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	bf00      	nop
 8004cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc6:	bc08      	pop	{r3}
 8004cc8:	469e      	mov	lr, r3
 8004cca:	4770      	bx	lr
