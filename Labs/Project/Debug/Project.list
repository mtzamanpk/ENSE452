
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000549c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080055ac  080055ac  000065ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a00  08005a00  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005a00  08005a00  00006a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a08  08005a08  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a08  08005a08  00006a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a0c  08005a0c  00006a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005a10  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d0  20000064  08005a74  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001234  08005a74  00007234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120d0  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d28  00000000  00000000  0001915d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0001be88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9b  00000000  00000000  0001cff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019790  00000000  00000000  0001dd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137a9  00000000  00000000  00037523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000934f3  00000000  00000000  0004accc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de1bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e30  00000000  00000000  000de204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000e3034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08005594 	.word	0x08005594

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08005594 	.word	0x08005594

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	@ (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	@ (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	@ 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000080 	.word	0x20000080
 800018c:	200000d4 	.word	0x200000d4

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b098      	sub	sp, #96	@ 0x60
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fd37 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f897 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f901 	bl	80003a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001a2:	f000 f8d5 	bl	8000350 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN 2 */
  floorMutex = xSemaphoreCreateMutex();
 80001a6:	2001      	movs	r0, #1
 80001a8:	f002 fbe9 	bl	800297e <xQueueCreateMutex>
 80001ac:	4603      	mov	r3, r0
 80001ae:	4a3c      	ldr	r2, [pc, #240]	@ (80002a0 <main+0x110>)
 80001b0:	6013      	str	r3, [r2, #0]
  if (floorMutex == NULL) {
 80001b2:	4b3b      	ldr	r3, [pc, #236]	@ (80002a0 <main+0x110>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d101      	bne.n	80001be <main+0x2e>
      Error_Handler(); // Handle mutex creation failure
 80001ba:	f000 fb9d 	bl	80008f8 <Error_Handler>
  }

  emergencyMutex = xSemaphoreCreateMutex();
 80001be:	2001      	movs	r0, #1
 80001c0:	f002 fbdd 	bl	800297e <xQueueCreateMutex>
 80001c4:	4603      	mov	r3, r0
 80001c6:	4a37      	ldr	r2, [pc, #220]	@ (80002a4 <main+0x114>)
 80001c8:	6013      	str	r3, [r2, #0]
  if (emergencyMutex == NULL) {
 80001ca:	4b36      	ldr	r3, [pc, #216]	@ (80002a4 <main+0x114>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d101      	bne.n	80001d6 <main+0x46>
      Error_Handler(); // Handle mutex creation failure
 80001d2:	f000 fb91 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE END 2 */

  emergencyQueue = xQueueCreate(1, sizeof(int));
 80001d6:	2200      	movs	r2, #0
 80001d8:	2104      	movs	r1, #4
 80001da:	2001      	movs	r0, #1
 80001dc:	f002 fb5b 	bl	8002896 <xQueueGenericCreate>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a31      	ldr	r2, [pc, #196]	@ (80002a8 <main+0x118>)
 80001e4:	6013      	str	r3, [r2, #0]
  if (emergencyQueue == NULL) {
 80001e6:	4b30      	ldr	r3, [pc, #192]	@ (80002a8 <main+0x118>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d101      	bne.n	80001f2 <main+0x62>
      Error_Handler(); // Handle creation failure
 80001ee:	f000 fb83 	bl	80008f8 <Error_Handler>
  }

  floorQueue = xQueueCreate(2, sizeof(int));
 80001f2:	2200      	movs	r2, #0
 80001f4:	2104      	movs	r1, #4
 80001f6:	2002      	movs	r0, #2
 80001f8:	f002 fb4d 	bl	8002896 <xQueueGenericCreate>
 80001fc:	4603      	mov	r3, r0
 80001fe:	4a2b      	ldr	r2, [pc, #172]	@ (80002ac <main+0x11c>)
 8000200:	6013      	str	r3, [r2, #0]
  if (floorQueue == NULL) {
 8000202:	4b2a      	ldr	r3, [pc, #168]	@ (80002ac <main+0x11c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d101      	bne.n	800020e <main+0x7e>
      Error_Handler();
 800020a:	f000 fb75 	bl	80008f8 <Error_Handler>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of emergencySemaphore */
  osSemaphoreDef(emergencySemaphore);
 800020e:	2300      	movs	r3, #0
 8000210:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000212:	2300      	movs	r3, #0
 8000214:	65fb      	str	r3, [r7, #92]	@ 0x5c
  emergencySemaphoreHandle = osSemaphoreCreate(osSemaphore(emergencySemaphore), 1);
 8000216:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800021a:	2101      	movs	r1, #1
 800021c:	4618      	mov	r0, r3
 800021e:	f002 f971 	bl	8002504 <osSemaphoreCreate>
 8000222:	4603      	mov	r3, r0
 8000224:	4a22      	ldr	r2, [pc, #136]	@ (80002b0 <main+0x120>)
 8000226:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of FloorSelectionT */
  osThreadDef(FloorSelectionT, FloorSelectionTaskHandle, osPriorityBelowNormal, 0, 128);
 8000228:	4b22      	ldr	r3, [pc, #136]	@ (80002b4 <main+0x124>)
 800022a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800022e:	461d      	mov	r5, r3
 8000230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000234:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000238:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FloorSelectionTHandle = osThreadCreate(osThread(FloorSelectionT), NULL);
 800023c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f002 f8fe 	bl	8002444 <osThreadCreate>
 8000248:	4603      	mov	r3, r0
 800024a:	4a1b      	ldr	r2, [pc, #108]	@ (80002b8 <main+0x128>)
 800024c:	6013      	str	r3, [r2, #0]

  /* definition and creation of ElevatorMovemen */
  osThreadDef(ElevatorMovemen, ElevatorMovementTaskHandle, osPriorityNormal, 0, 256);
 800024e:	4b1b      	ldr	r3, [pc, #108]	@ (80002bc <main+0x12c>)
 8000250:	f107 0420 	add.w	r4, r7, #32
 8000254:	461d      	mov	r5, r3
 8000256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800025e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ElevatorMovemenHandle = osThreadCreate(osThread(ElevatorMovemen), NULL);
 8000262:	f107 0320 	add.w	r3, r7, #32
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f002 f8eb 	bl	8002444 <osThreadCreate>
 800026e:	4603      	mov	r3, r0
 8000270:	4a13      	ldr	r2, [pc, #76]	@ (80002c0 <main+0x130>)
 8000272:	6013      	str	r3, [r2, #0]

  /* definition and creation of DisplayUpdateTa */
  osThreadDef(DisplayUpdateTa, DisplayUpdateTaskHandle, osPriorityAboveNormal, 0, 128);
 8000274:	4b13      	ldr	r3, [pc, #76]	@ (80002c4 <main+0x134>)
 8000276:	1d3c      	adds	r4, r7, #4
 8000278:	461d      	mov	r5, r3
 800027a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800027e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000282:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayUpdateTaHandle = osThreadCreate(osThread(DisplayUpdateTa), NULL);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f002 f8da 	bl	8002444 <osThreadCreate>
 8000290:	4603      	mov	r3, r0
 8000292:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <main+0x138>)
 8000294:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000296:	f002 f8ce 	bl	8002436 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029a:	bf00      	nop
 800029c:	e7fd      	b.n	800029a <main+0x10a>
 800029e:	bf00      	nop
 80002a0:	2000033c 	.word	0x2000033c
 80002a4:	20000340 	.word	0x20000340
 80002a8:	20000330 	.word	0x20000330
 80002ac:	2000032c 	.word	0x2000032c
 80002b0:	20000328 	.word	0x20000328
 80002b4:	080055bc 	.word	0x080055bc
 80002b8:	2000031c 	.word	0x2000031c
 80002bc:	080055e8 	.word	0x080055e8
 80002c0:	20000320 	.word	0x20000320
 80002c4:	08005614 	.word	0x08005614
 80002c8:	20000324 	.word	0x20000324

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b090      	sub	sp, #64	@ 0x40
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2228      	movs	r2, #40	@ 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f004 fcb8 	bl	8004c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ee:	2302      	movs	r3, #2
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2310      	movs	r3, #16
 80002f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002fe:	2300      	movs	r3, #0
 8000300:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000302:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	f107 0318 	add.w	r3, r7, #24
 800030c:	4618      	mov	r0, r3
 800030e:	f000 ff41 	bl	8001194 <HAL_RCC_OscConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000318:	f000 faee 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	230f      	movs	r3, #15
 800031e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000320:	2302      	movs	r3, #2
 8000322:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800032c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2102      	movs	r1, #2
 8000336:	4618      	mov	r0, r3
 8000338:	f001 f9ae 	bl	8001698 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000342:	f000 fad9 	bl	80008f8 <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	3740      	adds	r7, #64	@ 0x40
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000354:	4b11      	ldr	r3, [pc, #68]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 8000356:	4a12      	ldr	r2, [pc, #72]	@ (80003a0 <MX_USART2_UART_Init+0x50>)
 8000358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800035a:	4b10      	ldr	r3, [pc, #64]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 800035c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000362:	4b0e      	ldr	r3, [pc, #56]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000368:	4b0c      	ldr	r3, [pc, #48]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 8000376:	220c      	movs	r2, #12
 8000378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037a:	4b08      	ldr	r3, [pc, #32]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 8000388:	f001 fd82 	bl	8001e90 <HAL_UART_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000392:	f000 fab1 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	200002d4 	.word	0x200002d4
 80003a0:	40004400 	.word	0x40004400

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a2c      	ldr	r2, [pc, #176]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003be:	f043 0310 	orr.w	r3, r3, #16
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0310 	and.w	r3, r3, #16
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d0:	4b27      	ldr	r3, [pc, #156]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a26      	ldr	r2, [pc, #152]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003d6:	f043 0320 	orr.w	r3, r3, #32
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b24      	ldr	r3, [pc, #144]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0320 	and.w	r3, r3, #32
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	4b21      	ldr	r3, [pc, #132]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a20      	ldr	r2, [pc, #128]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003ee:	f043 0304 	orr.w	r3, r3, #4
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0304 	and.w	r3, r3, #4
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000400:	4b1b      	ldr	r3, [pc, #108]	@ (8000470 <MX_GPIO_Init+0xcc>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a1a      	ldr	r2, [pc, #104]	@ (8000470 <MX_GPIO_Init+0xcc>)
 8000406:	f043 0308 	orr.w	r3, r3, #8
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b18      	ldr	r3, [pc, #96]	@ (8000470 <MX_GPIO_Init+0xcc>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0308 	and.w	r3, r3, #8
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2120      	movs	r1, #32
 800041c:	4815      	ldr	r0, [pc, #84]	@ (8000474 <MX_GPIO_Init+0xd0>)
 800041e:	f000 fe89 	bl	8001134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000422:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000428:	4b13      	ldr	r3, [pc, #76]	@ (8000478 <MX_GPIO_Init+0xd4>)
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	4619      	mov	r1, r3
 8000436:	4811      	ldr	r0, [pc, #68]	@ (800047c <MX_GPIO_Init+0xd8>)
 8000438:	f000 fcf8 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800043c:	2320      	movs	r3, #32
 800043e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000440:	2301      	movs	r3, #1
 8000442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	2302      	movs	r3, #2
 800044a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	4808      	ldr	r0, [pc, #32]	@ (8000474 <MX_GPIO_Init+0xd0>)
 8000454:	f000 fcea 	bl	8000e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000458:	2200      	movs	r2, #0
 800045a:	2105      	movs	r1, #5
 800045c:	2028      	movs	r0, #40	@ 0x28
 800045e:	f000 fcba 	bl	8000dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000462:	2028      	movs	r0, #40	@ 0x28
 8000464:	f000 fcd3 	bl	8000e0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000468:	bf00      	nop
 800046a:	3720      	adds	r7, #32
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40021000 	.word	0x40021000
 8000474:	40010800 	.word	0x40010800
 8000478:	10110000 	.word	0x10110000
 800047c:	40011000 	.word	0x40011000

08000480 <CLI_Transmit>:

/* USER CODE BEGIN 4 */


void CLI_Transmit(const char *message) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f7ff fe61 	bl	8000150 <strlen>
 800048e:	4603      	mov	r3, r0
 8000490:	b29a      	uxth	r2, r3
 8000492:	f04f 33ff 	mov.w	r3, #4294967295
 8000496:	6879      	ldr	r1, [r7, #4]
 8000498:	4803      	ldr	r0, [pc, #12]	@ (80004a8 <CLI_Transmit+0x28>)
 800049a:	f001 fd49 	bl	8001f30 <HAL_UART_Transmit>
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200002d4 	.word	0x200002d4

080004ac <CLI_Receive>:


#define RX_BUFFER_SIZE 100
char rx_buffer[RX_BUFFER_SIZE];

int CLI_Receive(char *buffer, uint16_t buffer_size) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	460b      	mov	r3, r1
 80004b6:	807b      	strh	r3, [r7, #2]
    uint16_t index = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	81fb      	strh	r3, [r7, #14]
    uint8_t rx_char;

    while (index < buffer_size - 1) {
 80004bc:	e02a      	b.n	8000514 <CLI_Receive+0x68>
        if (HAL_UART_Receive(&huart2, &rx_char, 1, HAL_MAX_DELAY) == HAL_OK) {
 80004be:	f107 010d 	add.w	r1, r7, #13
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295
 80004c6:	2201      	movs	r2, #1
 80004c8:	481a      	ldr	r0, [pc, #104]	@ (8000534 <CLI_Receive+0x88>)
 80004ca:	f001 fdbc 	bl	8002046 <HAL_UART_Receive>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d11d      	bne.n	8000510 <CLI_Receive+0x64>
            HAL_UART_Transmit(&huart2, &rx_char, 1, HAL_MAX_DELAY);
 80004d4:	f107 010d 	add.w	r1, r7, #13
 80004d8:	f04f 33ff 	mov.w	r3, #4294967295
 80004dc:	2201      	movs	r2, #1
 80004de:	4815      	ldr	r0, [pc, #84]	@ (8000534 <CLI_Receive+0x88>)
 80004e0:	f001 fd26 	bl	8001f30 <HAL_UART_Transmit>
            if (rx_char == '\r' || rx_char == '\n') {
 80004e4:	7b7b      	ldrb	r3, [r7, #13]
 80004e6:	2b0d      	cmp	r3, #13
 80004e8:	d002      	beq.n	80004f0 <CLI_Receive+0x44>
 80004ea:	7b7b      	ldrb	r3, [r7, #13]
 80004ec:	2b0a      	cmp	r3, #10
 80004ee:	d106      	bne.n	80004fe <CLI_Receive+0x52>
                buffer[index] = '\0';
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
                return 1; // Successful reception
 80004fa:	2301      	movs	r3, #1
 80004fc:	e015      	b.n	800052a <CLI_Receive+0x7e>
            }
            buffer[index++] = rx_char;
 80004fe:	89fb      	ldrh	r3, [r7, #14]
 8000500:	1c5a      	adds	r2, r3, #1
 8000502:	81fa      	strh	r2, [r7, #14]
 8000504:	461a      	mov	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	7b7a      	ldrb	r2, [r7, #13]
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	e001      	b.n	8000514 <CLI_Receive+0x68>
        } else {
            return 0; // Reception error
 8000510:	2300      	movs	r3, #0
 8000512:	e00a      	b.n	800052a <CLI_Receive+0x7e>
    while (index < buffer_size - 1) {
 8000514:	89fa      	ldrh	r2, [r7, #14]
 8000516:	887b      	ldrh	r3, [r7, #2]
 8000518:	3b01      	subs	r3, #1
 800051a:	429a      	cmp	r2, r3
 800051c:	dbcf      	blt.n	80004be <CLI_Receive+0x12>
        }
    }
    buffer[index] = '\0';
 800051e:	89fb      	ldrh	r3, [r7, #14]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	4413      	add	r3, r2
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
    return 1;
 8000528:	2301      	movs	r3, #1
}
 800052a:	4618      	mov	r0, r3
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200002d4 	.word	0x200002d4

08000538 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick();
 8000542:	f000 fb89 	bl	8000c58 <HAL_GetTick>
 8000546:	60f8      	str	r0, [r7, #12]

    if (GPIO_Pin == GPIO_PIN_13 && current_time - last_interrupt_time > 200) { // Debounce: 200 ms
 8000548:	88fb      	ldrh	r3, [r7, #6]
 800054a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800054e:	d112      	bne.n	8000576 <HAL_GPIO_EXTI_Callback+0x3e>
 8000550:	4b0b      	ldr	r3, [pc, #44]	@ (8000580 <HAL_GPIO_EXTI_Callback+0x48>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	2bc8      	cmp	r3, #200	@ 0xc8
 800055a:	d90c      	bls.n	8000576 <HAL_GPIO_EXTI_Callback+0x3e>
        int emergencySignal = 1;
 800055c:	2301      	movs	r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
        xQueueSendFromISR(emergencyQueue, &emergencySignal, NULL);
 8000560:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	f107 0108 	add.w	r1, r7, #8
 8000568:	2300      	movs	r3, #0
 800056a:	2200      	movs	r2, #0
 800056c:	f002 fb22 	bl	8002bb4 <xQueueGenericSendFromISR>
        last_interrupt_time = current_time;
 8000570:	4a03      	ldr	r2, [pc, #12]	@ (8000580 <HAL_GPIO_EXTI_Callback+0x48>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	6013      	str	r3, [r2, #0]
    }
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000344 	.word	0x20000344
 8000584:	20000330 	.word	0x20000330

08000588 <FloorSelectionTaskHandle>:
  * @brief  Function implementing the FloorSelectionT thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FloorSelectionTaskHandle */
void FloorSelectionTaskHandle(void const *argument) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b09e      	sub	sp, #120	@ 0x78
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    char command_buffer[100];
    int targetFloor;

    CLI_Transmit("\x1b[2J\x1b[3;1H\x1b[4;1r\x1b[4;1H");
 8000590:	4868      	ldr	r0, [pc, #416]	@ (8000734 <FloorSelectionTaskHandle+0x1ac>)
 8000592:	f7ff ff75 	bl	8000480 <CLI_Transmit>

    for (;;) {
        // Process emergency signals
        int emergencySignal;
        if (xQueueReceive(emergencyQueue, &emergencySignal, 0) == pdPASS) {
 8000596:	4b68      	ldr	r3, [pc, #416]	@ (8000738 <FloorSelectionTaskHandle+0x1b0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f107 010c 	add.w	r1, r7, #12
 800059e:	2200      	movs	r2, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fba5 	bl	8002cf0 <xQueueReceive>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d116      	bne.n	80005da <FloorSelectionTaskHandle+0x52>
            xSemaphoreTake(emergencyMutex, portMAX_DELAY);
 80005ac:	4b63      	ldr	r3, [pc, #396]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f04f 31ff 	mov.w	r1, #4294967295
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fc7d 	bl	8002eb4 <xQueueSemaphoreTake>
            emergencyState = 1;
 80005ba:	4b61      	ldr	r3, [pc, #388]	@ (8000740 <FloorSelectionTaskHandle+0x1b8>)
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]
            xSemaphoreGive(emergencyMutex);
 80005c0:	4b5e      	ldr	r3, [pc, #376]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	2300      	movs	r3, #0
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	f002 f9f1 	bl	80029b0 <xQueueGenericSend>

            CLI_Transmit("\x1b[2J\x1b[H");
 80005ce:	485d      	ldr	r0, [pc, #372]	@ (8000744 <FloorSelectionTaskHandle+0x1bc>)
 80005d0:	f7ff ff56 	bl	8000480 <CLI_Transmit>
            CLI_Transmit("Emergency mode activated. All operations halted.\n");
 80005d4:	485c      	ldr	r0, [pc, #368]	@ (8000748 <FloorSelectionTaskHandle+0x1c0>)
 80005d6:	f7ff ff53 	bl	8000480 <CLI_Transmit>
        }

        // Display CLI prompt
        CLI_Transmit("\x1b[24;1H> ");
 80005da:	485c      	ldr	r0, [pc, #368]	@ (800074c <FloorSelectionTaskHandle+0x1c4>)
 80005dc:	f7ff ff50 	bl	8000480 <CLI_Transmit>
        if (CLI_Receive(command_buffer, sizeof(command_buffer))) {
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2164      	movs	r1, #100	@ 0x64
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff60 	bl	80004ac <CLI_Receive>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0d1      	beq.n	8000596 <FloorSelectionTaskHandle+0xe>
            CLI_Transmit("\x1b[23;1H");
 80005f2:	4857      	ldr	r0, [pc, #348]	@ (8000750 <FloorSelectionTaskHandle+0x1c8>)
 80005f4:	f7ff ff44 	bl	8000480 <CLI_Transmit>
            CLI_Transmit("Received: ");
 80005f8:	4856      	ldr	r0, [pc, #344]	@ (8000754 <FloorSelectionTaskHandle+0x1cc>)
 80005fa:	f7ff ff41 	bl	8000480 <CLI_Transmit>
            CLI_Transmit(command_buffer);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ff3c 	bl	8000480 <CLI_Transmit>
            CLI_Transmit("\n");
 8000608:	4853      	ldr	r0, [pc, #332]	@ (8000758 <FloorSelectionTaskHandle+0x1d0>)
 800060a:	f7ff ff39 	bl	8000480 <CLI_Transmit>

            // Handle emergency mode
            xSemaphoreTake(emergencyMutex, portMAX_DELAY);
 800060e:	4b4b      	ldr	r3, [pc, #300]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f04f 31ff 	mov.w	r1, #4294967295
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fc4c 	bl	8002eb4 <xQueueSemaphoreTake>
            if (emergencyState) {
 800061c:	4b48      	ldr	r3, [pc, #288]	@ (8000740 <FloorSelectionTaskHandle+0x1b8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d029      	beq.n	8000678 <FloorSelectionTaskHandle+0xf0>
                xSemaphoreGive(emergencyMutex);
 8000624:	4b45      	ldr	r3, [pc, #276]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	f002 f9bf 	bl	80029b0 <xQueueGenericSend>
                if (strncmp(command_buffer, "exit_emergency", 14) == 0) {
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	220e      	movs	r2, #14
 8000638:	4948      	ldr	r1, [pc, #288]	@ (800075c <FloorSelectionTaskHandle+0x1d4>)
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fb10 	bl	8004c60 <strncmp>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d114      	bne.n	8000670 <FloorSelectionTaskHandle+0xe8>
                    xSemaphoreTake(emergencyMutex, portMAX_DELAY);
 8000646:	4b3d      	ldr	r3, [pc, #244]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f04f 31ff 	mov.w	r1, #4294967295
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fc30 	bl	8002eb4 <xQueueSemaphoreTake>
                    emergencyState = 0; // Deactivate emergency mode
 8000654:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <FloorSelectionTaskHandle+0x1b8>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
                    xSemaphoreGive(emergencyMutex);
 800065a:	4b38      	ldr	r3, [pc, #224]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	2300      	movs	r3, #0
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	f002 f9a4 	bl	80029b0 <xQueueGenericSend>
                    CLI_Transmit("Emergency mode deactivated. Resuming operations.\n");
 8000668:	483d      	ldr	r0, [pc, #244]	@ (8000760 <FloorSelectionTaskHandle+0x1d8>)
 800066a:	f7ff ff09 	bl	8000480 <CLI_Transmit>
                } else {
                    CLI_Transmit("Only 'exit_emergency' allowed in emergency mode.\n");
                }
                continue; // Ignore other commands
 800066e:	e05f      	b.n	8000730 <FloorSelectionTaskHandle+0x1a8>
                    CLI_Transmit("Only 'exit_emergency' allowed in emergency mode.\n");
 8000670:	483c      	ldr	r0, [pc, #240]	@ (8000764 <FloorSelectionTaskHandle+0x1dc>)
 8000672:	f7ff ff05 	bl	8000480 <CLI_Transmit>
 8000676:	e78e      	b.n	8000596 <FloorSelectionTaskHandle+0xe>
            }
            xSemaphoreGive(emergencyMutex);
 8000678:	4b30      	ldr	r3, [pc, #192]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	2300      	movs	r3, #0
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	f002 f995 	bl	80029b0 <xQueueGenericSend>

            // Handle normal commands
            if (strncmp(command_buffer, "enter", 5) == 0) {
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2205      	movs	r2, #5
 800068c:	4936      	ldr	r1, [pc, #216]	@ (8000768 <FloorSelectionTaskHandle+0x1e0>)
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fae6 	bl	8004c60 <strncmp>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d106      	bne.n	80006a8 <FloorSelectionTaskHandle+0x120>
                insideState = 1;
 800069a:	4b34      	ldr	r3, [pc, #208]	@ (800076c <FloorSelectionTaskHandle+0x1e4>)
 800069c:	2201      	movs	r2, #1
 800069e:	601a      	str	r2, [r3, #0]
                CLI_Transmit("You have entered the elevator.\n");
 80006a0:	4833      	ldr	r0, [pc, #204]	@ (8000770 <FloorSelectionTaskHandle+0x1e8>)
 80006a2:	f7ff feed 	bl	8000480 <CLI_Transmit>
 80006a6:	e776      	b.n	8000596 <FloorSelectionTaskHandle+0xe>
            } else if (strncmp(command_buffer, "exit", 4) == 0) {
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2204      	movs	r2, #4
 80006ae:	4931      	ldr	r1, [pc, #196]	@ (8000774 <FloorSelectionTaskHandle+0x1ec>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fad5 	bl	8004c60 <strncmp>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d106      	bne.n	80006ca <FloorSelectionTaskHandle+0x142>
                insideState = 0;
 80006bc:	4b2b      	ldr	r3, [pc, #172]	@ (800076c <FloorSelectionTaskHandle+0x1e4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
                CLI_Transmit("You have exited the elevator.\n");
 80006c2:	482d      	ldr	r0, [pc, #180]	@ (8000778 <FloorSelectionTaskHandle+0x1f0>)
 80006c4:	f7ff fedc 	bl	8000480 <CLI_Transmit>
 80006c8:	e765      	b.n	8000596 <FloorSelectionTaskHandle+0xe>
            } else if (strncmp(command_buffer, "floor=", 6) == 0) {
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2206      	movs	r2, #6
 80006d0:	492a      	ldr	r1, [pc, #168]	@ (800077c <FloorSelectionTaskHandle+0x1f4>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fac4 	bl	8004c60 <strncmp>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d125      	bne.n	800072a <FloorSelectionTaskHandle+0x1a2>
                if (insideState) {
 80006de:	4b23      	ldr	r3, [pc, #140]	@ (800076c <FloorSelectionTaskHandle+0x1e4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d01d      	beq.n	8000722 <FloorSelectionTaskHandle+0x19a>
                    targetFloor = atoi(command_buffer + 6);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	3306      	adds	r3, #6
 80006ec:	4618      	mov	r0, r3
 80006ee:	f004 f9f3 	bl	8004ad8 <atoi>
 80006f2:	4603      	mov	r3, r0
 80006f4:	613b      	str	r3, [r7, #16]
                    if (targetFloor >= 1 && targetFloor <= 3) {
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dd0e      	ble.n	800071a <FloorSelectionTaskHandle+0x192>
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	dc0b      	bgt.n	800071a <FloorSelectionTaskHandle+0x192>
                        xQueueSend(floorQueue, &targetFloor, pdMS_TO_TICKS(50));
 8000702:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <FloorSelectionTaskHandle+0x1f8>)
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	f107 0110 	add.w	r1, r7, #16
 800070a:	2300      	movs	r3, #0
 800070c:	2232      	movs	r2, #50	@ 0x32
 800070e:	f002 f94f 	bl	80029b0 <xQueueGenericSend>
                        CLI_Transmit("Moving to selected floor...\n");
 8000712:	481c      	ldr	r0, [pc, #112]	@ (8000784 <FloorSelectionTaskHandle+0x1fc>)
 8000714:	f7ff feb4 	bl	8000480 <CLI_Transmit>
 8000718:	e00a      	b.n	8000730 <FloorSelectionTaskHandle+0x1a8>
                    } else {
                        CLI_Transmit("Invalid floor. Enter 1, 2, or 3.\n");
 800071a:	481b      	ldr	r0, [pc, #108]	@ (8000788 <FloorSelectionTaskHandle+0x200>)
 800071c:	f7ff feb0 	bl	8000480 <CLI_Transmit>
 8000720:	e739      	b.n	8000596 <FloorSelectionTaskHandle+0xe>
                    }
                } else {
                    CLI_Transmit("You must enter the elevator to select a floor.\n");
 8000722:	481a      	ldr	r0, [pc, #104]	@ (800078c <FloorSelectionTaskHandle+0x204>)
 8000724:	f7ff feac 	bl	8000480 <CLI_Transmit>
 8000728:	e735      	b.n	8000596 <FloorSelectionTaskHandle+0xe>
                }
            } else {
                // Handle invalid command
                CLI_Transmit("Invalid command. Available commands: enter, exit, floor=<1|2|3>, exit_emergency\n");
 800072a:	4819      	ldr	r0, [pc, #100]	@ (8000790 <FloorSelectionTaskHandle+0x208>)
 800072c:	f7ff fea8 	bl	8000480 <CLI_Transmit>
    for (;;) {
 8000730:	e731      	b.n	8000596 <FloorSelectionTaskHandle+0xe>
 8000732:	bf00      	nop
 8000734:	08005630 	.word	0x08005630
 8000738:	20000330 	.word	0x20000330
 800073c:	20000340 	.word	0x20000340
 8000740:	20000338 	.word	0x20000338
 8000744:	08005648 	.word	0x08005648
 8000748:	08005650 	.word	0x08005650
 800074c:	08005684 	.word	0x08005684
 8000750:	08005690 	.word	0x08005690
 8000754:	08005698 	.word	0x08005698
 8000758:	080056a4 	.word	0x080056a4
 800075c:	080056a8 	.word	0x080056a8
 8000760:	080056b8 	.word	0x080056b8
 8000764:	080056ec 	.word	0x080056ec
 8000768:	08005720 	.word	0x08005720
 800076c:	20000334 	.word	0x20000334
 8000770:	08005728 	.word	0x08005728
 8000774:	08005748 	.word	0x08005748
 8000778:	08005750 	.word	0x08005750
 800077c:	08005770 	.word	0x08005770
 8000780:	2000032c 	.word	0x2000032c
 8000784:	08005778 	.word	0x08005778
 8000788:	08005798 	.word	0x08005798
 800078c:	080057bc 	.word	0x080057bc
 8000790:	080057ec 	.word	0x080057ec

08000794 <ElevatorMovementTaskHandle>:
* @brief Function implementing the ElevatorMovemen thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ElevatorMovementTaskHandle */
void ElevatorMovementTaskHandle(void const *argument) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b090      	sub	sp, #64	@ 0x40
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
    int targetFloor;

    for (;;) {
        if (xQueueReceive(floorQueue, &targetFloor, portMAX_DELAY) == pdPASS) {
 800079c:	4b2b      	ldr	r3, [pc, #172]	@ (800084c <ElevatorMovementTaskHandle+0xb8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 faa1 	bl	8002cf0 <xQueueReceive>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d1f3      	bne.n	800079c <ElevatorMovementTaskHandle+0x8>
            while (1) {
                xSemaphoreTake(floorMutex, portMAX_DELAY);
 80007b4:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <ElevatorMovementTaskHandle+0xbc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fb79 	bl	8002eb4 <xQueueSemaphoreTake>
                if (currentFloor == targetFloor) {
 80007c2:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <ElevatorMovementTaskHandle+0xc0>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d118      	bne.n	80007fe <ElevatorMovementTaskHandle+0x6a>
                    xSemaphoreGive(floorMutex);
 80007cc:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <ElevatorMovementTaskHandle+0xbc>)
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	2300      	movs	r3, #0
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	f002 f8eb 	bl	80029b0 <xQueueGenericSend>

                    // Turn on the LED on reaching the target floor
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2120      	movs	r1, #32
 80007de:	481e      	ldr	r0, [pc, #120]	@ (8000858 <ElevatorMovementTaskHandle+0xc4>)
 80007e0:	f000 fca8 	bl	8001134 <HAL_GPIO_WritePin>
                    osDelay(500); // Keep the LED on for 500 ms
 80007e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007e8:	f001 fe78 	bl	80024dc <osDelay>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2120      	movs	r1, #32
 80007f0:	4819      	ldr	r0, [pc, #100]	@ (8000858 <ElevatorMovementTaskHandle+0xc4>)
 80007f2:	f000 fc9f 	bl	8001134 <HAL_GPIO_WritePin>
                snprintf(move_message, sizeof(move_message), "Moving... Floor: %d\n", currentFloor);
                CLI_Transmit(move_message);

                osDelay(1000); // Delay for floor movement simulation
            }
            CLI_Transmit("Arrived at Target Floor.\n");
 80007f6:	4819      	ldr	r0, [pc, #100]	@ (800085c <ElevatorMovementTaskHandle+0xc8>)
 80007f8:	f7ff fe42 	bl	8000480 <CLI_Transmit>
 80007fc:	e7ce      	b.n	800079c <ElevatorMovementTaskHandle+0x8>
                currentFloor += (currentFloor < targetFloor) ? 1 : -1;
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <ElevatorMovementTaskHandle+0xc0>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000804:	429a      	cmp	r2, r3
 8000806:	da01      	bge.n	800080c <ElevatorMovementTaskHandle+0x78>
 8000808:	2201      	movs	r2, #1
 800080a:	e001      	b.n	8000810 <ElevatorMovementTaskHandle+0x7c>
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <ElevatorMovementTaskHandle+0xc0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4413      	add	r3, r2
 8000816:	4a0f      	ldr	r2, [pc, #60]	@ (8000854 <ElevatorMovementTaskHandle+0xc0>)
 8000818:	6013      	str	r3, [r2, #0]
                xSemaphoreGive(floorMutex);
 800081a:	4b0d      	ldr	r3, [pc, #52]	@ (8000850 <ElevatorMovementTaskHandle+0xbc>)
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	2300      	movs	r3, #0
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	f002 f8c4 	bl	80029b0 <xQueueGenericSend>
                snprintf(move_message, sizeof(move_message), "Moving... Floor: %d\n", currentFloor);
 8000828:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <ElevatorMovementTaskHandle+0xc0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f107 0008 	add.w	r0, r7, #8
 8000830:	4a0b      	ldr	r2, [pc, #44]	@ (8000860 <ElevatorMovementTaskHandle+0xcc>)
 8000832:	2132      	movs	r1, #50	@ 0x32
 8000834:	f004 f9d8 	bl	8004be8 <sniprintf>
                CLI_Transmit(move_message);
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fe1f 	bl	8000480 <CLI_Transmit>
                osDelay(1000); // Delay for floor movement simulation
 8000842:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000846:	f001 fe49 	bl	80024dc <osDelay>
            while (1) {
 800084a:	e7b3      	b.n	80007b4 <ElevatorMovementTaskHandle+0x20>
 800084c:	2000032c 	.word	0x2000032c
 8000850:	2000033c 	.word	0x2000033c
 8000854:	20000000 	.word	0x20000000
 8000858:	40010800 	.word	0x40010800
 800085c:	08005840 	.word	0x08005840
 8000860:	0800585c 	.word	0x0800585c

08000864 <DisplayUpdateTaskHandle>:
* @brief Function implementing the DisplayUpdateTa thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DisplayUpdateTaskHandle */
void DisplayUpdateTaskHandle(void const *argument) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b090      	sub	sp, #64	@ 0x40
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    char message[50];

    for (;;) {
        xSemaphoreTake(floorMutex, portMAX_DELAY);
 800086c:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <DisplayUpdateTaskHandle+0x5c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f04f 31ff 	mov.w	r1, #4294967295
 8000874:	4618      	mov	r0, r3
 8000876:	f002 fb1d 	bl	8002eb4 <xQueueSemaphoreTake>
        int localFloor = currentFloor;
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <DisplayUpdateTaskHandle+0x60>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        xSemaphoreGive(floorMutex);
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <DisplayUpdateTaskHandle+0x5c>)
 8000882:	6818      	ldr	r0, [r3, #0]
 8000884:	2300      	movs	r3, #0
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	f002 f891 	bl	80029b0 <xQueueGenericSend>

        // Save current cursor position
        CLI_Transmit("\x1b[s"); // Save cursor position
 800088e:	480e      	ldr	r0, [pc, #56]	@ (80008c8 <DisplayUpdateTaskHandle+0x64>)
 8000890:	f7ff fdf6 	bl	8000480 <CLI_Transmit>

        // Update the "Current Floor" display
        snprintf(message, sizeof(message), "\x1b[2;16HCurrent Floor: %d   ", localFloor);
 8000894:	f107 0008 	add.w	r0, r7, #8
 8000898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800089a:	4a0c      	ldr	r2, [pc, #48]	@ (80008cc <DisplayUpdateTaskHandle+0x68>)
 800089c:	2132      	movs	r1, #50	@ 0x32
 800089e:	f004 f9a3 	bl	8004be8 <sniprintf>
        CLI_Transmit(message);
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fdea 	bl	8000480 <CLI_Transmit>

        // Restore the saved cursor position
        CLI_Transmit("\x1b[u"); // Restore cursor position
 80008ac:	4808      	ldr	r0, [pc, #32]	@ (80008d0 <DisplayUpdateTaskHandle+0x6c>)
 80008ae:	f7ff fde7 	bl	8000480 <CLI_Transmit>

        osDelay(1000);
 80008b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b6:	f001 fe11 	bl	80024dc <osDelay>
    for (;;) {
 80008ba:	bf00      	nop
 80008bc:	e7d6      	b.n	800086c <DisplayUpdateTaskHandle+0x8>
 80008be:	bf00      	nop
 80008c0:	2000033c 	.word	0x2000033c
 80008c4:	20000000 	.word	0x20000000
 80008c8:	08005874 	.word	0x08005874
 80008cc:	08005878 	.word	0x08005878
 80008d0:	08005894 	.word	0x08005894

080008d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a04      	ldr	r2, [pc, #16]	@ (80008f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d101      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008e6:	f000 f9a5 	bl	8000c34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40000800 	.word	0x40000800

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090a:	4b18      	ldr	r3, [pc, #96]	@ (800096c <HAL_MspInit+0x68>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a17      	ldr	r2, [pc, #92]	@ (800096c <HAL_MspInit+0x68>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <HAL_MspInit+0x68>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_MspInit+0x68>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a11      	ldr	r2, [pc, #68]	@ (800096c <HAL_MspInit+0x68>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <HAL_MspInit+0x68>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	210f      	movs	r1, #15
 800093e:	f06f 0001 	mvn.w	r0, #1
 8000942:	f000 fa48 	bl	8000dd6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <HAL_MspInit+0x6c>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <HAL_MspInit+0x6c>)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	40010000 	.word	0x40010000

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a15      	ldr	r2, [pc, #84]	@ (80009e4 <HAL_UART_MspInit+0x70>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d123      	bne.n	80009dc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000994:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <HAL_UART_MspInit+0x74>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	4a13      	ldr	r2, [pc, #76]	@ (80009e8 <HAL_UART_MspInit+0x74>)
 800099a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800099e:	61d3      	str	r3, [r2, #28]
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <HAL_UART_MspInit+0x74>)
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <HAL_UART_MspInit+0x74>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <HAL_UART_MspInit+0x74>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <HAL_UART_MspInit+0x74>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c4:	230c      	movs	r3, #12
 80009c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <HAL_UART_MspInit+0x78>)
 80009d8:	f000 fa28 	bl	8000e2c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40004400 	.word	0x40004400
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010800 	.word	0x40010800

080009f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	@ 0x38
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000a06:	4b34      	ldr	r3, [pc, #208]	@ (8000ad8 <HAL_InitTick+0xe8>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a33      	ldr	r2, [pc, #204]	@ (8000ad8 <HAL_InitTick+0xe8>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b31      	ldr	r3, [pc, #196]	@ (8000ad8 <HAL_InitTick+0xe8>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a1e:	f107 0210 	add.w	r2, r7, #16
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 ffa5 	bl	8001978 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d103      	bne.n	8000a40 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a38:	f000 ff76 	bl	8001928 <HAL_RCC_GetPCLK1Freq>
 8000a3c:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a3e:	e004      	b.n	8000a4a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a40:	f000 ff72 	bl	8001928 <HAL_RCC_GetPCLK1Freq>
 8000a44:	4603      	mov	r3, r0
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a4c:	4a23      	ldr	r2, [pc, #140]	@ (8000adc <HAL_InitTick+0xec>)
 8000a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a52:	0c9b      	lsrs	r3, r3, #18
 8000a54:	3b01      	subs	r3, #1
 8000a56:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a58:	4b21      	ldr	r3, [pc, #132]	@ (8000ae0 <HAL_InitTick+0xf0>)
 8000a5a:	4a22      	ldr	r2, [pc, #136]	@ (8000ae4 <HAL_InitTick+0xf4>)
 8000a5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <HAL_InitTick+0xf0>)
 8000a60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a64:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a66:	4a1e      	ldr	r2, [pc, #120]	@ (8000ae0 <HAL_InitTick+0xf0>)
 8000a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a6a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <HAL_InitTick+0xf0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <HAL_InitTick+0xf0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a78:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <HAL_InitTick+0xf0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000a7e:	4818      	ldr	r0, [pc, #96]	@ (8000ae0 <HAL_InitTick+0xf0>)
 8000a80:	f000 ffc8 	bl	8001a14 <HAL_TIM_Base_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d11b      	bne.n	8000aca <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000a92:	4813      	ldr	r0, [pc, #76]	@ (8000ae0 <HAL_InitTick+0xf0>)
 8000a94:	f001 f816 	bl	8001ac4 <HAL_TIM_Base_Start_IT>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a9e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d111      	bne.n	8000aca <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000aa6:	201e      	movs	r0, #30
 8000aa8:	f000 f9b1 	bl	8000e0e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b0f      	cmp	r3, #15
 8000ab0:	d808      	bhi.n	8000ac4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	201e      	movs	r0, #30
 8000ab8:	f000 f98d 	bl	8000dd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000abc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <HAL_InitTick+0xf8>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
 8000ac2:	e002      	b.n	8000aca <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3738      	adds	r7, #56	@ 0x38
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	431bde83 	.word	0x431bde83
 8000ae0:	20000348 	.word	0x20000348
 8000ae4:	40000800 	.word	0x40000800
 8000ae8:	20000008 	.word	0x20000008

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <NMI_Handler+0x4>

08000af4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <MemManage_Handler+0x4>

08000b04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <TIM4_IRQHandler+0x10>)
 8000b26:	f001 f81f 	bl	8001b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000348 	.word	0x20000348

08000b34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b38:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b3c:	f000 fb12 	bl	8001164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ba0 <_sbrk+0x5c>)
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <_sbrk+0x60>)
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b60:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <_sbrk+0x64>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	@ (8000bac <_sbrk+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b66:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d207      	bcs.n	8000b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b74:	f004 f886 	bl	8004c84 <__errno>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	e009      	b.n	8000b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a05      	ldr	r2, [pc, #20]	@ (8000ba8 <_sbrk+0x64>)
 8000b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20005000 	.word	0x20005000
 8000ba4:	00000400 	.word	0x00000400
 8000ba8:	20000390 	.word	0x20000390
 8000bac:	20001238 	.word	0x20001238

08000bb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bbc:	f7ff fff8 	bl	8000bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc0:	480b      	ldr	r0, [pc, #44]	@ (8000bf0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bc2:	490c      	ldr	r1, [pc, #48]	@ (8000bf4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a09      	ldr	r2, [pc, #36]	@ (8000bfc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bd8:	4c09      	ldr	r4, [pc, #36]	@ (8000c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be6:	f004 f853 	bl	8004c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bea:	f7ff fad1 	bl	8000190 <main>
  bx lr
 8000bee:	4770      	bx	lr
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000bf8:	08005a10 	.word	0x08005a10
  ldr r2, =_sbss
 8000bfc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000c00:	20001234 	.word	0x20001234

08000c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_2_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <HAL_Init+0x28>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	@ (8000c30 <HAL_Init+0x28>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f8d1 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	200f      	movs	r0, #15
 8000c20:	f7ff fee6 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fe6e 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40022000 	.word	0x40022000

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a03      	ldr	r2, [pc, #12]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	2000000c 	.word	0x2000000c
 8000c54:	20000394 	.word	0x20000394

08000c58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	@ (8000c68 <HAL_GetTick+0x10>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	20000394 	.word	0x20000394

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4906      	ldr	r1, [pc, #24]	@ (8000d04 <__NVIC_EnableIRQ+0x34>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	@ (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	@ (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	@ 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	@ 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff4f 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff64 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ffb2 	bl	8000d5c <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff81 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff57 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b08b      	sub	sp, #44	@ 0x2c
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3e:	e169      	b.n	8001114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e40:	2201      	movs	r2, #1
 8000e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 8158 	bne.w	800110e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	4a9a      	ldr	r2, [pc, #616]	@ (80010cc <HAL_GPIO_Init+0x2a0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d05e      	beq.n	8000f26 <HAL_GPIO_Init+0xfa>
 8000e68:	4a98      	ldr	r2, [pc, #608]	@ (80010cc <HAL_GPIO_Init+0x2a0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d875      	bhi.n	8000f5a <HAL_GPIO_Init+0x12e>
 8000e6e:	4a98      	ldr	r2, [pc, #608]	@ (80010d0 <HAL_GPIO_Init+0x2a4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d058      	beq.n	8000f26 <HAL_GPIO_Init+0xfa>
 8000e74:	4a96      	ldr	r2, [pc, #600]	@ (80010d0 <HAL_GPIO_Init+0x2a4>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d86f      	bhi.n	8000f5a <HAL_GPIO_Init+0x12e>
 8000e7a:	4a96      	ldr	r2, [pc, #600]	@ (80010d4 <HAL_GPIO_Init+0x2a8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d052      	beq.n	8000f26 <HAL_GPIO_Init+0xfa>
 8000e80:	4a94      	ldr	r2, [pc, #592]	@ (80010d4 <HAL_GPIO_Init+0x2a8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d869      	bhi.n	8000f5a <HAL_GPIO_Init+0x12e>
 8000e86:	4a94      	ldr	r2, [pc, #592]	@ (80010d8 <HAL_GPIO_Init+0x2ac>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d04c      	beq.n	8000f26 <HAL_GPIO_Init+0xfa>
 8000e8c:	4a92      	ldr	r2, [pc, #584]	@ (80010d8 <HAL_GPIO_Init+0x2ac>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d863      	bhi.n	8000f5a <HAL_GPIO_Init+0x12e>
 8000e92:	4a92      	ldr	r2, [pc, #584]	@ (80010dc <HAL_GPIO_Init+0x2b0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d046      	beq.n	8000f26 <HAL_GPIO_Init+0xfa>
 8000e98:	4a90      	ldr	r2, [pc, #576]	@ (80010dc <HAL_GPIO_Init+0x2b0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d85d      	bhi.n	8000f5a <HAL_GPIO_Init+0x12e>
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d82a      	bhi.n	8000ef8 <HAL_GPIO_Init+0xcc>
 8000ea2:	2b12      	cmp	r3, #18
 8000ea4:	d859      	bhi.n	8000f5a <HAL_GPIO_Init+0x12e>
 8000ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8000eac <HAL_GPIO_Init+0x80>)
 8000ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eac:	08000f27 	.word	0x08000f27
 8000eb0:	08000f01 	.word	0x08000f01
 8000eb4:	08000f13 	.word	0x08000f13
 8000eb8:	08000f55 	.word	0x08000f55
 8000ebc:	08000f5b 	.word	0x08000f5b
 8000ec0:	08000f5b 	.word	0x08000f5b
 8000ec4:	08000f5b 	.word	0x08000f5b
 8000ec8:	08000f5b 	.word	0x08000f5b
 8000ecc:	08000f5b 	.word	0x08000f5b
 8000ed0:	08000f5b 	.word	0x08000f5b
 8000ed4:	08000f5b 	.word	0x08000f5b
 8000ed8:	08000f5b 	.word	0x08000f5b
 8000edc:	08000f5b 	.word	0x08000f5b
 8000ee0:	08000f5b 	.word	0x08000f5b
 8000ee4:	08000f5b 	.word	0x08000f5b
 8000ee8:	08000f5b 	.word	0x08000f5b
 8000eec:	08000f5b 	.word	0x08000f5b
 8000ef0:	08000f09 	.word	0x08000f09
 8000ef4:	08000f1d 	.word	0x08000f1d
 8000ef8:	4a79      	ldr	r2, [pc, #484]	@ (80010e0 <HAL_GPIO_Init+0x2b4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000efe:	e02c      	b.n	8000f5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	623b      	str	r3, [r7, #32]
          break;
 8000f06:	e029      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	623b      	str	r3, [r7, #32]
          break;
 8000f10:	e024      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	3308      	adds	r3, #8
 8000f18:	623b      	str	r3, [r7, #32]
          break;
 8000f1a:	e01f      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	330c      	adds	r3, #12
 8000f22:	623b      	str	r3, [r7, #32]
          break;
 8000f24:	e01a      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d102      	bne.n	8000f34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	623b      	str	r3, [r7, #32]
          break;
 8000f32:	e013      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d105      	bne.n	8000f48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	611a      	str	r2, [r3, #16]
          break;
 8000f46:	e009      	b.n	8000f5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	615a      	str	r2, [r3, #20]
          break;
 8000f52:	e003      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
          break;
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          break;
 8000f5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2bff      	cmp	r3, #255	@ 0xff
 8000f60:	d801      	bhi.n	8000f66 <HAL_GPIO_Init+0x13a>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	e001      	b.n	8000f6a <HAL_GPIO_Init+0x13e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	2bff      	cmp	r3, #255	@ 0xff
 8000f70:	d802      	bhi.n	8000f78 <HAL_GPIO_Init+0x14c>
 8000f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	e002      	b.n	8000f7e <HAL_GPIO_Init+0x152>
 8000f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7a:	3b08      	subs	r3, #8
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	210f      	movs	r1, #15
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	401a      	ands	r2, r3
 8000f90:	6a39      	ldr	r1, [r7, #32]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 80b1 	beq.w	800110e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fac:	4b4d      	ldr	r3, [pc, #308]	@ (80010e4 <HAL_GPIO_Init+0x2b8>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a4c      	ldr	r2, [pc, #304]	@ (80010e4 <HAL_GPIO_Init+0x2b8>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80010e4 <HAL_GPIO_Init+0x2b8>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fc4:	4a48      	ldr	r2, [pc, #288]	@ (80010e8 <HAL_GPIO_Init+0x2bc>)
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a40      	ldr	r2, [pc, #256]	@ (80010ec <HAL_GPIO_Init+0x2c0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d013      	beq.n	8001018 <HAL_GPIO_Init+0x1ec>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80010f0 <HAL_GPIO_Init+0x2c4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d00d      	beq.n	8001014 <HAL_GPIO_Init+0x1e8>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a3e      	ldr	r2, [pc, #248]	@ (80010f4 <HAL_GPIO_Init+0x2c8>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d007      	beq.n	8001010 <HAL_GPIO_Init+0x1e4>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a3d      	ldr	r2, [pc, #244]	@ (80010f8 <HAL_GPIO_Init+0x2cc>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d101      	bne.n	800100c <HAL_GPIO_Init+0x1e0>
 8001008:	2303      	movs	r3, #3
 800100a:	e006      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 800100c:	2304      	movs	r3, #4
 800100e:	e004      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001010:	2302      	movs	r3, #2
 8001012:	e002      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001014:	2301      	movs	r3, #1
 8001016:	e000      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001018:	2300      	movs	r3, #0
 800101a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800101c:	f002 0203 	and.w	r2, r2, #3
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	4093      	lsls	r3, r2
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800102a:	492f      	ldr	r1, [pc, #188]	@ (80010e8 <HAL_GPIO_Init+0x2bc>)
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	492c      	ldr	r1, [pc, #176]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	608b      	str	r3, [r1, #8]
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001052:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	43db      	mvns	r3, r3
 800105a:	4928      	ldr	r1, [pc, #160]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 800105c:	4013      	ands	r3, r2
 800105e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d006      	beq.n	800107a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800106c:	4b23      	ldr	r3, [pc, #140]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	4922      	ldr	r1, [pc, #136]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	60cb      	str	r3, [r1, #12]
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800107a:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	43db      	mvns	r3, r3
 8001082:	491e      	ldr	r1, [pc, #120]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 8001084:	4013      	ands	r3, r2
 8001086:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d006      	beq.n	80010a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	4918      	ldr	r1, [pc, #96]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	604b      	str	r3, [r1, #4]
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010a2:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	4914      	ldr	r1, [pc, #80]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d021      	beq.n	8001100 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010bc:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	490e      	ldr	r1, [pc, #56]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
 80010c8:	e021      	b.n	800110e <HAL_GPIO_Init+0x2e2>
 80010ca:	bf00      	nop
 80010cc:	10320000 	.word	0x10320000
 80010d0:	10310000 	.word	0x10310000
 80010d4:	10220000 	.word	0x10220000
 80010d8:	10210000 	.word	0x10210000
 80010dc:	10120000 	.word	0x10120000
 80010e0:	10110000 	.word	0x10110000
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010000 	.word	0x40010000
 80010ec:	40010800 	.word	0x40010800
 80010f0:	40010c00 	.word	0x40010c00
 80010f4:	40011000 	.word	0x40011000
 80010f8:	40011400 	.word	0x40011400
 80010fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <HAL_GPIO_Init+0x304>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	43db      	mvns	r3, r3
 8001108:	4909      	ldr	r1, [pc, #36]	@ (8001130 <HAL_GPIO_Init+0x304>)
 800110a:	4013      	ands	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	3301      	adds	r3, #1
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111a:	fa22 f303 	lsr.w	r3, r2, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	f47f ae8e 	bne.w	8000e40 <HAL_GPIO_Init+0x14>
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	372c      	adds	r7, #44	@ 0x2c
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	40010400 	.word	0x40010400

08001134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001144:	787b      	ldrb	r3, [r7, #1]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800114a:	887a      	ldrh	r2, [r7, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001150:	e003      	b.n	800115a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	041a      	lsls	r2, r3, #16
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	611a      	str	r2, [r3, #16]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9d8 	bl	8000538 <HAL_GPIO_EXTI_Callback>
  }
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40010400 	.word	0x40010400

08001194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e272      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8087 	beq.w	80012c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011b4:	4b92      	ldr	r3, [pc, #584]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d00c      	beq.n	80011da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011c0:	4b8f      	ldr	r3, [pc, #572]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 030c 	and.w	r3, r3, #12
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	d112      	bne.n	80011f2 <HAL_RCC_OscConfig+0x5e>
 80011cc:	4b8c      	ldr	r3, [pc, #560]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d8:	d10b      	bne.n	80011f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011da:	4b89      	ldr	r3, [pc, #548]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d06c      	beq.n	80012c0 <HAL_RCC_OscConfig+0x12c>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d168      	bne.n	80012c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e24c      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011fa:	d106      	bne.n	800120a <HAL_RCC_OscConfig+0x76>
 80011fc:	4b80      	ldr	r3, [pc, #512]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a7f      	ldr	r2, [pc, #508]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e02e      	b.n	8001268 <HAL_RCC_OscConfig+0xd4>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x98>
 8001212:	4b7b      	ldr	r3, [pc, #492]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a7a      	ldr	r2, [pc, #488]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b78      	ldr	r3, [pc, #480]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a77      	ldr	r2, [pc, #476]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001224:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e01d      	b.n	8001268 <HAL_RCC_OscConfig+0xd4>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0xbc>
 8001236:	4b72      	ldr	r3, [pc, #456]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a71      	ldr	r2, [pc, #452]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b6f      	ldr	r3, [pc, #444]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a6e      	ldr	r2, [pc, #440]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0xd4>
 8001250:	4b6b      	ldr	r3, [pc, #428]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a6a      	ldr	r2, [pc, #424]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b68      	ldr	r3, [pc, #416]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a67      	ldr	r2, [pc, #412]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001266:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d013      	beq.n	8001298 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fcf2 	bl	8000c58 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fcee 	bl	8000c58 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	@ 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e200      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	4b5d      	ldr	r3, [pc, #372]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0xe4>
 8001296:	e014      	b.n	80012c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fcde 	bl	8000c58 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fcda 	bl	8000c58 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	@ 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1ec      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	4b53      	ldr	r3, [pc, #332]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x10c>
 80012be:	e000      	b.n	80012c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d063      	beq.n	8001396 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012da:	4b49      	ldr	r3, [pc, #292]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d11c      	bne.n	8001320 <HAL_RCC_OscConfig+0x18c>
 80012e6:	4b46      	ldr	r3, [pc, #280]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d116      	bne.n	8001320 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	4b43      	ldr	r3, [pc, #268]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <HAL_RCC_OscConfig+0x176>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d001      	beq.n	800130a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e1c0      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130a:	4b3d      	ldr	r3, [pc, #244]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4939      	ldr	r1, [pc, #228]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	e03a      	b.n	8001396 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d020      	beq.n	800136a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001328:	4b36      	ldr	r3, [pc, #216]	@ (8001404 <HAL_RCC_OscConfig+0x270>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132e:	f7ff fc93 	bl	8000c58 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001336:	f7ff fc8f 	bl	8000c58 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e1a1      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001348:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b2a      	ldr	r3, [pc, #168]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4927      	ldr	r1, [pc, #156]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
 8001368:	e015      	b.n	8001396 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136a:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <HAL_RCC_OscConfig+0x270>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fc72 	bl	8000c58 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001378:	f7ff fc6e 	bl	8000c58 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e180      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138a:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d03a      	beq.n	8001418 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d019      	beq.n	80013de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013aa:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <HAL_RCC_OscConfig+0x274>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b0:	f7ff fc52 	bl	8000c58 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fc4e 	bl	8000c58 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e160      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013d6:	2001      	movs	r0, #1
 80013d8:	f000 fafe 	bl	80019d8 <RCC_Delay>
 80013dc:	e01c      	b.n	8001418 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013de:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <HAL_RCC_OscConfig+0x274>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e4:	f7ff fc38 	bl	8000c58 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ea:	e00f      	b.n	800140c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ec:	f7ff fc34 	bl	8000c58 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d908      	bls.n	800140c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e146      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	42420000 	.word	0x42420000
 8001408:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	4b92      	ldr	r3, [pc, #584]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800140e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e9      	bne.n	80013ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80a6 	beq.w	8001572 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142a:	4b8b      	ldr	r3, [pc, #556]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10d      	bne.n	8001452 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b88      	ldr	r3, [pc, #544]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	4a87      	ldr	r2, [pc, #540]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001440:	61d3      	str	r3, [r2, #28]
 8001442:	4b85      	ldr	r3, [pc, #532]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144e:	2301      	movs	r3, #1
 8001450:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001452:	4b82      	ldr	r3, [pc, #520]	@ (800165c <HAL_RCC_OscConfig+0x4c8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d118      	bne.n	8001490 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145e:	4b7f      	ldr	r3, [pc, #508]	@ (800165c <HAL_RCC_OscConfig+0x4c8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7e      	ldr	r2, [pc, #504]	@ (800165c <HAL_RCC_OscConfig+0x4c8>)
 8001464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800146a:	f7ff fbf5 	bl	8000c58 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001472:	f7ff fbf1 	bl	8000c58 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b64      	cmp	r3, #100	@ 0x64
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e103      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	4b75      	ldr	r3, [pc, #468]	@ (800165c <HAL_RCC_OscConfig+0x4c8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d106      	bne.n	80014a6 <HAL_RCC_OscConfig+0x312>
 8001498:	4b6f      	ldr	r3, [pc, #444]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4a6e      	ldr	r2, [pc, #440]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6213      	str	r3, [r2, #32]
 80014a4:	e02d      	b.n	8001502 <HAL_RCC_OscConfig+0x36e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x334>
 80014ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4a69      	ldr	r2, [pc, #420]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	6213      	str	r3, [r2, #32]
 80014ba:	4b67      	ldr	r3, [pc, #412]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4a66      	ldr	r2, [pc, #408]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	f023 0304 	bic.w	r3, r3, #4
 80014c4:	6213      	str	r3, [r2, #32]
 80014c6:	e01c      	b.n	8001502 <HAL_RCC_OscConfig+0x36e>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d10c      	bne.n	80014ea <HAL_RCC_OscConfig+0x356>
 80014d0:	4b61      	ldr	r3, [pc, #388]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a60      	ldr	r2, [pc, #384]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4a5d      	ldr	r2, [pc, #372]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6213      	str	r3, [r2, #32]
 80014e8:	e00b      	b.n	8001502 <HAL_RCC_OscConfig+0x36e>
 80014ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6213      	str	r3, [r2, #32]
 80014f6:	4b58      	ldr	r3, [pc, #352]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4a57      	ldr	r2, [pc, #348]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	f023 0304 	bic.w	r3, r3, #4
 8001500:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d015      	beq.n	8001536 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150a:	f7ff fba5 	bl	8000c58 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	e00a      	b.n	8001528 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff fba1 	bl	8000c58 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001520:	4293      	cmp	r3, r2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e0b1      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	4b4b      	ldr	r3, [pc, #300]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0ee      	beq.n	8001512 <HAL_RCC_OscConfig+0x37e>
 8001534:	e014      	b.n	8001560 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001536:	f7ff fb8f 	bl	8000c58 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153c:	e00a      	b.n	8001554 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f7ff fb8b 	bl	8000c58 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800154c:	4293      	cmp	r3, r2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e09b      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001554:	4b40      	ldr	r3, [pc, #256]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1ee      	bne.n	800153e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d105      	bne.n	8001572 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001566:	4b3c      	ldr	r3, [pc, #240]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a3b      	ldr	r2, [pc, #236]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001570:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8087 	beq.w	800168a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800157c:	4b36      	ldr	r3, [pc, #216]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b08      	cmp	r3, #8
 8001586:	d061      	beq.n	800164c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d146      	bne.n	800161e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001590:	4b33      	ldr	r3, [pc, #204]	@ (8001660 <HAL_RCC_OscConfig+0x4cc>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fb5f 	bl	8000c58 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159e:	f7ff fb5b 	bl	8000c58 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e06d      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b0:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015c4:	d108      	bne.n	80015d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015c6:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	4921      	ldr	r1, [pc, #132]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a19      	ldr	r1, [r3, #32]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e8:	430b      	orrs	r3, r1
 80015ea:	491b      	ldr	r1, [pc, #108]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <HAL_RCC_OscConfig+0x4cc>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff fb2f 	bl	8000c58 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff fb2b 	bl	8000c58 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e03d      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x46a>
 800161c:	e035      	b.n	800168a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_RCC_OscConfig+0x4cc>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fb18 	bl	8000c58 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162c:	f7ff fb14 	bl	8000c58 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e026      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x498>
 800164a:	e01e      	b.n	800168a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d107      	bne.n	8001664 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e019      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
 8001658:	40021000 	.word	0x40021000
 800165c:	40007000 	.word	0x40007000
 8001660:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <HAL_RCC_OscConfig+0x500>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	429a      	cmp	r2, r3
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001682:	429a      	cmp	r2, r3
 8001684:	d001      	beq.n	800168a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0d0      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d910      	bls.n	80016dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b67      	ldr	r3, [pc, #412]	@ (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 0207 	bic.w	r2, r3, #7
 80016c2:	4965      	ldr	r1, [pc, #404]	@ (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b63      	ldr	r3, [pc, #396]	@ (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0b8      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d020      	beq.n	800172a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f4:	4b59      	ldr	r3, [pc, #356]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4a58      	ldr	r2, [pc, #352]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800170c:	4b53      	ldr	r3, [pc, #332]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	4a52      	ldr	r2, [pc, #328]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001716:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001718:	4b50      	ldr	r3, [pc, #320]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	494d      	ldr	r1, [pc, #308]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d040      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	4b47      	ldr	r3, [pc, #284]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d115      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e07f      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	4b41      	ldr	r3, [pc, #260]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e073      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001766:	4b3d      	ldr	r3, [pc, #244]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06b      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001776:	4b39      	ldr	r3, [pc, #228]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f023 0203 	bic.w	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4936      	ldr	r1, [pc, #216]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001788:	f7ff fa66 	bl	8000c58 <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001790:	f7ff fa62 	bl	8000c58 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e053      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a6:	4b2d      	ldr	r3, [pc, #180]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 020c 	and.w	r2, r3, #12
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d1eb      	bne.n	8001790 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017b8:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d210      	bcs.n	80017e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 0207 	bic.w	r2, r3, #7
 80017ce:	4922      	ldr	r1, [pc, #136]	@ (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e032      	b.n	800184e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f4:	4b19      	ldr	r3, [pc, #100]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4916      	ldr	r1, [pc, #88]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001812:	4b12      	ldr	r3, [pc, #72]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	490e      	ldr	r1, [pc, #56]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001826:	f000 f821 	bl	800186c <HAL_RCC_GetSysClockFreq>
 800182a:	4602      	mov	r2, r0
 800182c:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	490a      	ldr	r1, [pc, #40]	@ (8001860 <HAL_RCC_ClockConfig+0x1c8>)
 8001838:	5ccb      	ldrb	r3, [r1, r3]
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	4a09      	ldr	r2, [pc, #36]	@ (8001864 <HAL_RCC_ClockConfig+0x1cc>)
 8001840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <HAL_RCC_ClockConfig+0x1d0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff f8d2 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40022000 	.word	0x40022000
 800185c:	40021000 	.word	0x40021000
 8001860:	080058a0 	.word	0x080058a0
 8001864:	20000004 	.word	0x20000004
 8001868:	20000008 	.word	0x20000008

0800186c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001886:	4b1e      	ldr	r3, [pc, #120]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x94>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b04      	cmp	r3, #4
 8001894:	d002      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x30>
 8001896:	2b08      	cmp	r3, #8
 8001898:	d003      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0x36>
 800189a:	e027      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800189c:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x98>)
 800189e:	613b      	str	r3, [r7, #16]
      break;
 80018a0:	e027      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	0c9b      	lsrs	r3, r3, #18
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	4a17      	ldr	r2, [pc, #92]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018ac:	5cd3      	ldrb	r3, [r2, r3]
 80018ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d010      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x94>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	0c5b      	lsrs	r3, r3, #17
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	4a11      	ldr	r2, [pc, #68]	@ (800190c <HAL_RCC_GetSysClockFreq+0xa0>)
 80018c6:	5cd3      	ldrb	r3, [r2, r3]
 80018c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ce:	fb03 f202 	mul.w	r2, r3, r2
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e004      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a0c      	ldr	r2, [pc, #48]	@ (8001910 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	613b      	str	r3, [r7, #16]
      break;
 80018ea:	e002      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ee:	613b      	str	r3, [r7, #16]
      break;
 80018f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f2:	693b      	ldr	r3, [r7, #16]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	007a1200 	.word	0x007a1200
 8001908:	080058b8 	.word	0x080058b8
 800190c:	080058c8 	.word	0x080058c8
 8001910:	003d0900 	.word	0x003d0900

08001914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001918:	4b02      	ldr	r3, [pc, #8]	@ (8001924 <HAL_RCC_GetHCLKFreq+0x10>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800192c:	f7ff fff2 	bl	8001914 <HAL_RCC_GetHCLKFreq>
 8001930:	4602      	mov	r2, r0
 8001932:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	0a1b      	lsrs	r3, r3, #8
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	4903      	ldr	r1, [pc, #12]	@ (800194c <HAL_RCC_GetPCLK1Freq+0x24>)
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021000 	.word	0x40021000
 800194c:	080058b0 	.word	0x080058b0

08001950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001954:	f7ff ffde 	bl	8001914 <HAL_RCC_GetHCLKFreq>
 8001958:	4602      	mov	r2, r0
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	0adb      	lsrs	r3, r3, #11
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	4903      	ldr	r1, [pc, #12]	@ (8001974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	080058b0 	.word	0x080058b0

08001978 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	220f      	movs	r2, #15
 8001986:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <HAL_RCC_GetClockConfig+0x58>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0203 	and.w	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <HAL_RCC_GetClockConfig+0x58>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_RCC_GetClockConfig+0x58>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <HAL_RCC_GetClockConfig+0x58>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_RCC_GetClockConfig+0x5c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0207 	and.w	r2, r3, #7
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40022000 	.word	0x40022000

080019d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019e0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <RCC_Delay+0x34>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <RCC_Delay+0x38>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	0a5b      	lsrs	r3, r3, #9
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019f4:	bf00      	nop
  }
  while (Delay --);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1e5a      	subs	r2, r3, #1
 80019fa:	60fa      	str	r2, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f9      	bne.n	80019f4 <RCC_Delay+0x1c>
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	10624dd3 	.word	0x10624dd3

08001a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e041      	b.n	8001aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f839 	bl	8001ab2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	4619      	mov	r1, r3
 8001a52:	4610      	mov	r0, r2
 8001a54:	f000 f99c 	bl	8001d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d001      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e03a      	b.n	8001b52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a18      	ldr	r2, [pc, #96]	@ (8001b5c <HAL_TIM_Base_Start_IT+0x98>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00e      	beq.n	8001b1c <HAL_TIM_Base_Start_IT+0x58>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b06:	d009      	beq.n	8001b1c <HAL_TIM_Base_Start_IT+0x58>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a14      	ldr	r2, [pc, #80]	@ (8001b60 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d004      	beq.n	8001b1c <HAL_TIM_Base_Start_IT+0x58>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a13      	ldr	r2, [pc, #76]	@ (8001b64 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d111      	bne.n	8001b40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d010      	beq.n	8001b50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0201 	orr.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3e:	e007      	b.n	8001b50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	40012c00 	.word	0x40012c00
 8001b60:	40000400 	.word	0x40000400
 8001b64:	40000800 	.word	0x40000800

08001b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d020      	beq.n	8001bcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d01b      	beq.n	8001bcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0202 	mvn.w	r2, #2
 8001b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f8d1 	bl	8001d5a <HAL_TIM_IC_CaptureCallback>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8c4 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f8d3 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d020      	beq.n	8001c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01b      	beq.n	8001c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0204 	mvn.w	r2, #4
 8001be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2202      	movs	r2, #2
 8001bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f8ab 	bl	8001d5a <HAL_TIM_IC_CaptureCallback>
 8001c04:	e005      	b.n	8001c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f89e 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8ad 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d020      	beq.n	8001c64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01b      	beq.n	8001c64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0208 	mvn.w	r2, #8
 8001c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f885 	bl	8001d5a <HAL_TIM_IC_CaptureCallback>
 8001c50:	e005      	b.n	8001c5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f878 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f887 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d020      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01b      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0210 	mvn.w	r2, #16
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2208      	movs	r2, #8
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f85f 	bl	8001d5a <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f852 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f861 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0201 	mvn.w	r2, #1
 8001ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7fe fe00 	bl	80008d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8c3 	bl	8001e7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00c      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f831 	bl	8001d7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00c      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0220 	mvn.w	r2, #32
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f896 	bl	8001e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a2f      	ldr	r2, [pc, #188]	@ (8001e60 <TIM_Base_SetConfig+0xd0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00b      	beq.n	8001dc0 <TIM_Base_SetConfig+0x30>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dae:	d007      	beq.n	8001dc0 <TIM_Base_SetConfig+0x30>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a2c      	ldr	r2, [pc, #176]	@ (8001e64 <TIM_Base_SetConfig+0xd4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d003      	beq.n	8001dc0 <TIM_Base_SetConfig+0x30>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a2b      	ldr	r2, [pc, #172]	@ (8001e68 <TIM_Base_SetConfig+0xd8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d108      	bne.n	8001dd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a22      	ldr	r2, [pc, #136]	@ (8001e60 <TIM_Base_SetConfig+0xd0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00b      	beq.n	8001df2 <TIM_Base_SetConfig+0x62>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de0:	d007      	beq.n	8001df2 <TIM_Base_SetConfig+0x62>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e64 <TIM_Base_SetConfig+0xd4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d003      	beq.n	8001df2 <TIM_Base_SetConfig+0x62>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a1e      	ldr	r2, [pc, #120]	@ (8001e68 <TIM_Base_SetConfig+0xd8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d108      	bne.n	8001e04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e60 <TIM_Base_SetConfig+0xd0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d103      	bne.n	8001e38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f023 0201 	bic.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	611a      	str	r2, [r3, #16]
  }
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40012c00 	.word	0x40012c00
 8001e64:	40000400 	.word	0x40000400
 8001e68:	40000800 	.word	0x40000800

08001e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e042      	b.n	8001f28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7fe fd5c 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2224      	movs	r2, #36	@ 0x24
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fa09 	bl	80022ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	@ 0x28
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	d175      	bne.n	800203c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <HAL_UART_Transmit+0x2c>
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e06e      	b.n	800203e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2221      	movs	r2, #33	@ 0x21
 8001f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f6e:	f7fe fe73 	bl	8000c58 <HAL_GetTick>
 8001f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	88fa      	ldrh	r2, [r7, #6]
 8001f78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	88fa      	ldrh	r2, [r7, #6]
 8001f7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f88:	d108      	bne.n	8001f9c <HAL_UART_Transmit+0x6c>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d104      	bne.n	8001f9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	e003      	b.n	8001fa4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fa4:	e02e      	b.n	8002004 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2200      	movs	r2, #0
 8001fae:	2180      	movs	r1, #128	@ 0x80
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f8df 	bl	8002174 <UART_WaitOnFlagUntilTimeout>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e03a      	b.n	800203e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	e007      	b.n	8001ff6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1cb      	bne.n	8001fa6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2200      	movs	r2, #0
 8002016:	2140      	movs	r1, #64	@ 0x40
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f8ab 	bl	8002174 <UART_WaitOnFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e006      	b.n	800203e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	e000      	b.n	800203e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800203c:	2302      	movs	r3, #2
  }
}
 800203e:	4618      	mov	r0, r3
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b08a      	sub	sp, #40	@ 0x28
 800204a:	af02      	add	r7, sp, #8
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	4613      	mov	r3, r2
 8002054:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b20      	cmp	r3, #32
 8002064:	f040 8081 	bne.w	800216a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_UART_Receive+0x2e>
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e079      	b.n	800216c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2222      	movs	r2, #34	@ 0x22
 8002082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800208c:	f7fe fde4 	bl	8000c58 <HAL_GetTick>
 8002090:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	88fa      	ldrh	r2, [r7, #6]
 8002096:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	88fa      	ldrh	r2, [r7, #6]
 800209c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020a6:	d108      	bne.n	80020ba <HAL_UART_Receive+0x74>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d104      	bne.n	80020ba <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	e003      	b.n	80020c2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80020c2:	e047      	b.n	8002154 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2200      	movs	r2, #0
 80020cc:	2120      	movs	r1, #32
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f850 	bl	8002174 <UART_WaitOnFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e042      	b.n	800216c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10c      	bne.n	8002106 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	3302      	adds	r3, #2
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	e01f      	b.n	8002146 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800210e:	d007      	beq.n	8002120 <HAL_UART_Receive+0xda>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10a      	bne.n	800212e <HAL_UART_Receive+0xe8>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d106      	bne.n	800212e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e008      	b.n	8002140 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800213a:	b2da      	uxtb	r2, r3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	3301      	adds	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1b2      	bne.n	80020c4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e000      	b.n	800216c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800216a:	2302      	movs	r3, #2
  }
}
 800216c:	4618      	mov	r0, r3
 800216e:	3720      	adds	r7, #32
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002184:	e03b      	b.n	80021fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d037      	beq.n	80021fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218e:	f7fe fd63 	bl	8000c58 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	6a3a      	ldr	r2, [r7, #32]
 800219a:	429a      	cmp	r2, r3
 800219c:	d302      	bcc.n	80021a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e03a      	b.n	800221e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d023      	beq.n	80021fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b80      	cmp	r3, #128	@ 0x80
 80021ba:	d020      	beq.n	80021fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b40      	cmp	r3, #64	@ 0x40
 80021c0:	d01d      	beq.n	80021fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d116      	bne.n	80021fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f81d 	bl	8002226 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2208      	movs	r2, #8
 80021f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4013      	ands	r3, r2
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	429a      	cmp	r2, r3
 800220c:	bf0c      	ite	eq
 800220e:	2301      	moveq	r3, #1
 8002210:	2300      	movne	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	429a      	cmp	r2, r3
 800221a:	d0b4      	beq.n	8002186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002226:	b480      	push	{r7}
 8002228:	b095      	sub	sp, #84	@ 0x54
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	330c      	adds	r3, #12
 8002234:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002238:	e853 3f00 	ldrex	r3, [r3]
 800223c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800223e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	330c      	adds	r3, #12
 800224c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800224e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002252:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002254:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002256:	e841 2300 	strex	r3, r2, [r1]
 800225a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800225c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1e5      	bne.n	800222e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3314      	adds	r3, #20
 8002268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	e853 3f00 	ldrex	r3, [r3]
 8002270:	61fb      	str	r3, [r7, #28]
   return(result);
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3314      	adds	r3, #20
 8002280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002284:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800228a:	e841 2300 	strex	r3, r2, [r1]
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1e5      	bne.n	8002262 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	2b01      	cmp	r3, #1
 800229c:	d119      	bne.n	80022d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	330c      	adds	r3, #12
 80022a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	e853 3f00 	ldrex	r3, [r3]
 80022ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f023 0310 	bic.w	r3, r3, #16
 80022b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	330c      	adds	r3, #12
 80022bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022be:	61ba      	str	r2, [r7, #24]
 80022c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c2:	6979      	ldr	r1, [r7, #20]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	e841 2300 	strex	r3, r2, [r1]
 80022ca:	613b      	str	r3, [r7, #16]
   return(result);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1e5      	bne.n	800229e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80022e0:	bf00      	nop
 80022e2:	3754      	adds	r7, #84	@ 0x54
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
	...

080022ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002326:	f023 030c 	bic.w	r3, r3, #12
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	430b      	orrs	r3, r1
 8002332:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a2c      	ldr	r2, [pc, #176]	@ (8002400 <UART_SetConfig+0x114>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d103      	bne.n	800235c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002354:	f7ff fafc 	bl	8001950 <HAL_RCC_GetPCLK2Freq>
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	e002      	b.n	8002362 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800235c:	f7ff fae4 	bl	8001928 <HAL_RCC_GetPCLK1Freq>
 8002360:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	009a      	lsls	r2, r3, #2
 800236c:	441a      	add	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	4a22      	ldr	r2, [pc, #136]	@ (8002404 <UART_SetConfig+0x118>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	0119      	lsls	r1, r3, #4
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	009a      	lsls	r2, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fbb2 f2f3 	udiv	r2, r2, r3
 8002398:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <UART_SetConfig+0x118>)
 800239a:	fba3 0302 	umull	r0, r3, r3, r2
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2064      	movs	r0, #100	@ 0x64
 80023a2:	fb00 f303 	mul.w	r3, r0, r3
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	3332      	adds	r3, #50	@ 0x32
 80023ac:	4a15      	ldr	r2, [pc, #84]	@ (8002404 <UART_SetConfig+0x118>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023b8:	4419      	add	r1, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	009a      	lsls	r2, r3, #2
 80023c4:	441a      	add	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <UART_SetConfig+0x118>)
 80023d2:	fba3 0302 	umull	r0, r3, r3, r2
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2064      	movs	r0, #100	@ 0x64
 80023da:	fb00 f303 	mul.w	r3, r0, r3
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	3332      	adds	r3, #50	@ 0x32
 80023e4:	4a07      	ldr	r2, [pc, #28]	@ (8002404 <UART_SetConfig+0x118>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	f003 020f 	and.w	r2, r3, #15
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	440a      	add	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40013800 	.word	0x40013800
 8002404:	51eb851f 	.word	0x51eb851f

08002408 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800241a:	2b84      	cmp	r3, #132	@ 0x84
 800241c:	d005      	beq.n	800242a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800241e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4413      	add	r3, r2
 8002426:	3303      	adds	r3, #3
 8002428:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800242a:	68fb      	ldr	r3, [r7, #12]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800243a:	f001 f93f 	bl	80036bc <vTaskStartScheduler>
  
  return osOK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}

08002444 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002446:	b089      	sub	sp, #36	@ 0x24
 8002448:	af04      	add	r7, sp, #16
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d020      	beq.n	8002498 <osThreadCreate+0x54>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01c      	beq.n	8002498 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685c      	ldr	r4, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691e      	ldr	r6, [r3, #16]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ffc9 	bl	8002408 <makeFreeRtosPriority>
 8002476:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002480:	9202      	str	r2, [sp, #8]
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	9100      	str	r1, [sp, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	4632      	mov	r2, r6
 800248a:	4629      	mov	r1, r5
 800248c:	4620      	mov	r0, r4
 800248e:	f000 ff48 	bl	8003322 <xTaskCreateStatic>
 8002492:	4603      	mov	r3, r0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	e01c      	b.n	80024d2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685c      	ldr	r4, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024a4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ffab 	bl	8002408 <makeFreeRtosPriority>
 80024b2:	4602      	mov	r2, r0
 80024b4:	f107 030c 	add.w	r3, r7, #12
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	9200      	str	r2, [sp, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4632      	mov	r2, r6
 80024c0:	4629      	mov	r1, r5
 80024c2:	4620      	mov	r0, r4
 80024c4:	f000 ff8d 	bl	80033e2 <xTaskCreate>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d001      	beq.n	80024d2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <osDelay+0x16>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	e000      	b.n	80024f4 <osDelay+0x18>
 80024f2:	2301      	movs	r3, #1
 80024f4:	4618      	mov	r0, r3
 80024f6:	f001 f8ab 	bl	8003650 <vTaskDelay>
  
  return osOK;
 80024fa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af02      	add	r7, sp, #8
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00f      	beq.n	8002536 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d10a      	bne.n	8002532 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2203      	movs	r2, #3
 8002522:	9200      	str	r2, [sp, #0]
 8002524:	2200      	movs	r2, #0
 8002526:	2100      	movs	r1, #0
 8002528:	2001      	movs	r0, #1
 800252a:	f000 f937 	bl	800279c <xQueueGenericCreateStatic>
 800252e:	4603      	mov	r3, r0
 8002530:	e016      	b.n	8002560 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002532:	2300      	movs	r3, #0
 8002534:	e014      	b.n	8002560 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d110      	bne.n	800255e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800253c:	2203      	movs	r2, #3
 800253e:	2100      	movs	r1, #0
 8002540:	2001      	movs	r0, #1
 8002542:	f000 f9a8 	bl	8002896 <xQueueGenericCreate>
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <osSemaphoreCreate+0x56>
 800254e:	2300      	movs	r3, #0
 8002550:	2200      	movs	r2, #0
 8002552:	2100      	movs	r1, #0
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fa2b 	bl	80029b0 <xQueueGenericSend>
      return sema;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	e000      	b.n	8002560 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800255e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f103 0208 	add.w	r2, r3, #8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f04f 32ff 	mov.w	r2, #4294967295
 8002580:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f103 0208 	add.w	r2, r3, #8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f103 0208 	add.w	r2, r3, #8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025be:	b480      	push	{r7}
 80025c0:	b085      	sub	sp, #20
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	601a      	str	r2, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261a:	d103      	bne.n	8002624 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	e00c      	b.n	800263e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3308      	adds	r3, #8
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	e002      	b.n	8002632 <vListInsert+0x2e>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	429a      	cmp	r2, r3
 800263c:	d2f6      	bcs.n	800262c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6892      	ldr	r2, [r2, #8]
 800268a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6852      	ldr	r2, [r2, #4]
 8002694:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	d103      	bne.n	80026a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	1e5a      	subs	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
	...

080026c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026f4:	f001 ff02 	bl	80044fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002700:	68f9      	ldr	r1, [r7, #12]
 8002702:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	441a      	add	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002724:	3b01      	subs	r3, #1
 8002726:	68f9      	ldr	r1, [r7, #12]
 8002728:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	441a      	add	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	22ff      	movs	r2, #255	@ 0xff
 8002738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	22ff      	movs	r2, #255	@ 0xff
 8002740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d114      	bne.n	8002774 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d01a      	beq.n	8002788 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3310      	adds	r3, #16
 8002756:	4618      	mov	r0, r3
 8002758:	f001 f9fa 	bl	8003b50 <xTaskRemoveFromEventList>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d012      	beq.n	8002788 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002762:	4b0d      	ldr	r3, [pc, #52]	@ (8002798 <xQueueGenericReset+0xd0>)
 8002764:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	e009      	b.n	8002788 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3310      	adds	r3, #16
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fef5 	bl	8002568 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	3324      	adds	r3, #36	@ 0x24
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fef0 	bl	8002568 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002788:	f001 fee8 	bl	800455c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800278c:	2301      	movs	r3, #1
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	e000ed04 	.word	0xe000ed04

0800279c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08e      	sub	sp, #56	@ 0x38
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80027b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b4:	f383 8811 	msr	BASEPRI, r3
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10b      	bne.n	80027e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80027ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	e7fd      	b.n	80027e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <xQueueGenericCreateStatic+0x56>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <xQueueGenericCreateStatic+0x5a>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <xQueueGenericCreateStatic+0x5c>
 80027f6:	2300      	movs	r3, #0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10b      	bne.n	8002814 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80027fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	623b      	str	r3, [r7, #32]
}
 800280e:	bf00      	nop
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <xQueueGenericCreateStatic+0x84>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <xQueueGenericCreateStatic+0x88>
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <xQueueGenericCreateStatic+0x8a>
 8002824:	2300      	movs	r3, #0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10b      	bne.n	8002842 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800282a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800282e:	f383 8811 	msr	BASEPRI, r3
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	61fb      	str	r3, [r7, #28]
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	e7fd      	b.n	800283e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002842:	2348      	movs	r3, #72	@ 0x48
 8002844:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b48      	cmp	r3, #72	@ 0x48
 800284a:	d00b      	beq.n	8002864 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	61bb      	str	r3, [r7, #24]
}
 800285e:	bf00      	nop
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002864:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800286a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00d      	beq.n	800288c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002878:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800287c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f840 	bl	800290c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800288c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800288e:	4618      	mov	r0, r3
 8002890:	3730      	adds	r7, #48	@ 0x30
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002896:	b580      	push	{r7, lr}
 8002898:	b08a      	sub	sp, #40	@ 0x28
 800289a:	af02      	add	r7, sp, #8
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10b      	bne.n	80028c2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80028aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	613b      	str	r3, [r7, #16]
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	e7fd      	b.n	80028be <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	3348      	adds	r3, #72	@ 0x48
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 ff15 	bl	8004700 <pvPortMalloc>
 80028d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d011      	beq.n	8002902 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3348      	adds	r3, #72	@ 0x48
 80028e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028f0:	79fa      	ldrb	r2, [r7, #7]
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	4613      	mov	r3, r2
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	68b9      	ldr	r1, [r7, #8]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f805 	bl	800290c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002902:	69bb      	ldr	r3, [r7, #24]
	}
 8002904:	4618      	mov	r0, r3
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d103      	bne.n	8002928 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e002      	b.n	800292e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800293a:	2101      	movs	r1, #1
 800293c:	69b8      	ldr	r0, [r7, #24]
 800293e:	f7ff fec3 	bl	80026c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00e      	beq.n	8002976 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800296a:	2300      	movs	r3, #0
 800296c:	2200      	movs	r2, #0
 800296e:	2100      	movs	r1, #0
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f81d 	bl	80029b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002988:	2301      	movs	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	461a      	mov	r2, r3
 8002994:	6939      	ldr	r1, [r7, #16]
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f7ff ff7d 	bl	8002896 <xQueueGenericCreate>
 800299c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff ffd3 	bl	800294a <prvInitialiseMutex>

		return xNewQueue;
 80029a4:	68fb      	ldr	r3, [r7, #12]
	}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08e      	sub	sp, #56	@ 0x38
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029be:	2300      	movs	r3, #0
 80029c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80029c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10b      	bne.n	80029e4 <xQueueGenericSend+0x34>
	__asm volatile
 80029cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d0:	f383 8811 	msr	BASEPRI, r3
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80029de:	bf00      	nop
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <xQueueGenericSend+0x42>
 80029ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <xQueueGenericSend+0x46>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <xQueueGenericSend+0x48>
 80029f6:	2300      	movs	r3, #0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10b      	bne.n	8002a14 <xQueueGenericSend+0x64>
	__asm volatile
 80029fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a0e:	bf00      	nop
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d103      	bne.n	8002a22 <xQueueGenericSend+0x72>
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <xQueueGenericSend+0x76>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <xQueueGenericSend+0x78>
 8002a26:	2300      	movs	r3, #0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <xQueueGenericSend+0x94>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	623b      	str	r3, [r7, #32]
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a44:	f001 fa44 	bl	8003ed0 <xTaskGetSchedulerState>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <xQueueGenericSend+0xa4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <xQueueGenericSend+0xa8>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <xQueueGenericSend+0xaa>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10b      	bne.n	8002a76 <xQueueGenericSend+0xc6>
	__asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	61fb      	str	r3, [r7, #28]
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	e7fd      	b.n	8002a72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a76:	f001 fd41 	bl	80044fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d302      	bcc.n	8002a8c <xQueueGenericSend+0xdc>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d129      	bne.n	8002ae0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a92:	f000 fb36 	bl	8003102 <prvCopyDataToQueue>
 8002a96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d010      	beq.n	8002ac2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa2:	3324      	adds	r3, #36	@ 0x24
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f001 f853 	bl	8003b50 <xTaskRemoveFromEventList>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb0 <xQueueGenericSend+0x200>)
 8002ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	e00a      	b.n	8002ad8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ac8:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <xQueueGenericSend+0x200>)
 8002aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ad8:	f001 fd40 	bl	800455c <vPortExitCritical>
				return pdPASS;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e063      	b.n	8002ba8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ae6:	f001 fd39 	bl	800455c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e05c      	b.n	8002ba8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 f88d 	bl	8003c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002afe:	2301      	movs	r3, #1
 8002b00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b02:	f001 fd2b 	bl	800455c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b06:	f000 fe3b 	bl	8003780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b0a:	f001 fcf7 	bl	80044fc <vPortEnterCritical>
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b14:	b25b      	sxtb	r3, r3
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1a:	d103      	bne.n	8002b24 <xQueueGenericSend+0x174>
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b2a:	b25b      	sxtb	r3, r3
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d103      	bne.n	8002b3a <xQueueGenericSend+0x18a>
 8002b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b3a:	f001 fd0f 	bl	800455c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b3e:	1d3a      	adds	r2, r7, #4
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 f87c 	bl	8003c44 <xTaskCheckForTimeOut>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d124      	bne.n	8002b9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b54:	f000 fbcd 	bl	80032f2 <prvIsQueueFull>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d018      	beq.n	8002b90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b60:	3310      	adds	r3, #16
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 ffcc 	bl	8003b04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b6e:	f000 fb58 	bl	8003222 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b72:	f000 fe13 	bl	800379c <xTaskResumeAll>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f47f af7c 	bne.w	8002a76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb0 <xQueueGenericSend+0x200>)
 8002b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	e772      	b.n	8002a76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b92:	f000 fb46 	bl	8003222 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b96:	f000 fe01 	bl	800379c <xTaskResumeAll>
 8002b9a:	e76c      	b.n	8002a76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b9e:	f000 fb40 	bl	8003222 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ba2:	f000 fdfb 	bl	800379c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ba6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3738      	adds	r7, #56	@ 0x38
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	e000ed04 	.word	0xe000ed04

08002bb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b090      	sub	sp, #64	@ 0x40
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	e7fd      	b.n	8002be0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <xQueueGenericSendFromISR+0x3e>
 8002bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <xQueueGenericSendFromISR+0x42>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <xQueueGenericSendFromISR+0x44>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10b      	bne.n	8002c14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d103      	bne.n	8002c22 <xQueueGenericSendFromISR+0x6e>
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <xQueueGenericSendFromISR+0x72>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <xQueueGenericSendFromISR+0x74>
 8002c26:	2300      	movs	r3, #0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10b      	bne.n	8002c44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	623b      	str	r3, [r7, #32]
}
 8002c3e:	bf00      	nop
 8002c40:	bf00      	nop
 8002c42:	e7fd      	b.n	8002c40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c44:	f001 fd1c 	bl	8004680 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c48:	f3ef 8211 	mrs	r2, BASEPRI
 8002c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	61fa      	str	r2, [r7, #28]
 8002c5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d302      	bcc.n	8002c76 <xQueueGenericSendFromISR+0xc2>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d12f      	bne.n	8002cd6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002c8c:	f000 fa39 	bl	8003102 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d112      	bne.n	8002cc0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca4:	3324      	adds	r3, #36	@ 0x24
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 ff52 	bl	8003b50 <xTaskRemoveFromEventList>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00e      	beq.n	8002cd0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00b      	beq.n	8002cd0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e007      	b.n	8002cd0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	b25a      	sxtb	r2, r3
 8002cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002cd4:	e001      	b.n	8002cda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cdc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ce4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3740      	adds	r7, #64	@ 0x40
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08c      	sub	sp, #48	@ 0x30
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10b      	bne.n	8002d22 <xQueueReceive+0x32>
	__asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	623b      	str	r3, [r7, #32]
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	e7fd      	b.n	8002d1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d103      	bne.n	8002d30 <xQueueReceive+0x40>
 8002d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <xQueueReceive+0x44>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <xQueueReceive+0x46>
 8002d34:	2300      	movs	r3, #0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10b      	bne.n	8002d52 <xQueueReceive+0x62>
	__asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	61fb      	str	r3, [r7, #28]
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	e7fd      	b.n	8002d4e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d52:	f001 f8bd 	bl	8003ed0 <xTaskGetSchedulerState>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d102      	bne.n	8002d62 <xQueueReceive+0x72>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <xQueueReceive+0x76>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <xQueueReceive+0x78>
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <xQueueReceive+0x94>
	__asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	61bb      	str	r3, [r7, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d84:	f001 fbba 	bl	80044fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01f      	beq.n	8002dd4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d98:	f000 fa1d 	bl	80031d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	1e5a      	subs	r2, r3, #1
 8002da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00f      	beq.n	8002dcc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dae:	3310      	adds	r3, #16
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fecd 	bl	8003b50 <xTaskRemoveFromEventList>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002dbc:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb0 <xQueueReceive+0x1c0>)
 8002dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002dcc:	f001 fbc6 	bl	800455c <vPortExitCritical>
				return pdPASS;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e069      	b.n	8002ea8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dda:	f001 fbbf 	bl	800455c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e062      	b.n	8002ea8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d106      	bne.n	8002df6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002de8:	f107 0310 	add.w	r3, r7, #16
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 ff13 	bl	8003c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002df2:	2301      	movs	r3, #1
 8002df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002df6:	f001 fbb1 	bl	800455c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dfa:	f000 fcc1 	bl	8003780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dfe:	f001 fb7d 	bl	80044fc <vPortEnterCritical>
 8002e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e08:	b25b      	sxtb	r3, r3
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0e:	d103      	bne.n	8002e18 <xQueueReceive+0x128>
 8002e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e1e:	b25b      	sxtb	r3, r3
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d103      	bne.n	8002e2e <xQueueReceive+0x13e>
 8002e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e2e:	f001 fb95 	bl	800455c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e32:	1d3a      	adds	r2, r7, #4
 8002e34:	f107 0310 	add.w	r3, r7, #16
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 ff02 	bl	8003c44 <xTaskCheckForTimeOut>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d123      	bne.n	8002e8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e48:	f000 fa3d 	bl	80032c6 <prvIsQueueEmpty>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d017      	beq.n	8002e82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e54:	3324      	adds	r3, #36	@ 0x24
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fe52 	bl	8003b04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e62:	f000 f9de 	bl	8003222 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e66:	f000 fc99 	bl	800379c <xTaskResumeAll>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d189      	bne.n	8002d84 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002e70:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb0 <xQueueReceive+0x1c0>)
 8002e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	e780      	b.n	8002d84 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e84:	f000 f9cd 	bl	8003222 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e88:	f000 fc88 	bl	800379c <xTaskResumeAll>
 8002e8c:	e77a      	b.n	8002d84 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e90:	f000 f9c7 	bl	8003222 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e94:	f000 fc82 	bl	800379c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e9a:	f000 fa14 	bl	80032c6 <prvIsQueueEmpty>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f43f af6f 	beq.w	8002d84 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ea6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3730      	adds	r7, #48	@ 0x30
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	e000ed04 	.word	0xe000ed04

08002eb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08e      	sub	sp, #56	@ 0x38
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10b      	bne.n	8002ee8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	623b      	str	r3, [r7, #32]
}
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
 8002ee6:	e7fd      	b.n	8002ee4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00b      	beq.n	8002f08 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	61fb      	str	r3, [r7, #28]
}
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f08:	f000 ffe2 	bl	8003ed0 <xTaskGetSchedulerState>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <xQueueSemaphoreTake+0x64>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <xQueueSemaphoreTake+0x68>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <xQueueSemaphoreTake+0x6a>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10b      	bne.n	8002f3a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	61bb      	str	r3, [r7, #24]
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	e7fd      	b.n	8002f36 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f3a:	f001 fadf 	bl	80044fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f42:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d024      	beq.n	8002f94 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4c:	1e5a      	subs	r2, r3, #1
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f50:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d104      	bne.n	8002f64 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002f5a:	f001 f965 	bl	8004228 <pvTaskIncrementMutexHeldCount>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f62:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00f      	beq.n	8002f8c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6e:	3310      	adds	r3, #16
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fded 	bl	8003b50 <xTaskRemoveFromEventList>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d007      	beq.n	8002f8c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f7c:	4b54      	ldr	r3, [pc, #336]	@ (80030d0 <xQueueSemaphoreTake+0x21c>)
 8002f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f8c:	f001 fae6 	bl	800455c <vPortExitCritical>
				return pdPASS;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e098      	b.n	80030c6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d112      	bne.n	8002fc0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	617b      	str	r3, [r7, #20]
}
 8002fb2:	bf00      	nop
 8002fb4:	bf00      	nop
 8002fb6:	e7fd      	b.n	8002fb4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002fb8:	f001 fad0 	bl	800455c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e082      	b.n	80030c6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fc6:	f107 030c 	add.w	r3, r7, #12
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fe24 	bl	8003c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fd4:	f001 fac2 	bl	800455c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fd8:	f000 fbd2 	bl	8003780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fdc:	f001 fa8e 	bl	80044fc <vPortEnterCritical>
 8002fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fe6:	b25b      	sxtb	r3, r3
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d103      	bne.n	8002ff6 <xQueueSemaphoreTake+0x142>
 8002fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ffc:	b25b      	sxtb	r3, r3
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003002:	d103      	bne.n	800300c <xQueueSemaphoreTake+0x158>
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800300c:	f001 faa6 	bl	800455c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003010:	463a      	mov	r2, r7
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fe13 	bl	8003c44 <xTaskCheckForTimeOut>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d132      	bne.n	800308a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003024:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003026:	f000 f94e 	bl	80032c6 <prvIsQueueEmpty>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d026      	beq.n	800307e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003038:	f001 fa60 	bl	80044fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800303c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4618      	mov	r0, r3
 8003042:	f000 ff63 	bl	8003f0c <xTaskPriorityInherit>
 8003046:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003048:	f001 fa88 	bl	800455c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800304c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304e:	3324      	adds	r3, #36	@ 0x24
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fd55 	bl	8003b04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800305a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800305c:	f000 f8e1 	bl	8003222 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003060:	f000 fb9c 	bl	800379c <xTaskResumeAll>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	f47f af67 	bne.w	8002f3a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800306c:	4b18      	ldr	r3, [pc, #96]	@ (80030d0 <xQueueSemaphoreTake+0x21c>)
 800306e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	e75d      	b.n	8002f3a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800307e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003080:	f000 f8cf 	bl	8003222 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003084:	f000 fb8a 	bl	800379c <xTaskResumeAll>
 8003088:	e757      	b.n	8002f3a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800308a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800308c:	f000 f8c9 	bl	8003222 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003090:	f000 fb84 	bl	800379c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003094:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003096:	f000 f916 	bl	80032c6 <prvIsQueueEmpty>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	f43f af4c 	beq.w	8002f3a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80030a8:	f001 fa28 	bl	80044fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80030ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030ae:	f000 f811 	bl	80030d4 <prvGetDisinheritPriorityAfterTimeout>
 80030b2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80030b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030ba:	4618      	mov	r0, r3
 80030bc:	f001 f824 	bl	8004108 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80030c0:	f001 fa4c 	bl	800455c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3738      	adds	r7, #56	@ 0x38
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	e000ed04 	.word	0xe000ed04

080030d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f1c3 0307 	rsb	r3, r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	e001      	b.n	80030f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80030f6:	68fb      	ldr	r3, [r7, #12]
	}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b086      	sub	sp, #24
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003116:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10d      	bne.n	800313c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d14d      	bne.n	80031c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 ff63 	bl	8003ff8 <xTaskPriorityDisinherit>
 8003132:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	e043      	b.n	80031c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d119      	bne.n	8003176 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6858      	ldr	r0, [r3, #4]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	461a      	mov	r2, r3
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	f001 fdc5 	bl	8004cdc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	441a      	add	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	429a      	cmp	r2, r3
 800316a:	d32b      	bcc.n	80031c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	e026      	b.n	80031c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	68d8      	ldr	r0, [r3, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	461a      	mov	r2, r3
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	f001 fdab 	bl	8004cdc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	425b      	negs	r3, r3
 8003190:	441a      	add	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d207      	bcs.n	80031b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	425b      	negs	r3, r3
 80031ac:	441a      	add	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d105      	bne.n	80031c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80031cc:	697b      	ldr	r3, [r7, #20]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d018      	beq.n	800321a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	441a      	add	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d303      	bcc.n	800320a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68d9      	ldr	r1, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	461a      	mov	r2, r3
 8003214:	6838      	ldr	r0, [r7, #0]
 8003216:	f001 fd61 	bl	8004cdc <memcpy>
	}
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800322a:	f001 f967 	bl	80044fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003234:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003236:	e011      	b.n	800325c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	2b00      	cmp	r3, #0
 800323e:	d012      	beq.n	8003266 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3324      	adds	r3, #36	@ 0x24
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fc83 	bl	8003b50 <xTaskRemoveFromEventList>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003250:	f000 fd5c 	bl	8003d0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	3b01      	subs	r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800325c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003260:	2b00      	cmp	r3, #0
 8003262:	dce9      	bgt.n	8003238 <prvUnlockQueue+0x16>
 8003264:	e000      	b.n	8003268 <prvUnlockQueue+0x46>
					break;
 8003266:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	22ff      	movs	r2, #255	@ 0xff
 800326c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003270:	f001 f974 	bl	800455c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003274:	f001 f942 	bl	80044fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800327e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003280:	e011      	b.n	80032a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d012      	beq.n	80032b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3310      	adds	r3, #16
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fc5e 	bl	8003b50 <xTaskRemoveFromEventList>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800329a:	f000 fd37 	bl	8003d0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800329e:	7bbb      	ldrb	r3, [r7, #14]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	dce9      	bgt.n	8003282 <prvUnlockQueue+0x60>
 80032ae:	e000      	b.n	80032b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	22ff      	movs	r2, #255	@ 0xff
 80032b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80032ba:	f001 f94f 	bl	800455c <vPortExitCritical>
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032ce:	f001 f915 	bl	80044fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032da:	2301      	movs	r3, #1
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	e001      	b.n	80032e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032e4:	f001 f93a 	bl	800455c <vPortExitCritical>

	return xReturn;
 80032e8:	68fb      	ldr	r3, [r7, #12]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032fa:	f001 f8ff 	bl	80044fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003306:	429a      	cmp	r2, r3
 8003308:	d102      	bne.n	8003310 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800330a:	2301      	movs	r3, #1
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	e001      	b.n	8003314 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003314:	f001 f922 	bl	800455c <vPortExitCritical>

	return xReturn;
 8003318:	68fb      	ldr	r3, [r7, #12]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003322:	b580      	push	{r7, lr}
 8003324:	b08e      	sub	sp, #56	@ 0x38
 8003326:	af04      	add	r7, sp, #16
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10b      	bne.n	800334e <xTaskCreateStatic+0x2c>
	__asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	623b      	str	r3, [r7, #32]
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	e7fd      	b.n	800334a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800334e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10b      	bne.n	800336c <xTaskCreateStatic+0x4a>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	61fb      	str	r3, [r7, #28]
}
 8003366:	bf00      	nop
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800336c:	2354      	movs	r3, #84	@ 0x54
 800336e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2b54      	cmp	r3, #84	@ 0x54
 8003374:	d00b      	beq.n	800338e <xTaskCreateStatic+0x6c>
	__asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	61bb      	str	r3, [r7, #24]
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	e7fd      	b.n	800338a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800338e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01e      	beq.n	80033d4 <xTaskCreateStatic+0xb2>
 8003396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01b      	beq.n	80033d4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800339c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033a4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033ae:	2300      	movs	r3, #0
 80033b0:	9303      	str	r3, [sp, #12]
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	9302      	str	r3, [sp, #8]
 80033b6:	f107 0314 	add.w	r3, r7, #20
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f850 	bl	800346c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033ce:	f000 f8d5 	bl	800357c <prvAddNewTaskToReadyList>
 80033d2:	e001      	b.n	80033d8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033d8:	697b      	ldr	r3, [r7, #20]
	}
 80033da:	4618      	mov	r0, r3
 80033dc:	3728      	adds	r7, #40	@ 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b08c      	sub	sp, #48	@ 0x30
 80033e6:	af04      	add	r7, sp, #16
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	603b      	str	r3, [r7, #0]
 80033ee:	4613      	mov	r3, r2
 80033f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 f982 	bl	8004700 <pvPortMalloc>
 80033fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003404:	2054      	movs	r0, #84	@ 0x54
 8003406:	f001 f97b 	bl	8004700 <pvPortMalloc>
 800340a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	631a      	str	r2, [r3, #48]	@ 0x30
 8003418:	e005      	b.n	8003426 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800341a:	6978      	ldr	r0, [r7, #20]
 800341c:	f001 fa3e 	bl	800489c <vPortFree>
 8003420:	e001      	b.n	8003426 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d017      	beq.n	800345c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003434:	88fa      	ldrh	r2, [r7, #6]
 8003436:	2300      	movs	r3, #0
 8003438:	9303      	str	r3, [sp, #12]
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	9302      	str	r3, [sp, #8]
 800343e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f80e 	bl	800346c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003450:	69f8      	ldr	r0, [r7, #28]
 8003452:	f000 f893 	bl	800357c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003456:	2301      	movs	r3, #1
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	e002      	b.n	8003462 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800345c:	f04f 33ff 	mov.w	r3, #4294967295
 8003460:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003462:	69bb      	ldr	r3, [r7, #24]
	}
 8003464:	4618      	mov	r0, r3
 8003466:	3720      	adds	r7, #32
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800347a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003484:	3b01      	subs	r3, #1
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f023 0307 	bic.w	r3, r3, #7
 8003492:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00b      	beq.n	80034b6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	617b      	str	r3, [r7, #20]
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	e7fd      	b.n	80034b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01f      	beq.n	80034fc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	e012      	b.n	80034e8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	4413      	add	r3, r2
 80034c8:	7819      	ldrb	r1, [r3, #0]
 80034ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	4413      	add	r3, r2
 80034d0:	3334      	adds	r3, #52	@ 0x34
 80034d2:	460a      	mov	r2, r1
 80034d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4413      	add	r3, r2
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3301      	adds	r3, #1
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b0f      	cmp	r3, #15
 80034ec:	d9e9      	bls.n	80034c2 <prvInitialiseNewTask+0x56>
 80034ee:	e000      	b.n	80034f2 <prvInitialiseNewTask+0x86>
			{
				break;
 80034f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034fa:	e003      	b.n	8003504 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003506:	2b06      	cmp	r3, #6
 8003508:	d901      	bls.n	800350e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800350a:	2306      	movs	r3, #6
 800350c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003512:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003518:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800351a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351c:	2200      	movs	r2, #0
 800351e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003522:	3304      	adds	r3, #4
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff f83e 	bl	80025a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800352a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352c:	3318      	adds	r3, #24
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f839 	bl	80025a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003538:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800353a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353c:	f1c3 0207 	rsb	r2, r3, #7
 8003540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003542:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	2200      	movs	r2, #0
 800354e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	68f9      	ldr	r1, [r7, #12]
 800355c:	69b8      	ldr	r0, [r7, #24]
 800355e:	f000 fedd 	bl	800431c <pxPortInitialiseStack>
 8003562:	4602      	mov	r2, r0
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800356e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003572:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003574:	bf00      	nop
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003584:	f000 ffba 	bl	80044fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003588:	4b2a      	ldr	r3, [pc, #168]	@ (8003634 <prvAddNewTaskToReadyList+0xb8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	4a29      	ldr	r2, [pc, #164]	@ (8003634 <prvAddNewTaskToReadyList+0xb8>)
 8003590:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003592:	4b29      	ldr	r3, [pc, #164]	@ (8003638 <prvAddNewTaskToReadyList+0xbc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800359a:	4a27      	ldr	r2, [pc, #156]	@ (8003638 <prvAddNewTaskToReadyList+0xbc>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035a0:	4b24      	ldr	r3, [pc, #144]	@ (8003634 <prvAddNewTaskToReadyList+0xb8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d110      	bne.n	80035ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035a8:	f000 fbd4 	bl	8003d54 <prvInitialiseTaskLists>
 80035ac:	e00d      	b.n	80035ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035ae:	4b23      	ldr	r3, [pc, #140]	@ (800363c <prvAddNewTaskToReadyList+0xc0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035b6:	4b20      	ldr	r3, [pc, #128]	@ (8003638 <prvAddNewTaskToReadyList+0xbc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d802      	bhi.n	80035ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003638 <prvAddNewTaskToReadyList+0xbc>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003640 <prvAddNewTaskToReadyList+0xc4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3301      	adds	r3, #1
 80035d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003640 <prvAddNewTaskToReadyList+0xc4>)
 80035d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	2201      	movs	r2, #1
 80035da:	409a      	lsls	r2, r3
 80035dc:	4b19      	ldr	r3, [pc, #100]	@ (8003644 <prvAddNewTaskToReadyList+0xc8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	4a18      	ldr	r2, [pc, #96]	@ (8003644 <prvAddNewTaskToReadyList+0xc8>)
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4a15      	ldr	r2, [pc, #84]	@ (8003648 <prvAddNewTaskToReadyList+0xcc>)
 80035f4:	441a      	add	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3304      	adds	r3, #4
 80035fa:	4619      	mov	r1, r3
 80035fc:	4610      	mov	r0, r2
 80035fe:	f7fe ffde 	bl	80025be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003602:	f000 ffab 	bl	800455c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003606:	4b0d      	ldr	r3, [pc, #52]	@ (800363c <prvAddNewTaskToReadyList+0xc0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00e      	beq.n	800362c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800360e:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <prvAddNewTaskToReadyList+0xbc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003618:	429a      	cmp	r2, r3
 800361a:	d207      	bcs.n	800362c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800361c:	4b0b      	ldr	r3, [pc, #44]	@ (800364c <prvAddNewTaskToReadyList+0xd0>)
 800361e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000498 	.word	0x20000498
 8003638:	20000398 	.word	0x20000398
 800363c:	200004a4 	.word	0x200004a4
 8003640:	200004b4 	.word	0x200004b4
 8003644:	200004a0 	.word	0x200004a0
 8003648:	2000039c 	.word	0x2000039c
 800364c:	e000ed04 	.word	0xe000ed04

08003650 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d018      	beq.n	8003694 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003662:	4b14      	ldr	r3, [pc, #80]	@ (80036b4 <vTaskDelay+0x64>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <vTaskDelay+0x32>
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	60bb      	str	r3, [r7, #8]
}
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	e7fd      	b.n	800367e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003682:	f000 f87d 	bl	8003780 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003686:	2100      	movs	r1, #0
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fde1 	bl	8004250 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800368e:	f000 f885 	bl	800379c <xTaskResumeAll>
 8003692:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d107      	bne.n	80036aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800369a:	4b07      	ldr	r3, [pc, #28]	@ (80036b8 <vTaskDelay+0x68>)
 800369c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200004c0 	.word	0x200004c0
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	@ 0x28
 80036c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036ca:	463a      	mov	r2, r7
 80036cc:	1d39      	adds	r1, r7, #4
 80036ce:	f107 0308 	add.w	r3, r7, #8
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fc fd44 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036d8:	6839      	ldr	r1, [r7, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	9202      	str	r2, [sp, #8]
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	2300      	movs	r3, #0
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	2300      	movs	r3, #0
 80036e8:	460a      	mov	r2, r1
 80036ea:	491f      	ldr	r1, [pc, #124]	@ (8003768 <vTaskStartScheduler+0xac>)
 80036ec:	481f      	ldr	r0, [pc, #124]	@ (800376c <vTaskStartScheduler+0xb0>)
 80036ee:	f7ff fe18 	bl	8003322 <xTaskCreateStatic>
 80036f2:	4603      	mov	r3, r0
 80036f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003770 <vTaskStartScheduler+0xb4>)
 80036f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <vTaskStartScheduler+0xb4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003700:	2301      	movs	r3, #1
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e001      	b.n	800370a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d116      	bne.n	800373e <vTaskStartScheduler+0x82>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	613b      	str	r3, [r7, #16]
}
 8003722:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003724:	4b13      	ldr	r3, [pc, #76]	@ (8003774 <vTaskStartScheduler+0xb8>)
 8003726:	f04f 32ff 	mov.w	r2, #4294967295
 800372a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800372c:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <vTaskStartScheduler+0xbc>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003732:	4b12      	ldr	r3, [pc, #72]	@ (800377c <vTaskStartScheduler+0xc0>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003738:	f000 fe6e 	bl	8004418 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800373c:	e00f      	b.n	800375e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d10b      	bne.n	800375e <vTaskStartScheduler+0xa2>
	__asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	60fb      	str	r3, [r7, #12]
}
 8003758:	bf00      	nop
 800375a:	bf00      	nop
 800375c:	e7fd      	b.n	800375a <vTaskStartScheduler+0x9e>
}
 800375e:	bf00      	nop
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	08005898 	.word	0x08005898
 800376c:	08003d25 	.word	0x08003d25
 8003770:	200004bc 	.word	0x200004bc
 8003774:	200004b8 	.word	0x200004b8
 8003778:	200004a4 	.word	0x200004a4
 800377c:	2000049c 	.word	0x2000049c

08003780 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003784:	4b04      	ldr	r3, [pc, #16]	@ (8003798 <vTaskSuspendAll+0x18>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3301      	adds	r3, #1
 800378a:	4a03      	ldr	r2, [pc, #12]	@ (8003798 <vTaskSuspendAll+0x18>)
 800378c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	200004c0 	.word	0x200004c0

0800379c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037aa:	4b42      	ldr	r3, [pc, #264]	@ (80038b4 <xTaskResumeAll+0x118>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <xTaskResumeAll+0x2e>
	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	603b      	str	r3, [r7, #0]
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	e7fd      	b.n	80037c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037ca:	f000 fe97 	bl	80044fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037ce:	4b39      	ldr	r3, [pc, #228]	@ (80038b4 <xTaskResumeAll+0x118>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	4a37      	ldr	r2, [pc, #220]	@ (80038b4 <xTaskResumeAll+0x118>)
 80037d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037d8:	4b36      	ldr	r3, [pc, #216]	@ (80038b4 <xTaskResumeAll+0x118>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d161      	bne.n	80038a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037e0:	4b35      	ldr	r3, [pc, #212]	@ (80038b8 <xTaskResumeAll+0x11c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d05d      	beq.n	80038a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037e8:	e02e      	b.n	8003848 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ea:	4b34      	ldr	r3, [pc, #208]	@ (80038bc <xTaskResumeAll+0x120>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3318      	adds	r3, #24
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe ff3c 	bl	8002674 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3304      	adds	r3, #4
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe ff37 	bl	8002674 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380a:	2201      	movs	r2, #1
 800380c:	409a      	lsls	r2, r3
 800380e:	4b2c      	ldr	r3, [pc, #176]	@ (80038c0 <xTaskResumeAll+0x124>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	4a2a      	ldr	r2, [pc, #168]	@ (80038c0 <xTaskResumeAll+0x124>)
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4a27      	ldr	r2, [pc, #156]	@ (80038c4 <xTaskResumeAll+0x128>)
 8003826:	441a      	add	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3304      	adds	r3, #4
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f7fe fec5 	bl	80025be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003838:	4b23      	ldr	r3, [pc, #140]	@ (80038c8 <xTaskResumeAll+0x12c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003842:	4b22      	ldr	r3, [pc, #136]	@ (80038cc <xTaskResumeAll+0x130>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003848:	4b1c      	ldr	r3, [pc, #112]	@ (80038bc <xTaskResumeAll+0x120>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1cc      	bne.n	80037ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003856:	f000 fb1b 	bl	8003e90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800385a:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <xTaskResumeAll+0x134>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d010      	beq.n	8003888 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003866:	f000 f837 	bl	80038d8 <xTaskIncrementTick>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003870:	4b16      	ldr	r3, [pc, #88]	@ (80038cc <xTaskResumeAll+0x130>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3b01      	subs	r3, #1
 800387a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f1      	bne.n	8003866 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003882:	4b13      	ldr	r3, [pc, #76]	@ (80038d0 <xTaskResumeAll+0x134>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003888:	4b10      	ldr	r3, [pc, #64]	@ (80038cc <xTaskResumeAll+0x130>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d009      	beq.n	80038a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003894:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <xTaskResumeAll+0x138>)
 8003896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038a4:	f000 fe5a 	bl	800455c <vPortExitCritical>

	return xAlreadyYielded;
 80038a8:	68bb      	ldr	r3, [r7, #8]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	200004c0 	.word	0x200004c0
 80038b8:	20000498 	.word	0x20000498
 80038bc:	20000458 	.word	0x20000458
 80038c0:	200004a0 	.word	0x200004a0
 80038c4:	2000039c 	.word	0x2000039c
 80038c8:	20000398 	.word	0x20000398
 80038cc:	200004ac 	.word	0x200004ac
 80038d0:	200004a8 	.word	0x200004a8
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038e2:	4b4f      	ldr	r3, [pc, #316]	@ (8003a20 <xTaskIncrementTick+0x148>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f040 808f 	bne.w	8003a0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003a24 <xTaskIncrementTick+0x14c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3301      	adds	r3, #1
 80038f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003a24 <xTaskIncrementTick+0x14c>)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d121      	bne.n	8003944 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003900:	4b49      	ldr	r3, [pc, #292]	@ (8003a28 <xTaskIncrementTick+0x150>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <xTaskIncrementTick+0x4a>
	__asm volatile
 800390a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	603b      	str	r3, [r7, #0]
}
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	e7fd      	b.n	800391e <xTaskIncrementTick+0x46>
 8003922:	4b41      	ldr	r3, [pc, #260]	@ (8003a28 <xTaskIncrementTick+0x150>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	4b40      	ldr	r3, [pc, #256]	@ (8003a2c <xTaskIncrementTick+0x154>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a28 <xTaskIncrementTick+0x150>)
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4a3e      	ldr	r2, [pc, #248]	@ (8003a2c <xTaskIncrementTick+0x154>)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b3e      	ldr	r3, [pc, #248]	@ (8003a30 <xTaskIncrementTick+0x158>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a30 <xTaskIncrementTick+0x158>)
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	f000 faa6 	bl	8003e90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003944:	4b3b      	ldr	r3, [pc, #236]	@ (8003a34 <xTaskIncrementTick+0x15c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	429a      	cmp	r2, r3
 800394c:	d348      	bcc.n	80039e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800394e:	4b36      	ldr	r3, [pc, #216]	@ (8003a28 <xTaskIncrementTick+0x150>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003958:	4b36      	ldr	r3, [pc, #216]	@ (8003a34 <xTaskIncrementTick+0x15c>)
 800395a:	f04f 32ff 	mov.w	r2, #4294967295
 800395e:	601a      	str	r2, [r3, #0]
					break;
 8003960:	e03e      	b.n	80039e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003962:	4b31      	ldr	r3, [pc, #196]	@ (8003a28 <xTaskIncrementTick+0x150>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	d203      	bcs.n	8003982 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800397a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a34 <xTaskIncrementTick+0x15c>)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003980:	e02e      	b.n	80039e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3304      	adds	r3, #4
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fe74 	bl	8002674 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	3318      	adds	r3, #24
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fe6b 	bl	8002674 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a2:	2201      	movs	r2, #1
 80039a4:	409a      	lsls	r2, r3
 80039a6:	4b24      	ldr	r3, [pc, #144]	@ (8003a38 <xTaskIncrementTick+0x160>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	4a22      	ldr	r2, [pc, #136]	@ (8003a38 <xTaskIncrementTick+0x160>)
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a3c <xTaskIncrementTick+0x164>)
 80039be:	441a      	add	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	3304      	adds	r3, #4
 80039c4:	4619      	mov	r1, r3
 80039c6:	4610      	mov	r0, r2
 80039c8:	f7fe fdf9 	bl	80025be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a40 <xTaskIncrementTick+0x168>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d3b9      	bcc.n	800394e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80039da:	2301      	movs	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039de:	e7b6      	b.n	800394e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039e0:	4b17      	ldr	r3, [pc, #92]	@ (8003a40 <xTaskIncrementTick+0x168>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e6:	4915      	ldr	r1, [pc, #84]	@ (8003a3c <xTaskIncrementTick+0x164>)
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d901      	bls.n	80039fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80039f8:	2301      	movs	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80039fc:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <xTaskIncrementTick+0x16c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003a04:	2301      	movs	r3, #1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e004      	b.n	8003a14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <xTaskIncrementTick+0x170>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	4a0d      	ldr	r2, [pc, #52]	@ (8003a48 <xTaskIncrementTick+0x170>)
 8003a12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a14:	697b      	ldr	r3, [r7, #20]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	200004c0 	.word	0x200004c0
 8003a24:	2000049c 	.word	0x2000049c
 8003a28:	20000450 	.word	0x20000450
 8003a2c:	20000454 	.word	0x20000454
 8003a30:	200004b0 	.word	0x200004b0
 8003a34:	200004b8 	.word	0x200004b8
 8003a38:	200004a0 	.word	0x200004a0
 8003a3c:	2000039c 	.word	0x2000039c
 8003a40:	20000398 	.word	0x20000398
 8003a44:	200004ac 	.word	0x200004ac
 8003a48:	200004a8 	.word	0x200004a8

08003a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a52:	4b27      	ldr	r3, [pc, #156]	@ (8003af0 <vTaskSwitchContext+0xa4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a5a:	4b26      	ldr	r3, [pc, #152]	@ (8003af4 <vTaskSwitchContext+0xa8>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a60:	e040      	b.n	8003ae4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003a62:	4b24      	ldr	r3, [pc, #144]	@ (8003af4 <vTaskSwitchContext+0xa8>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a68:	4b23      	ldr	r3, [pc, #140]	@ (8003af8 <vTaskSwitchContext+0xac>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	fab3 f383 	clz	r3, r3
 8003a74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a76:	7afb      	ldrb	r3, [r7, #11]
 8003a78:	f1c3 031f 	rsb	r3, r3, #31
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	491f      	ldr	r1, [pc, #124]	@ (8003afc <vTaskSwitchContext+0xb0>)
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10b      	bne.n	8003aaa <vTaskSwitchContext+0x5e>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	607b      	str	r3, [r7, #4]
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <vTaskSwitchContext+0x5a>
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4a11      	ldr	r2, [pc, #68]	@ (8003afc <vTaskSwitchContext+0xb0>)
 8003ab6:	4413      	add	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	3308      	adds	r3, #8
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d104      	bne.n	8003ada <vTaskSwitchContext+0x8e>
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4a07      	ldr	r2, [pc, #28]	@ (8003b00 <vTaskSwitchContext+0xb4>)
 8003ae2:	6013      	str	r3, [r2, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	200004c0 	.word	0x200004c0
 8003af4:	200004ac 	.word	0x200004ac
 8003af8:	200004a0 	.word	0x200004a0
 8003afc:	2000039c 	.word	0x2000039c
 8003b00:	20000398 	.word	0x20000398

08003b04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10b      	bne.n	8003b2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	60fb      	str	r3, [r7, #12]
}
 8003b26:	bf00      	nop
 8003b28:	bf00      	nop
 8003b2a:	e7fd      	b.n	8003b28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b2c:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <vTaskPlaceOnEventList+0x48>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3318      	adds	r3, #24
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7fe fd65 	bl	8002604 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	6838      	ldr	r0, [r7, #0]
 8003b3e:	f000 fb87 	bl	8004250 <prvAddCurrentTaskToDelayedList>
}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000398 	.word	0x20000398

08003b50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10b      	bne.n	8003b7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	60fb      	str	r3, [r7, #12]
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	e7fd      	b.n	8003b7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	3318      	adds	r3, #24
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fd76 	bl	8002674 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b88:	4b1d      	ldr	r3, [pc, #116]	@ (8003c00 <xTaskRemoveFromEventList+0xb0>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d11c      	bne.n	8003bca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fe fd6d 	bl	8002674 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	4b18      	ldr	r3, [pc, #96]	@ (8003c04 <xTaskRemoveFromEventList+0xb4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	4a16      	ldr	r2, [pc, #88]	@ (8003c04 <xTaskRemoveFromEventList+0xb4>)
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4a13      	ldr	r2, [pc, #76]	@ (8003c08 <xTaskRemoveFromEventList+0xb8>)
 8003bba:	441a      	add	r2, r3
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f7fe fcfb 	bl	80025be <vListInsertEnd>
 8003bc8:	e005      	b.n	8003bd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	3318      	adds	r3, #24
 8003bce:	4619      	mov	r1, r3
 8003bd0:	480e      	ldr	r0, [pc, #56]	@ (8003c0c <xTaskRemoveFromEventList+0xbc>)
 8003bd2:	f7fe fcf4 	bl	80025be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bda:	4b0d      	ldr	r3, [pc, #52]	@ (8003c10 <xTaskRemoveFromEventList+0xc0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d905      	bls.n	8003bf0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003be4:	2301      	movs	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003be8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <xTaskRemoveFromEventList+0xc4>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e001      	b.n	8003bf4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bf4:	697b      	ldr	r3, [r7, #20]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	200004c0 	.word	0x200004c0
 8003c04:	200004a0 	.word	0x200004a0
 8003c08:	2000039c 	.word	0x2000039c
 8003c0c:	20000458 	.word	0x20000458
 8003c10:	20000398 	.word	0x20000398
 8003c14:	200004ac 	.word	0x200004ac

08003c18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c20:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <vTaskInternalSetTimeOutState+0x24>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c28:	4b05      	ldr	r3, [pc, #20]	@ (8003c40 <vTaskInternalSetTimeOutState+0x28>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	605a      	str	r2, [r3, #4]
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	200004b0 	.word	0x200004b0
 8003c40:	2000049c 	.word	0x2000049c

08003c44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10b      	bne.n	8003c6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	613b      	str	r3, [r7, #16]
}
 8003c66:	bf00      	nop
 8003c68:	bf00      	nop
 8003c6a:	e7fd      	b.n	8003c68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10b      	bne.n	8003c8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	60fb      	str	r3, [r7, #12]
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	e7fd      	b.n	8003c86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003c8a:	f000 fc37 	bl	80044fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d04 <xTaskCheckForTimeOut+0xc0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca6:	d102      	bne.n	8003cae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	e023      	b.n	8003cf6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4b15      	ldr	r3, [pc, #84]	@ (8003d08 <xTaskCheckForTimeOut+0xc4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d007      	beq.n	8003cca <xTaskCheckForTimeOut+0x86>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d302      	bcc.n	8003cca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	e015      	b.n	8003cf6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d20b      	bcs.n	8003cec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	1ad2      	subs	r2, r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ff99 	bl	8003c18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	e004      	b.n	8003cf6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cf6:	f000 fc31 	bl	800455c <vPortExitCritical>

	return xReturn;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3720      	adds	r7, #32
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2000049c 	.word	0x2000049c
 8003d08:	200004b0 	.word	0x200004b0

08003d0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d10:	4b03      	ldr	r3, [pc, #12]	@ (8003d20 <vTaskMissedYield+0x14>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
}
 8003d16:	bf00      	nop
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	200004ac 	.word	0x200004ac

08003d24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d2c:	f000 f852 	bl	8003dd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d30:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <prvIdleTask+0x28>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d9f9      	bls.n	8003d2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d38:	4b05      	ldr	r3, [pc, #20]	@ (8003d50 <prvIdleTask+0x2c>)
 8003d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d48:	e7f0      	b.n	8003d2c <prvIdleTask+0x8>
 8003d4a:	bf00      	nop
 8003d4c:	2000039c 	.word	0x2000039c
 8003d50:	e000ed04 	.word	0xe000ed04

08003d54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	e00c      	b.n	8003d7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4a12      	ldr	r2, [pc, #72]	@ (8003db4 <prvInitialiseTaskLists+0x60>)
 8003d6c:	4413      	add	r3, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe fbfa 	bl	8002568 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3301      	adds	r3, #1
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b06      	cmp	r3, #6
 8003d7e:	d9ef      	bls.n	8003d60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d80:	480d      	ldr	r0, [pc, #52]	@ (8003db8 <prvInitialiseTaskLists+0x64>)
 8003d82:	f7fe fbf1 	bl	8002568 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d86:	480d      	ldr	r0, [pc, #52]	@ (8003dbc <prvInitialiseTaskLists+0x68>)
 8003d88:	f7fe fbee 	bl	8002568 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d8c:	480c      	ldr	r0, [pc, #48]	@ (8003dc0 <prvInitialiseTaskLists+0x6c>)
 8003d8e:	f7fe fbeb 	bl	8002568 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d92:	480c      	ldr	r0, [pc, #48]	@ (8003dc4 <prvInitialiseTaskLists+0x70>)
 8003d94:	f7fe fbe8 	bl	8002568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d98:	480b      	ldr	r0, [pc, #44]	@ (8003dc8 <prvInitialiseTaskLists+0x74>)
 8003d9a:	f7fe fbe5 	bl	8002568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <prvInitialiseTaskLists+0x78>)
 8003da0:	4a05      	ldr	r2, [pc, #20]	@ (8003db8 <prvInitialiseTaskLists+0x64>)
 8003da2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003da4:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <prvInitialiseTaskLists+0x7c>)
 8003da6:	4a05      	ldr	r2, [pc, #20]	@ (8003dbc <prvInitialiseTaskLists+0x68>)
 8003da8:	601a      	str	r2, [r3, #0]
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	2000039c 	.word	0x2000039c
 8003db8:	20000428 	.word	0x20000428
 8003dbc:	2000043c 	.word	0x2000043c
 8003dc0:	20000458 	.word	0x20000458
 8003dc4:	2000046c 	.word	0x2000046c
 8003dc8:	20000484 	.word	0x20000484
 8003dcc:	20000450 	.word	0x20000450
 8003dd0:	20000454 	.word	0x20000454

08003dd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dda:	e019      	b.n	8003e10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ddc:	f000 fb8e 	bl	80044fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003de0:	4b10      	ldr	r3, [pc, #64]	@ (8003e24 <prvCheckTasksWaitingTermination+0x50>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe fc41 	bl	8002674 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <prvCheckTasksWaitingTermination+0x54>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	4a0b      	ldr	r2, [pc, #44]	@ (8003e28 <prvCheckTasksWaitingTermination+0x54>)
 8003dfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <prvCheckTasksWaitingTermination+0x58>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	4a0a      	ldr	r2, [pc, #40]	@ (8003e2c <prvCheckTasksWaitingTermination+0x58>)
 8003e04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e06:	f000 fba9 	bl	800455c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f810 	bl	8003e30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e10:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <prvCheckTasksWaitingTermination+0x58>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e1      	bne.n	8003ddc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e18:	bf00      	nop
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	2000046c 	.word	0x2000046c
 8003e28:	20000498 	.word	0x20000498
 8003e2c:	20000480 	.word	0x20000480

08003e30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d108      	bne.n	8003e54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fd28 	bl	800489c <vPortFree>
				vPortFree( pxTCB );
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fd25 	bl	800489c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e52:	e019      	b.n	8003e88 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d103      	bne.n	8003e66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fd1c 	bl	800489c <vPortFree>
	}
 8003e64:	e010      	b.n	8003e88 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d00b      	beq.n	8003e88 <prvDeleteTCB+0x58>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	60fb      	str	r3, [r7, #12]
}
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
 8003e86:	e7fd      	b.n	8003e84 <prvDeleteTCB+0x54>
	}
 8003e88:	bf00      	nop
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e96:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec8 <prvResetNextTaskUnblockTime+0x38>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <prvResetNextTaskUnblockTime+0x3c>)
 8003ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ea8:	e008      	b.n	8003ebc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eaa:	4b07      	ldr	r3, [pc, #28]	@ (8003ec8 <prvResetNextTaskUnblockTime+0x38>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4a04      	ldr	r2, [pc, #16]	@ (8003ecc <prvResetNextTaskUnblockTime+0x3c>)
 8003eba:	6013      	str	r3, [r2, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	20000450 	.word	0x20000450
 8003ecc:	200004b8 	.word	0x200004b8

08003ed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <xTaskGetSchedulerState+0x34>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	e008      	b.n	8003ef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee4:	4b08      	ldr	r3, [pc, #32]	@ (8003f08 <xTaskGetSchedulerState+0x38>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003eec:	2302      	movs	r3, #2
 8003eee:	607b      	str	r3, [r7, #4]
 8003ef0:	e001      	b.n	8003ef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ef6:	687b      	ldr	r3, [r7, #4]
	}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	200004a4 	.word	0x200004a4
 8003f08:	200004c0 	.word	0x200004c0

08003f0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d05e      	beq.n	8003fe0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f26:	4b31      	ldr	r3, [pc, #196]	@ (8003fec <xTaskPriorityInherit+0xe0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d24e      	bcs.n	8003fce <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	db06      	blt.n	8003f46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f38:	4b2c      	ldr	r3, [pc, #176]	@ (8003fec <xTaskPriorityInherit+0xe0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	f1c3 0207 	rsb	r2, r3, #7
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6959      	ldr	r1, [r3, #20]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4a26      	ldr	r2, [pc, #152]	@ (8003ff0 <xTaskPriorityInherit+0xe4>)
 8003f58:	4413      	add	r3, r2
 8003f5a:	4299      	cmp	r1, r3
 8003f5c:	d12f      	bne.n	8003fbe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fb86 	bl	8002674 <uxListRemove>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f72:	2201      	movs	r2, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff4 <xTaskPriorityInherit+0xe8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff4 <xTaskPriorityInherit+0xe8>)
 8003f82:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f84:	4b19      	ldr	r3, [pc, #100]	@ (8003fec <xTaskPriorityInherit+0xe0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	2201      	movs	r2, #1
 8003f94:	409a      	lsls	r2, r3
 8003f96:	4b17      	ldr	r3, [pc, #92]	@ (8003ff4 <xTaskPriorityInherit+0xe8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	4a15      	ldr	r2, [pc, #84]	@ (8003ff4 <xTaskPriorityInherit+0xe8>)
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4a10      	ldr	r2, [pc, #64]	@ (8003ff0 <xTaskPriorityInherit+0xe4>)
 8003fae:	441a      	add	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f7fe fb01 	bl	80025be <vListInsertEnd>
 8003fbc:	e004      	b.n	8003fc8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <xTaskPriorityInherit+0xe0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e008      	b.n	8003fe0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fd2:	4b06      	ldr	r3, [pc, #24]	@ (8003fec <xTaskPriorityInherit+0xe0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d201      	bcs.n	8003fe0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
	}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000398 	.word	0x20000398
 8003ff0:	2000039c 	.word	0x2000039c
 8003ff4:	200004a0 	.word	0x200004a0

08003ff8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d070      	beq.n	80040f0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800400e:	4b3b      	ldr	r3, [pc, #236]	@ (80040fc <xTaskPriorityDisinherit+0x104>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	429a      	cmp	r2, r3
 8004016:	d00b      	beq.n	8004030 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60fb      	str	r3, [r7, #12]
}
 800402a:	bf00      	nop
 800402c:	bf00      	nop
 800402e:	e7fd      	b.n	800402c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10b      	bne.n	8004050 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	60bb      	str	r3, [r7, #8]
}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	e7fd      	b.n	800404c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004054:	1e5a      	subs	r2, r3, #1
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	429a      	cmp	r2, r3
 8004064:	d044      	beq.n	80040f0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800406a:	2b00      	cmp	r3, #0
 800406c:	d140      	bne.n	80040f0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	3304      	adds	r3, #4
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe fafe 	bl	8002674 <uxListRemove>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d115      	bne.n	80040aa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004082:	491f      	ldr	r1, [pc, #124]	@ (8004100 <xTaskPriorityDisinherit+0x108>)
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <xTaskPriorityDisinherit+0xb2>
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004098:	2201      	movs	r2, #1
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43da      	mvns	r2, r3
 80040a0:	4b18      	ldr	r3, [pc, #96]	@ (8004104 <xTaskPriorityDisinherit+0x10c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4013      	ands	r3, r2
 80040a6:	4a17      	ldr	r2, [pc, #92]	@ (8004104 <xTaskPriorityDisinherit+0x10c>)
 80040a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b6:	f1c3 0207 	rsb	r2, r3, #7
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c2:	2201      	movs	r2, #1
 80040c4:	409a      	lsls	r2, r3
 80040c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004104 <xTaskPriorityDisinherit+0x10c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004104 <xTaskPriorityDisinherit+0x10c>)
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4a08      	ldr	r2, [pc, #32]	@ (8004100 <xTaskPriorityDisinherit+0x108>)
 80040de:	441a      	add	r2, r3
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f7fe fa69 	bl	80025be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040f0:	697b      	ldr	r3, [r7, #20]
	}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000398 	.word	0x20000398
 8004100:	2000039c 	.word	0x2000039c
 8004104:	200004a0 	.word	0x200004a0

08004108 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004116:	2301      	movs	r3, #1
 8004118:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d079      	beq.n	8004214 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	60fb      	str	r3, [r7, #12]
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d902      	bls.n	8004150 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	e002      	b.n	8004156 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004154:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	429a      	cmp	r2, r3
 800415e:	d059      	beq.n	8004214 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	429a      	cmp	r2, r3
 8004168:	d154      	bne.n	8004214 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800416a:	4b2c      	ldr	r3, [pc, #176]	@ (800421c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	429a      	cmp	r2, r3
 8004172:	d10b      	bne.n	800418c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	60bb      	str	r3, [r7, #8]
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	db04      	blt.n	80041aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f1c3 0207 	rsb	r2, r3, #7
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	6959      	ldr	r1, [r3, #20]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4a19      	ldr	r2, [pc, #100]	@ (8004220 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80041ba:	4413      	add	r3, r2
 80041bc:	4299      	cmp	r1, r3
 80041be:	d129      	bne.n	8004214 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fe fa55 	bl	8002674 <uxListRemove>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	2201      	movs	r2, #1
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4013      	ands	r3, r2
 80041e2:	4a10      	ldr	r2, [pc, #64]	@ (8004224 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80041e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	2201      	movs	r2, #1
 80041ec:	409a      	lsls	r2, r3
 80041ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004224 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004224 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4a06      	ldr	r2, [pc, #24]	@ (8004220 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004206:	441a      	add	r2, r3
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	3304      	adds	r3, #4
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f7fe f9d5 	bl	80025be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004214:	bf00      	nop
 8004216:	3720      	adds	r7, #32
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000398 	.word	0x20000398
 8004220:	2000039c 	.word	0x2000039c
 8004224:	200004a0 	.word	0x200004a0

08004228 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800422c:	4b07      	ldr	r3, [pc, #28]	@ (800424c <pvTaskIncrementMutexHeldCount+0x24>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004234:	4b05      	ldr	r3, [pc, #20]	@ (800424c <pvTaskIncrementMutexHeldCount+0x24>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800423a:	3201      	adds	r2, #1
 800423c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800423e:	4b03      	ldr	r3, [pc, #12]	@ (800424c <pvTaskIncrementMutexHeldCount+0x24>)
 8004240:	681b      	ldr	r3, [r3, #0]
	}
 8004242:	4618      	mov	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20000398 	.word	0x20000398

08004250 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800425a:	4b29      	ldr	r3, [pc, #164]	@ (8004300 <prvAddCurrentTaskToDelayedList+0xb0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004260:	4b28      	ldr	r3, [pc, #160]	@ (8004304 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3304      	adds	r3, #4
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe fa04 	bl	8002674 <uxListRemove>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004272:	4b24      	ldr	r3, [pc, #144]	@ (8004304 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	2201      	movs	r2, #1
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43da      	mvns	r2, r3
 8004280:	4b21      	ldr	r3, [pc, #132]	@ (8004308 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4013      	ands	r3, r2
 8004286:	4a20      	ldr	r2, [pc, #128]	@ (8004308 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004288:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d10a      	bne.n	80042a8 <prvAddCurrentTaskToDelayedList+0x58>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004298:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <prvAddCurrentTaskToDelayedList+0xb4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3304      	adds	r3, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	481a      	ldr	r0, [pc, #104]	@ (800430c <prvAddCurrentTaskToDelayedList+0xbc>)
 80042a2:	f7fe f98c 	bl	80025be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042a6:	e026      	b.n	80042f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042b0:	4b14      	ldr	r3, [pc, #80]	@ (8004304 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d209      	bcs.n	80042d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042c0:	4b13      	ldr	r3, [pc, #76]	@ (8004310 <prvAddCurrentTaskToDelayedList+0xc0>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004304 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f7fe f999 	bl	8002604 <vListInsert>
}
 80042d2:	e010      	b.n	80042f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004314 <prvAddCurrentTaskToDelayedList+0xc4>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004304 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3304      	adds	r3, #4
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f7fe f98f 	bl	8002604 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004318 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d202      	bcs.n	80042f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80042f0:	4a09      	ldr	r2, [pc, #36]	@ (8004318 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	6013      	str	r3, [r2, #0]
}
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	2000049c 	.word	0x2000049c
 8004304:	20000398 	.word	0x20000398
 8004308:	200004a0 	.word	0x200004a0
 800430c:	20000484 	.word	0x20000484
 8004310:	20000454 	.word	0x20000454
 8004314:	20000450 	.word	0x20000450
 8004318:	200004b8 	.word	0x200004b8

0800431c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3b04      	subs	r3, #4
 800432c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3b04      	subs	r3, #4
 800433a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f023 0201 	bic.w	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3b04      	subs	r3, #4
 800434a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800434c:	4a08      	ldr	r2, [pc, #32]	@ (8004370 <pxPortInitialiseStack+0x54>)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3b14      	subs	r3, #20
 8004356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3b20      	subs	r3, #32
 8004362:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004364:	68fb      	ldr	r3, [r7, #12]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	08004375 	.word	0x08004375

08004374 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800437a:	2300      	movs	r3, #0
 800437c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800437e:	4b12      	ldr	r3, [pc, #72]	@ (80043c8 <prvTaskExitError+0x54>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004386:	d00b      	beq.n	80043a0 <prvTaskExitError+0x2c>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	60fb      	str	r3, [r7, #12]
}
 800439a:	bf00      	nop
 800439c:	bf00      	nop
 800439e:	e7fd      	b.n	800439c <prvTaskExitError+0x28>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60bb      	str	r3, [r7, #8]
}
 80043b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043b4:	bf00      	nop
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0fc      	beq.n	80043b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	20000010 	.word	0x20000010
 80043cc:	00000000 	.word	0x00000000

080043d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043d0:	4b07      	ldr	r3, [pc, #28]	@ (80043f0 <pxCurrentTCBConst2>)
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	6808      	ldr	r0, [r1, #0]
 80043d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043da:	f380 8809 	msr	PSP, r0
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f04f 0000 	mov.w	r0, #0
 80043e6:	f380 8811 	msr	BASEPRI, r0
 80043ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80043ee:	4770      	bx	lr

080043f0 <pxCurrentTCBConst2>:
 80043f0:	20000398 	.word	0x20000398
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop

080043f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80043f8:	4806      	ldr	r0, [pc, #24]	@ (8004414 <prvPortStartFirstTask+0x1c>)
 80043fa:	6800      	ldr	r0, [r0, #0]
 80043fc:	6800      	ldr	r0, [r0, #0]
 80043fe:	f380 8808 	msr	MSP, r0
 8004402:	b662      	cpsie	i
 8004404:	b661      	cpsie	f
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	df00      	svc	0
 8004410:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004412:	bf00      	nop
 8004414:	e000ed08 	.word	0xe000ed08

08004418 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800441e:	4b32      	ldr	r3, [pc, #200]	@ (80044e8 <xPortStartScheduler+0xd0>)
 8004420:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	22ff      	movs	r2, #255	@ 0xff
 800442e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004440:	b2da      	uxtb	r2, r3
 8004442:	4b2a      	ldr	r3, [pc, #168]	@ (80044ec <xPortStartScheduler+0xd4>)
 8004444:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004446:	4b2a      	ldr	r3, [pc, #168]	@ (80044f0 <xPortStartScheduler+0xd8>)
 8004448:	2207      	movs	r2, #7
 800444a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800444c:	e009      	b.n	8004462 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800444e:	4b28      	ldr	r3, [pc, #160]	@ (80044f0 <xPortStartScheduler+0xd8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3b01      	subs	r3, #1
 8004454:	4a26      	ldr	r2, [pc, #152]	@ (80044f0 <xPortStartScheduler+0xd8>)
 8004456:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	b2db      	uxtb	r3, r3
 8004460:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446a:	2b80      	cmp	r3, #128	@ 0x80
 800446c:	d0ef      	beq.n	800444e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800446e:	4b20      	ldr	r3, [pc, #128]	@ (80044f0 <xPortStartScheduler+0xd8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f1c3 0307 	rsb	r3, r3, #7
 8004476:	2b04      	cmp	r3, #4
 8004478:	d00b      	beq.n	8004492 <xPortStartScheduler+0x7a>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	60bb      	str	r3, [r7, #8]
}
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	e7fd      	b.n	800448e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004492:	4b17      	ldr	r3, [pc, #92]	@ (80044f0 <xPortStartScheduler+0xd8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	4a15      	ldr	r2, [pc, #84]	@ (80044f0 <xPortStartScheduler+0xd8>)
 800449a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800449c:	4b14      	ldr	r3, [pc, #80]	@ (80044f0 <xPortStartScheduler+0xd8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044a4:	4a12      	ldr	r2, [pc, #72]	@ (80044f0 <xPortStartScheduler+0xd8>)
 80044a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044b0:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <xPortStartScheduler+0xdc>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0f      	ldr	r2, [pc, #60]	@ (80044f4 <xPortStartScheduler+0xdc>)
 80044b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044bc:	4b0d      	ldr	r3, [pc, #52]	@ (80044f4 <xPortStartScheduler+0xdc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0c      	ldr	r2, [pc, #48]	@ (80044f4 <xPortStartScheduler+0xdc>)
 80044c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80044c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044c8:	f000 f8b8 	bl	800463c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044cc:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <xPortStartScheduler+0xe0>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044d2:	f7ff ff91 	bl	80043f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044d6:	f7ff fab9 	bl	8003a4c <vTaskSwitchContext>
	prvTaskExitError();
 80044da:	f7ff ff4b 	bl	8004374 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	e000e400 	.word	0xe000e400
 80044ec:	200004c4 	.word	0x200004c4
 80044f0:	200004c8 	.word	0x200004c8
 80044f4:	e000ed20 	.word	0xe000ed20
 80044f8:	20000010 	.word	0x20000010

080044fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	607b      	str	r3, [r7, #4]
}
 8004514:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004516:	4b0f      	ldr	r3, [pc, #60]	@ (8004554 <vPortEnterCritical+0x58>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3301      	adds	r3, #1
 800451c:	4a0d      	ldr	r2, [pc, #52]	@ (8004554 <vPortEnterCritical+0x58>)
 800451e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004520:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <vPortEnterCritical+0x58>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d110      	bne.n	800454a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004528:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <vPortEnterCritical+0x5c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <vPortEnterCritical+0x4e>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	603b      	str	r3, [r7, #0]
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	e7fd      	b.n	8004546 <vPortEnterCritical+0x4a>
	}
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	20000010 	.word	0x20000010
 8004558:	e000ed04 	.word	0xe000ed04

0800455c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004562:	4b12      	ldr	r3, [pc, #72]	@ (80045ac <vPortExitCritical+0x50>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10b      	bne.n	8004582 <vPortExitCritical+0x26>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	607b      	str	r3, [r7, #4]
}
 800457c:	bf00      	nop
 800457e:	bf00      	nop
 8004580:	e7fd      	b.n	800457e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004582:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <vPortExitCritical+0x50>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3b01      	subs	r3, #1
 8004588:	4a08      	ldr	r2, [pc, #32]	@ (80045ac <vPortExitCritical+0x50>)
 800458a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800458c:	4b07      	ldr	r3, [pc, #28]	@ (80045ac <vPortExitCritical+0x50>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <vPortExitCritical+0x44>
 8004594:	2300      	movs	r3, #0
 8004596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	f383 8811 	msr	BASEPRI, r3
}
 800459e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000010 	.word	0x20000010

080045b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045b0:	f3ef 8009 	mrs	r0, PSP
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	4b0d      	ldr	r3, [pc, #52]	@ (80045f0 <pxCurrentTCBConst>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045c0:	6010      	str	r0, [r2, #0]
 80045c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80045c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80045ca:	f380 8811 	msr	BASEPRI, r0
 80045ce:	f7ff fa3d 	bl	8003a4c <vTaskSwitchContext>
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f380 8811 	msr	BASEPRI, r0
 80045da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80045de:	6819      	ldr	r1, [r3, #0]
 80045e0:	6808      	ldr	r0, [r1, #0]
 80045e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045e6:	f380 8809 	msr	PSP, r0
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	4770      	bx	lr

080045f0 <pxCurrentTCBConst>:
 80045f0:	20000398 	.word	0x20000398
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop

080045f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	607b      	str	r3, [r7, #4]
}
 8004610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004612:	f7ff f961 	bl	80038d8 <xTaskIncrementTick>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800461c:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <SysTick_Handler+0x40>)
 800461e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	2300      	movs	r3, #0
 8004626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	f383 8811 	msr	BASEPRI, r3
}
 800462e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004640:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <vPortSetupTimerInterrupt+0x30>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004646:	4b0a      	ldr	r3, [pc, #40]	@ (8004670 <vPortSetupTimerInterrupt+0x34>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800464c:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <vPortSetupTimerInterrupt+0x38>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a09      	ldr	r2, [pc, #36]	@ (8004678 <vPortSetupTimerInterrupt+0x3c>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	099b      	lsrs	r3, r3, #6
 8004658:	4a08      	ldr	r2, [pc, #32]	@ (800467c <vPortSetupTimerInterrupt+0x40>)
 800465a:	3b01      	subs	r3, #1
 800465c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800465e:	4b03      	ldr	r3, [pc, #12]	@ (800466c <vPortSetupTimerInterrupt+0x30>)
 8004660:	2207      	movs	r2, #7
 8004662:	601a      	str	r2, [r3, #0]
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr
 800466c:	e000e010 	.word	0xe000e010
 8004670:	e000e018 	.word	0xe000e018
 8004674:	20000004 	.word	0x20000004
 8004678:	10624dd3 	.word	0x10624dd3
 800467c:	e000e014 	.word	0xe000e014

08004680 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004686:	f3ef 8305 	mrs	r3, IPSR
 800468a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b0f      	cmp	r3, #15
 8004690:	d915      	bls.n	80046be <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004692:	4a17      	ldr	r2, [pc, #92]	@ (80046f0 <vPortValidateInterruptPriority+0x70>)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800469c:	4b15      	ldr	r3, [pc, #84]	@ (80046f4 <vPortValidateInterruptPriority+0x74>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	7afa      	ldrb	r2, [r7, #11]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d20b      	bcs.n	80046be <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	607b      	str	r3, [r7, #4]
}
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop
 80046bc:	e7fd      	b.n	80046ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046be:	4b0e      	ldr	r3, [pc, #56]	@ (80046f8 <vPortValidateInterruptPriority+0x78>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046c6:	4b0d      	ldr	r3, [pc, #52]	@ (80046fc <vPortValidateInterruptPriority+0x7c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d90b      	bls.n	80046e6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	603b      	str	r3, [r7, #0]
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	e7fd      	b.n	80046e2 <vPortValidateInterruptPriority+0x62>
	}
 80046e6:	bf00      	nop
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	e000e3f0 	.word	0xe000e3f0
 80046f4:	200004c4 	.word	0x200004c4
 80046f8:	e000ed0c 	.word	0xe000ed0c
 80046fc:	200004c8 	.word	0x200004c8

08004700 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08a      	sub	sp, #40	@ 0x28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004708:	2300      	movs	r3, #0
 800470a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800470c:	f7ff f838 	bl	8003780 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004710:	4b5c      	ldr	r3, [pc, #368]	@ (8004884 <pvPortMalloc+0x184>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004718:	f000 f924 	bl	8004964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800471c:	4b5a      	ldr	r3, [pc, #360]	@ (8004888 <pvPortMalloc+0x188>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	f040 8095 	bne.w	8004854 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01e      	beq.n	800476e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004730:	2208      	movs	r2, #8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4413      	add	r3, r2
 8004736:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	2b00      	cmp	r3, #0
 8004740:	d015      	beq.n	800476e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f023 0307 	bic.w	r3, r3, #7
 8004748:	3308      	adds	r3, #8
 800474a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <pvPortMalloc+0x6e>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	617b      	str	r3, [r7, #20]
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	e7fd      	b.n	800476a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d06f      	beq.n	8004854 <pvPortMalloc+0x154>
 8004774:	4b45      	ldr	r3, [pc, #276]	@ (800488c <pvPortMalloc+0x18c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	429a      	cmp	r2, r3
 800477c:	d86a      	bhi.n	8004854 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800477e:	4b44      	ldr	r3, [pc, #272]	@ (8004890 <pvPortMalloc+0x190>)
 8004780:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004782:	4b43      	ldr	r3, [pc, #268]	@ (8004890 <pvPortMalloc+0x190>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004788:	e004      	b.n	8004794 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	429a      	cmp	r2, r3
 800479c:	d903      	bls.n	80047a6 <pvPortMalloc+0xa6>
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f1      	bne.n	800478a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047a6:	4b37      	ldr	r3, [pc, #220]	@ (8004884 <pvPortMalloc+0x184>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d051      	beq.n	8004854 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2208      	movs	r2, #8
 80047b6:	4413      	add	r3, r2
 80047b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	1ad2      	subs	r2, r2, r3
 80047ca:	2308      	movs	r3, #8
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d920      	bls.n	8004814 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4413      	add	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00b      	beq.n	80047fc <pvPortMalloc+0xfc>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	613b      	str	r3, [r7, #16]
}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	e7fd      	b.n	80047f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	1ad2      	subs	r2, r2, r3
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800480e:	69b8      	ldr	r0, [r7, #24]
 8004810:	f000 f90a 	bl	8004a28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004814:	4b1d      	ldr	r3, [pc, #116]	@ (800488c <pvPortMalloc+0x18c>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	4a1b      	ldr	r2, [pc, #108]	@ (800488c <pvPortMalloc+0x18c>)
 8004820:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004822:	4b1a      	ldr	r3, [pc, #104]	@ (800488c <pvPortMalloc+0x18c>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b1b      	ldr	r3, [pc, #108]	@ (8004894 <pvPortMalloc+0x194>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d203      	bcs.n	8004836 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800482e:	4b17      	ldr	r3, [pc, #92]	@ (800488c <pvPortMalloc+0x18c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a18      	ldr	r2, [pc, #96]	@ (8004894 <pvPortMalloc+0x194>)
 8004834:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	4b13      	ldr	r3, [pc, #76]	@ (8004888 <pvPortMalloc+0x188>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	431a      	orrs	r2, r3
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800484a:	4b13      	ldr	r3, [pc, #76]	@ (8004898 <pvPortMalloc+0x198>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3301      	adds	r3, #1
 8004850:	4a11      	ldr	r2, [pc, #68]	@ (8004898 <pvPortMalloc+0x198>)
 8004852:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004854:	f7fe ffa2 	bl	800379c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00b      	beq.n	800487a <pvPortMalloc+0x17a>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	60fb      	str	r3, [r7, #12]
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	e7fd      	b.n	8004876 <pvPortMalloc+0x176>
	return pvReturn;
 800487a:	69fb      	ldr	r3, [r7, #28]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3728      	adds	r7, #40	@ 0x28
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	200010d4 	.word	0x200010d4
 8004888:	200010e8 	.word	0x200010e8
 800488c:	200010d8 	.word	0x200010d8
 8004890:	200010cc 	.word	0x200010cc
 8004894:	200010dc 	.word	0x200010dc
 8004898:	200010e0 	.word	0x200010e0

0800489c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d04f      	beq.n	800494e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048ae:	2308      	movs	r3, #8
 80048b0:	425b      	negs	r3, r3
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4413      	add	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	4b25      	ldr	r3, [pc, #148]	@ (8004958 <vPortFree+0xbc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10b      	bne.n	80048e2 <vPortFree+0x46>
	__asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	60fb      	str	r3, [r7, #12]
}
 80048dc:	bf00      	nop
 80048de:	bf00      	nop
 80048e0:	e7fd      	b.n	80048de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <vPortFree+0x66>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	60bb      	str	r3, [r7, #8]
}
 80048fc:	bf00      	nop
 80048fe:	bf00      	nop
 8004900:	e7fd      	b.n	80048fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	4b14      	ldr	r3, [pc, #80]	@ (8004958 <vPortFree+0xbc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01e      	beq.n	800494e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d11a      	bne.n	800494e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	4b0e      	ldr	r3, [pc, #56]	@ (8004958 <vPortFree+0xbc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	43db      	mvns	r3, r3
 8004922:	401a      	ands	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004928:	f7fe ff2a 	bl	8003780 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <vPortFree+0xc0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4413      	add	r3, r2
 8004936:	4a09      	ldr	r2, [pc, #36]	@ (800495c <vPortFree+0xc0>)
 8004938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800493a:	6938      	ldr	r0, [r7, #16]
 800493c:	f000 f874 	bl	8004a28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004940:	4b07      	ldr	r3, [pc, #28]	@ (8004960 <vPortFree+0xc4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3301      	adds	r3, #1
 8004946:	4a06      	ldr	r2, [pc, #24]	@ (8004960 <vPortFree+0xc4>)
 8004948:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800494a:	f7fe ff27 	bl	800379c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800494e:	bf00      	nop
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	200010e8 	.word	0x200010e8
 800495c:	200010d8 	.word	0x200010d8
 8004960:	200010e4 	.word	0x200010e4

08004964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800496a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800496e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004970:	4b27      	ldr	r3, [pc, #156]	@ (8004a10 <prvHeapInit+0xac>)
 8004972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00c      	beq.n	8004998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3307      	adds	r3, #7
 8004982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0307 	bic.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	4a1f      	ldr	r2, [pc, #124]	@ (8004a10 <prvHeapInit+0xac>)
 8004994:	4413      	add	r3, r2
 8004996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800499c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a14 <prvHeapInit+0xb0>)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004a14 <prvHeapInit+0xb0>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	4413      	add	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049b0:	2208      	movs	r2, #8
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0307 	bic.w	r3, r3, #7
 80049be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a15      	ldr	r2, [pc, #84]	@ (8004a18 <prvHeapInit+0xb4>)
 80049c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049c6:	4b14      	ldr	r3, [pc, #80]	@ (8004a18 <prvHeapInit+0xb4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049ce:	4b12      	ldr	r3, [pc, #72]	@ (8004a18 <prvHeapInit+0xb4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	1ad2      	subs	r2, r2, r3
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a18 <prvHeapInit+0xb4>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a0a      	ldr	r2, [pc, #40]	@ (8004a1c <prvHeapInit+0xb8>)
 80049f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	4a09      	ldr	r2, [pc, #36]	@ (8004a20 <prvHeapInit+0xbc>)
 80049fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049fc:	4b09      	ldr	r3, [pc, #36]	@ (8004a24 <prvHeapInit+0xc0>)
 80049fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004a02:	601a      	str	r2, [r3, #0]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	200004cc 	.word	0x200004cc
 8004a14:	200010cc 	.word	0x200010cc
 8004a18:	200010d4 	.word	0x200010d4
 8004a1c:	200010dc 	.word	0x200010dc
 8004a20:	200010d8 	.word	0x200010d8
 8004a24:	200010e8 	.word	0x200010e8

08004a28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a30:	4b27      	ldr	r3, [pc, #156]	@ (8004ad0 <prvInsertBlockIntoFreeList+0xa8>)
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e002      	b.n	8004a3c <prvInsertBlockIntoFreeList+0x14>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d8f7      	bhi.n	8004a36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	4413      	add	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d108      	bne.n	8004a6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	441a      	add	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	441a      	add	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d118      	bne.n	8004ab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4b14      	ldr	r3, [pc, #80]	@ (8004ad4 <prvInsertBlockIntoFreeList+0xac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d00d      	beq.n	8004aa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	441a      	add	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e008      	b.n	8004ab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <prvInsertBlockIntoFreeList+0xac>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	e003      	b.n	8004ab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d002      	beq.n	8004ac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ac6:	bf00      	nop
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr
 8004ad0:	200010cc 	.word	0x200010cc
 8004ad4:	200010d4 	.word	0x200010d4

08004ad8 <atoi>:
 8004ad8:	220a      	movs	r2, #10
 8004ada:	2100      	movs	r1, #0
 8004adc:	f000 b87a 	b.w	8004bd4 <strtol>

08004ae0 <_strtol_l.constprop.0>:
 8004ae0:	2b24      	cmp	r3, #36	@ 0x24
 8004ae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae6:	4686      	mov	lr, r0
 8004ae8:	4690      	mov	r8, r2
 8004aea:	d801      	bhi.n	8004af0 <_strtol_l.constprop.0+0x10>
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d106      	bne.n	8004afe <_strtol_l.constprop.0+0x1e>
 8004af0:	f000 f8c8 	bl	8004c84 <__errno>
 8004af4:	2316      	movs	r3, #22
 8004af6:	6003      	str	r3, [r0, #0]
 8004af8:	2000      	movs	r0, #0
 8004afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afe:	460d      	mov	r5, r1
 8004b00:	4833      	ldr	r0, [pc, #204]	@ (8004bd0 <_strtol_l.constprop.0+0xf0>)
 8004b02:	462a      	mov	r2, r5
 8004b04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b08:	5d06      	ldrb	r6, [r0, r4]
 8004b0a:	f016 0608 	ands.w	r6, r6, #8
 8004b0e:	d1f8      	bne.n	8004b02 <_strtol_l.constprop.0+0x22>
 8004b10:	2c2d      	cmp	r4, #45	@ 0x2d
 8004b12:	d12d      	bne.n	8004b70 <_strtol_l.constprop.0+0x90>
 8004b14:	2601      	movs	r6, #1
 8004b16:	782c      	ldrb	r4, [r5, #0]
 8004b18:	1c95      	adds	r5, r2, #2
 8004b1a:	f033 0210 	bics.w	r2, r3, #16
 8004b1e:	d109      	bne.n	8004b34 <_strtol_l.constprop.0+0x54>
 8004b20:	2c30      	cmp	r4, #48	@ 0x30
 8004b22:	d12a      	bne.n	8004b7a <_strtol_l.constprop.0+0x9a>
 8004b24:	782a      	ldrb	r2, [r5, #0]
 8004b26:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004b2a:	2a58      	cmp	r2, #88	@ 0x58
 8004b2c:	d125      	bne.n	8004b7a <_strtol_l.constprop.0+0x9a>
 8004b2e:	2310      	movs	r3, #16
 8004b30:	786c      	ldrb	r4, [r5, #1]
 8004b32:	3502      	adds	r5, #2
 8004b34:	2200      	movs	r2, #0
 8004b36:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004b3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004b3e:	fbbc f9f3 	udiv	r9, ip, r3
 8004b42:	4610      	mov	r0, r2
 8004b44:	fb03 ca19 	mls	sl, r3, r9, ip
 8004b48:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004b4c:	2f09      	cmp	r7, #9
 8004b4e:	d81b      	bhi.n	8004b88 <_strtol_l.constprop.0+0xa8>
 8004b50:	463c      	mov	r4, r7
 8004b52:	42a3      	cmp	r3, r4
 8004b54:	dd27      	ble.n	8004ba6 <_strtol_l.constprop.0+0xc6>
 8004b56:	1c57      	adds	r7, r2, #1
 8004b58:	d007      	beq.n	8004b6a <_strtol_l.constprop.0+0x8a>
 8004b5a:	4581      	cmp	r9, r0
 8004b5c:	d320      	bcc.n	8004ba0 <_strtol_l.constprop.0+0xc0>
 8004b5e:	d101      	bne.n	8004b64 <_strtol_l.constprop.0+0x84>
 8004b60:	45a2      	cmp	sl, r4
 8004b62:	db1d      	blt.n	8004ba0 <_strtol_l.constprop.0+0xc0>
 8004b64:	2201      	movs	r2, #1
 8004b66:	fb00 4003 	mla	r0, r0, r3, r4
 8004b6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b6e:	e7eb      	b.n	8004b48 <_strtol_l.constprop.0+0x68>
 8004b70:	2c2b      	cmp	r4, #43	@ 0x2b
 8004b72:	bf04      	itt	eq
 8004b74:	782c      	ldrbeq	r4, [r5, #0]
 8004b76:	1c95      	addeq	r5, r2, #2
 8004b78:	e7cf      	b.n	8004b1a <_strtol_l.constprop.0+0x3a>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1da      	bne.n	8004b34 <_strtol_l.constprop.0+0x54>
 8004b7e:	2c30      	cmp	r4, #48	@ 0x30
 8004b80:	bf0c      	ite	eq
 8004b82:	2308      	moveq	r3, #8
 8004b84:	230a      	movne	r3, #10
 8004b86:	e7d5      	b.n	8004b34 <_strtol_l.constprop.0+0x54>
 8004b88:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004b8c:	2f19      	cmp	r7, #25
 8004b8e:	d801      	bhi.n	8004b94 <_strtol_l.constprop.0+0xb4>
 8004b90:	3c37      	subs	r4, #55	@ 0x37
 8004b92:	e7de      	b.n	8004b52 <_strtol_l.constprop.0+0x72>
 8004b94:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004b98:	2f19      	cmp	r7, #25
 8004b9a:	d804      	bhi.n	8004ba6 <_strtol_l.constprop.0+0xc6>
 8004b9c:	3c57      	subs	r4, #87	@ 0x57
 8004b9e:	e7d8      	b.n	8004b52 <_strtol_l.constprop.0+0x72>
 8004ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba4:	e7e1      	b.n	8004b6a <_strtol_l.constprop.0+0x8a>
 8004ba6:	1c53      	adds	r3, r2, #1
 8004ba8:	d108      	bne.n	8004bbc <_strtol_l.constprop.0+0xdc>
 8004baa:	2322      	movs	r3, #34	@ 0x22
 8004bac:	4660      	mov	r0, ip
 8004bae:	f8ce 3000 	str.w	r3, [lr]
 8004bb2:	f1b8 0f00 	cmp.w	r8, #0
 8004bb6:	d0a0      	beq.n	8004afa <_strtol_l.constprop.0+0x1a>
 8004bb8:	1e69      	subs	r1, r5, #1
 8004bba:	e006      	b.n	8004bca <_strtol_l.constprop.0+0xea>
 8004bbc:	b106      	cbz	r6, 8004bc0 <_strtol_l.constprop.0+0xe0>
 8004bbe:	4240      	negs	r0, r0
 8004bc0:	f1b8 0f00 	cmp.w	r8, #0
 8004bc4:	d099      	beq.n	8004afa <_strtol_l.constprop.0+0x1a>
 8004bc6:	2a00      	cmp	r2, #0
 8004bc8:	d1f6      	bne.n	8004bb8 <_strtol_l.constprop.0+0xd8>
 8004bca:	f8c8 1000 	str.w	r1, [r8]
 8004bce:	e794      	b.n	8004afa <_strtol_l.constprop.0+0x1a>
 8004bd0:	080058cb 	.word	0x080058cb

08004bd4 <strtol>:
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	460a      	mov	r2, r1
 8004bd8:	4601      	mov	r1, r0
 8004bda:	4802      	ldr	r0, [pc, #8]	@ (8004be4 <strtol+0x10>)
 8004bdc:	6800      	ldr	r0, [r0, #0]
 8004bde:	f7ff bf7f 	b.w	8004ae0 <_strtol_l.constprop.0>
 8004be2:	bf00      	nop
 8004be4:	20000014 	.word	0x20000014

08004be8 <sniprintf>:
 8004be8:	b40c      	push	{r2, r3}
 8004bea:	b530      	push	{r4, r5, lr}
 8004bec:	4b17      	ldr	r3, [pc, #92]	@ (8004c4c <sniprintf+0x64>)
 8004bee:	1e0c      	subs	r4, r1, #0
 8004bf0:	681d      	ldr	r5, [r3, #0]
 8004bf2:	b09d      	sub	sp, #116	@ 0x74
 8004bf4:	da08      	bge.n	8004c08 <sniprintf+0x20>
 8004bf6:	238b      	movs	r3, #139	@ 0x8b
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	602b      	str	r3, [r5, #0]
 8004bfe:	b01d      	add	sp, #116	@ 0x74
 8004c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c04:	b002      	add	sp, #8
 8004c06:	4770      	bx	lr
 8004c08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004c0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c10:	bf0c      	ite	eq
 8004c12:	4623      	moveq	r3, r4
 8004c14:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c18:	9304      	str	r3, [sp, #16]
 8004c1a:	9307      	str	r3, [sp, #28]
 8004c1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c20:	9002      	str	r0, [sp, #8]
 8004c22:	9006      	str	r0, [sp, #24]
 8004c24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c28:	4628      	mov	r0, r5
 8004c2a:	ab21      	add	r3, sp, #132	@ 0x84
 8004c2c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c2e:	a902      	add	r1, sp, #8
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	f000 f9b3 	bl	8004f9c <_svfiprintf_r>
 8004c36:	1c43      	adds	r3, r0, #1
 8004c38:	bfbc      	itt	lt
 8004c3a:	238b      	movlt	r3, #139	@ 0x8b
 8004c3c:	602b      	strlt	r3, [r5, #0]
 8004c3e:	2c00      	cmp	r4, #0
 8004c40:	d0dd      	beq.n	8004bfe <sniprintf+0x16>
 8004c42:	2200      	movs	r2, #0
 8004c44:	9b02      	ldr	r3, [sp, #8]
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	e7d9      	b.n	8004bfe <sniprintf+0x16>
 8004c4a:	bf00      	nop
 8004c4c:	20000014 	.word	0x20000014

08004c50 <memset>:
 8004c50:	4603      	mov	r3, r0
 8004c52:	4402      	add	r2, r0
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d100      	bne.n	8004c5a <memset+0xa>
 8004c58:	4770      	bx	lr
 8004c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c5e:	e7f9      	b.n	8004c54 <memset+0x4>

08004c60 <strncmp>:
 8004c60:	b510      	push	{r4, lr}
 8004c62:	b16a      	cbz	r2, 8004c80 <strncmp+0x20>
 8004c64:	3901      	subs	r1, #1
 8004c66:	1884      	adds	r4, r0, r2
 8004c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d103      	bne.n	8004c7c <strncmp+0x1c>
 8004c74:	42a0      	cmp	r0, r4
 8004c76:	d001      	beq.n	8004c7c <strncmp+0x1c>
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	d1f5      	bne.n	8004c68 <strncmp+0x8>
 8004c7c:	1ad0      	subs	r0, r2, r3
 8004c7e:	bd10      	pop	{r4, pc}
 8004c80:	4610      	mov	r0, r2
 8004c82:	e7fc      	b.n	8004c7e <strncmp+0x1e>

08004c84 <__errno>:
 8004c84:	4b01      	ldr	r3, [pc, #4]	@ (8004c8c <__errno+0x8>)
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20000014 	.word	0x20000014

08004c90 <__libc_init_array>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	2600      	movs	r6, #0
 8004c94:	4d0c      	ldr	r5, [pc, #48]	@ (8004cc8 <__libc_init_array+0x38>)
 8004c96:	4c0d      	ldr	r4, [pc, #52]	@ (8004ccc <__libc_init_array+0x3c>)
 8004c98:	1b64      	subs	r4, r4, r5
 8004c9a:	10a4      	asrs	r4, r4, #2
 8004c9c:	42a6      	cmp	r6, r4
 8004c9e:	d109      	bne.n	8004cb4 <__libc_init_array+0x24>
 8004ca0:	f000 fc78 	bl	8005594 <_init>
 8004ca4:	2600      	movs	r6, #0
 8004ca6:	4d0a      	ldr	r5, [pc, #40]	@ (8004cd0 <__libc_init_array+0x40>)
 8004ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8004cd4 <__libc_init_array+0x44>)
 8004caa:	1b64      	subs	r4, r4, r5
 8004cac:	10a4      	asrs	r4, r4, #2
 8004cae:	42a6      	cmp	r6, r4
 8004cb0:	d105      	bne.n	8004cbe <__libc_init_array+0x2e>
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb8:	4798      	blx	r3
 8004cba:	3601      	adds	r6, #1
 8004cbc:	e7ee      	b.n	8004c9c <__libc_init_array+0xc>
 8004cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc2:	4798      	blx	r3
 8004cc4:	3601      	adds	r6, #1
 8004cc6:	e7f2      	b.n	8004cae <__libc_init_array+0x1e>
 8004cc8:	08005a08 	.word	0x08005a08
 8004ccc:	08005a08 	.word	0x08005a08
 8004cd0:	08005a08 	.word	0x08005a08
 8004cd4:	08005a0c 	.word	0x08005a0c

08004cd8 <__retarget_lock_acquire_recursive>:
 8004cd8:	4770      	bx	lr

08004cda <__retarget_lock_release_recursive>:
 8004cda:	4770      	bx	lr

08004cdc <memcpy>:
 8004cdc:	440a      	add	r2, r1
 8004cde:	4291      	cmp	r1, r2
 8004ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ce4:	d100      	bne.n	8004ce8 <memcpy+0xc>
 8004ce6:	4770      	bx	lr
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cee:	4291      	cmp	r1, r2
 8004cf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cf4:	d1f9      	bne.n	8004cea <memcpy+0xe>
 8004cf6:	bd10      	pop	{r4, pc}

08004cf8 <_free_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4605      	mov	r5, r0
 8004cfc:	2900      	cmp	r1, #0
 8004cfe:	d040      	beq.n	8004d82 <_free_r+0x8a>
 8004d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d04:	1f0c      	subs	r4, r1, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bfb8      	it	lt
 8004d0a:	18e4      	addlt	r4, r4, r3
 8004d0c:	f000 f8de 	bl	8004ecc <__malloc_lock>
 8004d10:	4a1c      	ldr	r2, [pc, #112]	@ (8004d84 <_free_r+0x8c>)
 8004d12:	6813      	ldr	r3, [r2, #0]
 8004d14:	b933      	cbnz	r3, 8004d24 <_free_r+0x2c>
 8004d16:	6063      	str	r3, [r4, #4]
 8004d18:	6014      	str	r4, [r2, #0]
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d20:	f000 b8da 	b.w	8004ed8 <__malloc_unlock>
 8004d24:	42a3      	cmp	r3, r4
 8004d26:	d908      	bls.n	8004d3a <_free_r+0x42>
 8004d28:	6820      	ldr	r0, [r4, #0]
 8004d2a:	1821      	adds	r1, r4, r0
 8004d2c:	428b      	cmp	r3, r1
 8004d2e:	bf01      	itttt	eq
 8004d30:	6819      	ldreq	r1, [r3, #0]
 8004d32:	685b      	ldreq	r3, [r3, #4]
 8004d34:	1809      	addeq	r1, r1, r0
 8004d36:	6021      	streq	r1, [r4, #0]
 8004d38:	e7ed      	b.n	8004d16 <_free_r+0x1e>
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	b10b      	cbz	r3, 8004d44 <_free_r+0x4c>
 8004d40:	42a3      	cmp	r3, r4
 8004d42:	d9fa      	bls.n	8004d3a <_free_r+0x42>
 8004d44:	6811      	ldr	r1, [r2, #0]
 8004d46:	1850      	adds	r0, r2, r1
 8004d48:	42a0      	cmp	r0, r4
 8004d4a:	d10b      	bne.n	8004d64 <_free_r+0x6c>
 8004d4c:	6820      	ldr	r0, [r4, #0]
 8004d4e:	4401      	add	r1, r0
 8004d50:	1850      	adds	r0, r2, r1
 8004d52:	4283      	cmp	r3, r0
 8004d54:	6011      	str	r1, [r2, #0]
 8004d56:	d1e0      	bne.n	8004d1a <_free_r+0x22>
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4408      	add	r0, r1
 8004d5e:	6010      	str	r0, [r2, #0]
 8004d60:	6053      	str	r3, [r2, #4]
 8004d62:	e7da      	b.n	8004d1a <_free_r+0x22>
 8004d64:	d902      	bls.n	8004d6c <_free_r+0x74>
 8004d66:	230c      	movs	r3, #12
 8004d68:	602b      	str	r3, [r5, #0]
 8004d6a:	e7d6      	b.n	8004d1a <_free_r+0x22>
 8004d6c:	6820      	ldr	r0, [r4, #0]
 8004d6e:	1821      	adds	r1, r4, r0
 8004d70:	428b      	cmp	r3, r1
 8004d72:	bf01      	itttt	eq
 8004d74:	6819      	ldreq	r1, [r3, #0]
 8004d76:	685b      	ldreq	r3, [r3, #4]
 8004d78:	1809      	addeq	r1, r1, r0
 8004d7a:	6021      	streq	r1, [r4, #0]
 8004d7c:	6063      	str	r3, [r4, #4]
 8004d7e:	6054      	str	r4, [r2, #4]
 8004d80:	e7cb      	b.n	8004d1a <_free_r+0x22>
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	20001230 	.word	0x20001230

08004d88 <sbrk_aligned>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	4e0f      	ldr	r6, [pc, #60]	@ (8004dc8 <sbrk_aligned+0x40>)
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	6831      	ldr	r1, [r6, #0]
 8004d90:	4605      	mov	r5, r0
 8004d92:	b911      	cbnz	r1, 8004d9a <sbrk_aligned+0x12>
 8004d94:	f000 fbaa 	bl	80054ec <_sbrk_r>
 8004d98:	6030      	str	r0, [r6, #0]
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f000 fba5 	bl	80054ec <_sbrk_r>
 8004da2:	1c43      	adds	r3, r0, #1
 8004da4:	d103      	bne.n	8004dae <sbrk_aligned+0x26>
 8004da6:	f04f 34ff 	mov.w	r4, #4294967295
 8004daa:	4620      	mov	r0, r4
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
 8004dae:	1cc4      	adds	r4, r0, #3
 8004db0:	f024 0403 	bic.w	r4, r4, #3
 8004db4:	42a0      	cmp	r0, r4
 8004db6:	d0f8      	beq.n	8004daa <sbrk_aligned+0x22>
 8004db8:	1a21      	subs	r1, r4, r0
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f000 fb96 	bl	80054ec <_sbrk_r>
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d1f2      	bne.n	8004daa <sbrk_aligned+0x22>
 8004dc4:	e7ef      	b.n	8004da6 <sbrk_aligned+0x1e>
 8004dc6:	bf00      	nop
 8004dc8:	2000122c 	.word	0x2000122c

08004dcc <_malloc_r>:
 8004dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd0:	1ccd      	adds	r5, r1, #3
 8004dd2:	f025 0503 	bic.w	r5, r5, #3
 8004dd6:	3508      	adds	r5, #8
 8004dd8:	2d0c      	cmp	r5, #12
 8004dda:	bf38      	it	cc
 8004ddc:	250c      	movcc	r5, #12
 8004dde:	2d00      	cmp	r5, #0
 8004de0:	4606      	mov	r6, r0
 8004de2:	db01      	blt.n	8004de8 <_malloc_r+0x1c>
 8004de4:	42a9      	cmp	r1, r5
 8004de6:	d904      	bls.n	8004df2 <_malloc_r+0x26>
 8004de8:	230c      	movs	r3, #12
 8004dea:	6033      	str	r3, [r6, #0]
 8004dec:	2000      	movs	r0, #0
 8004dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004df2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ec8 <_malloc_r+0xfc>
 8004df6:	f000 f869 	bl	8004ecc <__malloc_lock>
 8004dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8004dfe:	461c      	mov	r4, r3
 8004e00:	bb44      	cbnz	r4, 8004e54 <_malloc_r+0x88>
 8004e02:	4629      	mov	r1, r5
 8004e04:	4630      	mov	r0, r6
 8004e06:	f7ff ffbf 	bl	8004d88 <sbrk_aligned>
 8004e0a:	1c43      	adds	r3, r0, #1
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	d158      	bne.n	8004ec2 <_malloc_r+0xf6>
 8004e10:	f8d8 4000 	ldr.w	r4, [r8]
 8004e14:	4627      	mov	r7, r4
 8004e16:	2f00      	cmp	r7, #0
 8004e18:	d143      	bne.n	8004ea2 <_malloc_r+0xd6>
 8004e1a:	2c00      	cmp	r4, #0
 8004e1c:	d04b      	beq.n	8004eb6 <_malloc_r+0xea>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	4639      	mov	r1, r7
 8004e22:	4630      	mov	r0, r6
 8004e24:	eb04 0903 	add.w	r9, r4, r3
 8004e28:	f000 fb60 	bl	80054ec <_sbrk_r>
 8004e2c:	4581      	cmp	r9, r0
 8004e2e:	d142      	bne.n	8004eb6 <_malloc_r+0xea>
 8004e30:	6821      	ldr	r1, [r4, #0]
 8004e32:	4630      	mov	r0, r6
 8004e34:	1a6d      	subs	r5, r5, r1
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7ff ffa6 	bl	8004d88 <sbrk_aligned>
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d03a      	beq.n	8004eb6 <_malloc_r+0xea>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	442b      	add	r3, r5
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	f8d8 3000 	ldr.w	r3, [r8]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	bb62      	cbnz	r2, 8004ea8 <_malloc_r+0xdc>
 8004e4e:	f8c8 7000 	str.w	r7, [r8]
 8004e52:	e00f      	b.n	8004e74 <_malloc_r+0xa8>
 8004e54:	6822      	ldr	r2, [r4, #0]
 8004e56:	1b52      	subs	r2, r2, r5
 8004e58:	d420      	bmi.n	8004e9c <_malloc_r+0xd0>
 8004e5a:	2a0b      	cmp	r2, #11
 8004e5c:	d917      	bls.n	8004e8e <_malloc_r+0xc2>
 8004e5e:	1961      	adds	r1, r4, r5
 8004e60:	42a3      	cmp	r3, r4
 8004e62:	6025      	str	r5, [r4, #0]
 8004e64:	bf18      	it	ne
 8004e66:	6059      	strne	r1, [r3, #4]
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	bf08      	it	eq
 8004e6c:	f8c8 1000 	streq.w	r1, [r8]
 8004e70:	5162      	str	r2, [r4, r5]
 8004e72:	604b      	str	r3, [r1, #4]
 8004e74:	4630      	mov	r0, r6
 8004e76:	f000 f82f 	bl	8004ed8 <__malloc_unlock>
 8004e7a:	f104 000b 	add.w	r0, r4, #11
 8004e7e:	1d23      	adds	r3, r4, #4
 8004e80:	f020 0007 	bic.w	r0, r0, #7
 8004e84:	1ac2      	subs	r2, r0, r3
 8004e86:	bf1c      	itt	ne
 8004e88:	1a1b      	subne	r3, r3, r0
 8004e8a:	50a3      	strne	r3, [r4, r2]
 8004e8c:	e7af      	b.n	8004dee <_malloc_r+0x22>
 8004e8e:	6862      	ldr	r2, [r4, #4]
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	bf0c      	ite	eq
 8004e94:	f8c8 2000 	streq.w	r2, [r8]
 8004e98:	605a      	strne	r2, [r3, #4]
 8004e9a:	e7eb      	b.n	8004e74 <_malloc_r+0xa8>
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	6864      	ldr	r4, [r4, #4]
 8004ea0:	e7ae      	b.n	8004e00 <_malloc_r+0x34>
 8004ea2:	463c      	mov	r4, r7
 8004ea4:	687f      	ldr	r7, [r7, #4]
 8004ea6:	e7b6      	b.n	8004e16 <_malloc_r+0x4a>
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	42a3      	cmp	r3, r4
 8004eae:	d1fb      	bne.n	8004ea8 <_malloc_r+0xdc>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6053      	str	r3, [r2, #4]
 8004eb4:	e7de      	b.n	8004e74 <_malloc_r+0xa8>
 8004eb6:	230c      	movs	r3, #12
 8004eb8:	4630      	mov	r0, r6
 8004eba:	6033      	str	r3, [r6, #0]
 8004ebc:	f000 f80c 	bl	8004ed8 <__malloc_unlock>
 8004ec0:	e794      	b.n	8004dec <_malloc_r+0x20>
 8004ec2:	6005      	str	r5, [r0, #0]
 8004ec4:	e7d6      	b.n	8004e74 <_malloc_r+0xa8>
 8004ec6:	bf00      	nop
 8004ec8:	20001230 	.word	0x20001230

08004ecc <__malloc_lock>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	@ (8004ed4 <__malloc_lock+0x8>)
 8004ece:	f7ff bf03 	b.w	8004cd8 <__retarget_lock_acquire_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	20001228 	.word	0x20001228

08004ed8 <__malloc_unlock>:
 8004ed8:	4801      	ldr	r0, [pc, #4]	@ (8004ee0 <__malloc_unlock+0x8>)
 8004eda:	f7ff befe 	b.w	8004cda <__retarget_lock_release_recursive>
 8004ede:	bf00      	nop
 8004ee0:	20001228 	.word	0x20001228

08004ee4 <__ssputs_r>:
 8004ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee8:	461f      	mov	r7, r3
 8004eea:	688e      	ldr	r6, [r1, #8]
 8004eec:	4682      	mov	sl, r0
 8004eee:	42be      	cmp	r6, r7
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	4690      	mov	r8, r2
 8004ef4:	680b      	ldr	r3, [r1, #0]
 8004ef6:	d82d      	bhi.n	8004f54 <__ssputs_r+0x70>
 8004ef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004efc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f00:	d026      	beq.n	8004f50 <__ssputs_r+0x6c>
 8004f02:	6965      	ldr	r5, [r4, #20]
 8004f04:	6909      	ldr	r1, [r1, #16]
 8004f06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f0a:	eba3 0901 	sub.w	r9, r3, r1
 8004f0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f12:	1c7b      	adds	r3, r7, #1
 8004f14:	444b      	add	r3, r9
 8004f16:	106d      	asrs	r5, r5, #1
 8004f18:	429d      	cmp	r5, r3
 8004f1a:	bf38      	it	cc
 8004f1c:	461d      	movcc	r5, r3
 8004f1e:	0553      	lsls	r3, r2, #21
 8004f20:	d527      	bpl.n	8004f72 <__ssputs_r+0x8e>
 8004f22:	4629      	mov	r1, r5
 8004f24:	f7ff ff52 	bl	8004dcc <_malloc_r>
 8004f28:	4606      	mov	r6, r0
 8004f2a:	b360      	cbz	r0, 8004f86 <__ssputs_r+0xa2>
 8004f2c:	464a      	mov	r2, r9
 8004f2e:	6921      	ldr	r1, [r4, #16]
 8004f30:	f7ff fed4 	bl	8004cdc <memcpy>
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f3e:	81a3      	strh	r3, [r4, #12]
 8004f40:	6126      	str	r6, [r4, #16]
 8004f42:	444e      	add	r6, r9
 8004f44:	6026      	str	r6, [r4, #0]
 8004f46:	463e      	mov	r6, r7
 8004f48:	6165      	str	r5, [r4, #20]
 8004f4a:	eba5 0509 	sub.w	r5, r5, r9
 8004f4e:	60a5      	str	r5, [r4, #8]
 8004f50:	42be      	cmp	r6, r7
 8004f52:	d900      	bls.n	8004f56 <__ssputs_r+0x72>
 8004f54:	463e      	mov	r6, r7
 8004f56:	4632      	mov	r2, r6
 8004f58:	4641      	mov	r1, r8
 8004f5a:	6820      	ldr	r0, [r4, #0]
 8004f5c:	f000 faac 	bl	80054b8 <memmove>
 8004f60:	2000      	movs	r0, #0
 8004f62:	68a3      	ldr	r3, [r4, #8]
 8004f64:	1b9b      	subs	r3, r3, r6
 8004f66:	60a3      	str	r3, [r4, #8]
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	4433      	add	r3, r6
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f72:	462a      	mov	r2, r5
 8004f74:	f000 fad8 	bl	8005528 <_realloc_r>
 8004f78:	4606      	mov	r6, r0
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d1e0      	bne.n	8004f40 <__ssputs_r+0x5c>
 8004f7e:	4650      	mov	r0, sl
 8004f80:	6921      	ldr	r1, [r4, #16]
 8004f82:	f7ff feb9 	bl	8004cf8 <_free_r>
 8004f86:	230c      	movs	r3, #12
 8004f88:	f8ca 3000 	str.w	r3, [sl]
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f96:	81a3      	strh	r3, [r4, #12]
 8004f98:	e7e9      	b.n	8004f6e <__ssputs_r+0x8a>
	...

08004f9c <_svfiprintf_r>:
 8004f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa0:	4698      	mov	r8, r3
 8004fa2:	898b      	ldrh	r3, [r1, #12]
 8004fa4:	4607      	mov	r7, r0
 8004fa6:	061b      	lsls	r3, r3, #24
 8004fa8:	460d      	mov	r5, r1
 8004faa:	4614      	mov	r4, r2
 8004fac:	b09d      	sub	sp, #116	@ 0x74
 8004fae:	d510      	bpl.n	8004fd2 <_svfiprintf_r+0x36>
 8004fb0:	690b      	ldr	r3, [r1, #16]
 8004fb2:	b973      	cbnz	r3, 8004fd2 <_svfiprintf_r+0x36>
 8004fb4:	2140      	movs	r1, #64	@ 0x40
 8004fb6:	f7ff ff09 	bl	8004dcc <_malloc_r>
 8004fba:	6028      	str	r0, [r5, #0]
 8004fbc:	6128      	str	r0, [r5, #16]
 8004fbe:	b930      	cbnz	r0, 8004fce <_svfiprintf_r+0x32>
 8004fc0:	230c      	movs	r3, #12
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc8:	b01d      	add	sp, #116	@ 0x74
 8004fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fce:	2340      	movs	r3, #64	@ 0x40
 8004fd0:	616b      	str	r3, [r5, #20]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fd6:	2320      	movs	r3, #32
 8004fd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004fdc:	2330      	movs	r3, #48	@ 0x30
 8004fde:	f04f 0901 	mov.w	r9, #1
 8004fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fe6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005180 <_svfiprintf_r+0x1e4>
 8004fea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004fee:	4623      	mov	r3, r4
 8004ff0:	469a      	mov	sl, r3
 8004ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ff6:	b10a      	cbz	r2, 8004ffc <_svfiprintf_r+0x60>
 8004ff8:	2a25      	cmp	r2, #37	@ 0x25
 8004ffa:	d1f9      	bne.n	8004ff0 <_svfiprintf_r+0x54>
 8004ffc:	ebba 0b04 	subs.w	fp, sl, r4
 8005000:	d00b      	beq.n	800501a <_svfiprintf_r+0x7e>
 8005002:	465b      	mov	r3, fp
 8005004:	4622      	mov	r2, r4
 8005006:	4629      	mov	r1, r5
 8005008:	4638      	mov	r0, r7
 800500a:	f7ff ff6b 	bl	8004ee4 <__ssputs_r>
 800500e:	3001      	adds	r0, #1
 8005010:	f000 80a7 	beq.w	8005162 <_svfiprintf_r+0x1c6>
 8005014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005016:	445a      	add	r2, fp
 8005018:	9209      	str	r2, [sp, #36]	@ 0x24
 800501a:	f89a 3000 	ldrb.w	r3, [sl]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 809f 	beq.w	8005162 <_svfiprintf_r+0x1c6>
 8005024:	2300      	movs	r3, #0
 8005026:	f04f 32ff 	mov.w	r2, #4294967295
 800502a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800502e:	f10a 0a01 	add.w	sl, sl, #1
 8005032:	9304      	str	r3, [sp, #16]
 8005034:	9307      	str	r3, [sp, #28]
 8005036:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800503a:	931a      	str	r3, [sp, #104]	@ 0x68
 800503c:	4654      	mov	r4, sl
 800503e:	2205      	movs	r2, #5
 8005040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005044:	484e      	ldr	r0, [pc, #312]	@ (8005180 <_svfiprintf_r+0x1e4>)
 8005046:	f000 fa61 	bl	800550c <memchr>
 800504a:	9a04      	ldr	r2, [sp, #16]
 800504c:	b9d8      	cbnz	r0, 8005086 <_svfiprintf_r+0xea>
 800504e:	06d0      	lsls	r0, r2, #27
 8005050:	bf44      	itt	mi
 8005052:	2320      	movmi	r3, #32
 8005054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005058:	0711      	lsls	r1, r2, #28
 800505a:	bf44      	itt	mi
 800505c:	232b      	movmi	r3, #43	@ 0x2b
 800505e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005062:	f89a 3000 	ldrb.w	r3, [sl]
 8005066:	2b2a      	cmp	r3, #42	@ 0x2a
 8005068:	d015      	beq.n	8005096 <_svfiprintf_r+0xfa>
 800506a:	4654      	mov	r4, sl
 800506c:	2000      	movs	r0, #0
 800506e:	f04f 0c0a 	mov.w	ip, #10
 8005072:	9a07      	ldr	r2, [sp, #28]
 8005074:	4621      	mov	r1, r4
 8005076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800507a:	3b30      	subs	r3, #48	@ 0x30
 800507c:	2b09      	cmp	r3, #9
 800507e:	d94b      	bls.n	8005118 <_svfiprintf_r+0x17c>
 8005080:	b1b0      	cbz	r0, 80050b0 <_svfiprintf_r+0x114>
 8005082:	9207      	str	r2, [sp, #28]
 8005084:	e014      	b.n	80050b0 <_svfiprintf_r+0x114>
 8005086:	eba0 0308 	sub.w	r3, r0, r8
 800508a:	fa09 f303 	lsl.w	r3, r9, r3
 800508e:	4313      	orrs	r3, r2
 8005090:	46a2      	mov	sl, r4
 8005092:	9304      	str	r3, [sp, #16]
 8005094:	e7d2      	b.n	800503c <_svfiprintf_r+0xa0>
 8005096:	9b03      	ldr	r3, [sp, #12]
 8005098:	1d19      	adds	r1, r3, #4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	9103      	str	r1, [sp, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bfbb      	ittet	lt
 80050a2:	425b      	neglt	r3, r3
 80050a4:	f042 0202 	orrlt.w	r2, r2, #2
 80050a8:	9307      	strge	r3, [sp, #28]
 80050aa:	9307      	strlt	r3, [sp, #28]
 80050ac:	bfb8      	it	lt
 80050ae:	9204      	strlt	r2, [sp, #16]
 80050b0:	7823      	ldrb	r3, [r4, #0]
 80050b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80050b4:	d10a      	bne.n	80050cc <_svfiprintf_r+0x130>
 80050b6:	7863      	ldrb	r3, [r4, #1]
 80050b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80050ba:	d132      	bne.n	8005122 <_svfiprintf_r+0x186>
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	3402      	adds	r4, #2
 80050c0:	1d1a      	adds	r2, r3, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	9203      	str	r2, [sp, #12]
 80050c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050ca:	9305      	str	r3, [sp, #20]
 80050cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005184 <_svfiprintf_r+0x1e8>
 80050d0:	2203      	movs	r2, #3
 80050d2:	4650      	mov	r0, sl
 80050d4:	7821      	ldrb	r1, [r4, #0]
 80050d6:	f000 fa19 	bl	800550c <memchr>
 80050da:	b138      	cbz	r0, 80050ec <_svfiprintf_r+0x150>
 80050dc:	2240      	movs	r2, #64	@ 0x40
 80050de:	9b04      	ldr	r3, [sp, #16]
 80050e0:	eba0 000a 	sub.w	r0, r0, sl
 80050e4:	4082      	lsls	r2, r0
 80050e6:	4313      	orrs	r3, r2
 80050e8:	3401      	adds	r4, #1
 80050ea:	9304      	str	r3, [sp, #16]
 80050ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f0:	2206      	movs	r2, #6
 80050f2:	4825      	ldr	r0, [pc, #148]	@ (8005188 <_svfiprintf_r+0x1ec>)
 80050f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050f8:	f000 fa08 	bl	800550c <memchr>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d036      	beq.n	800516e <_svfiprintf_r+0x1d2>
 8005100:	4b22      	ldr	r3, [pc, #136]	@ (800518c <_svfiprintf_r+0x1f0>)
 8005102:	bb1b      	cbnz	r3, 800514c <_svfiprintf_r+0x1b0>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	3307      	adds	r3, #7
 8005108:	f023 0307 	bic.w	r3, r3, #7
 800510c:	3308      	adds	r3, #8
 800510e:	9303      	str	r3, [sp, #12]
 8005110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005112:	4433      	add	r3, r6
 8005114:	9309      	str	r3, [sp, #36]	@ 0x24
 8005116:	e76a      	b.n	8004fee <_svfiprintf_r+0x52>
 8005118:	460c      	mov	r4, r1
 800511a:	2001      	movs	r0, #1
 800511c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005120:	e7a8      	b.n	8005074 <_svfiprintf_r+0xd8>
 8005122:	2300      	movs	r3, #0
 8005124:	f04f 0c0a 	mov.w	ip, #10
 8005128:	4619      	mov	r1, r3
 800512a:	3401      	adds	r4, #1
 800512c:	9305      	str	r3, [sp, #20]
 800512e:	4620      	mov	r0, r4
 8005130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005134:	3a30      	subs	r2, #48	@ 0x30
 8005136:	2a09      	cmp	r2, #9
 8005138:	d903      	bls.n	8005142 <_svfiprintf_r+0x1a6>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0c6      	beq.n	80050cc <_svfiprintf_r+0x130>
 800513e:	9105      	str	r1, [sp, #20]
 8005140:	e7c4      	b.n	80050cc <_svfiprintf_r+0x130>
 8005142:	4604      	mov	r4, r0
 8005144:	2301      	movs	r3, #1
 8005146:	fb0c 2101 	mla	r1, ip, r1, r2
 800514a:	e7f0      	b.n	800512e <_svfiprintf_r+0x192>
 800514c:	ab03      	add	r3, sp, #12
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	462a      	mov	r2, r5
 8005152:	4638      	mov	r0, r7
 8005154:	4b0e      	ldr	r3, [pc, #56]	@ (8005190 <_svfiprintf_r+0x1f4>)
 8005156:	a904      	add	r1, sp, #16
 8005158:	f3af 8000 	nop.w
 800515c:	1c42      	adds	r2, r0, #1
 800515e:	4606      	mov	r6, r0
 8005160:	d1d6      	bne.n	8005110 <_svfiprintf_r+0x174>
 8005162:	89ab      	ldrh	r3, [r5, #12]
 8005164:	065b      	lsls	r3, r3, #25
 8005166:	f53f af2d 	bmi.w	8004fc4 <_svfiprintf_r+0x28>
 800516a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800516c:	e72c      	b.n	8004fc8 <_svfiprintf_r+0x2c>
 800516e:	ab03      	add	r3, sp, #12
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	462a      	mov	r2, r5
 8005174:	4638      	mov	r0, r7
 8005176:	4b06      	ldr	r3, [pc, #24]	@ (8005190 <_svfiprintf_r+0x1f4>)
 8005178:	a904      	add	r1, sp, #16
 800517a:	f000 f87d 	bl	8005278 <_printf_i>
 800517e:	e7ed      	b.n	800515c <_svfiprintf_r+0x1c0>
 8005180:	080059cb 	.word	0x080059cb
 8005184:	080059d1 	.word	0x080059d1
 8005188:	080059d5 	.word	0x080059d5
 800518c:	00000000 	.word	0x00000000
 8005190:	08004ee5 	.word	0x08004ee5

08005194 <_printf_common>:
 8005194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005198:	4616      	mov	r6, r2
 800519a:	4698      	mov	r8, r3
 800519c:	688a      	ldr	r2, [r1, #8]
 800519e:	690b      	ldr	r3, [r1, #16]
 80051a0:	4607      	mov	r7, r0
 80051a2:	4293      	cmp	r3, r2
 80051a4:	bfb8      	it	lt
 80051a6:	4613      	movlt	r3, r2
 80051a8:	6033      	str	r3, [r6, #0]
 80051aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051ae:	460c      	mov	r4, r1
 80051b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051b4:	b10a      	cbz	r2, 80051ba <_printf_common+0x26>
 80051b6:	3301      	adds	r3, #1
 80051b8:	6033      	str	r3, [r6, #0]
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	0699      	lsls	r1, r3, #26
 80051be:	bf42      	ittt	mi
 80051c0:	6833      	ldrmi	r3, [r6, #0]
 80051c2:	3302      	addmi	r3, #2
 80051c4:	6033      	strmi	r3, [r6, #0]
 80051c6:	6825      	ldr	r5, [r4, #0]
 80051c8:	f015 0506 	ands.w	r5, r5, #6
 80051cc:	d106      	bne.n	80051dc <_printf_common+0x48>
 80051ce:	f104 0a19 	add.w	sl, r4, #25
 80051d2:	68e3      	ldr	r3, [r4, #12]
 80051d4:	6832      	ldr	r2, [r6, #0]
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	42ab      	cmp	r3, r5
 80051da:	dc2b      	bgt.n	8005234 <_printf_common+0xa0>
 80051dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051e0:	6822      	ldr	r2, [r4, #0]
 80051e2:	3b00      	subs	r3, #0
 80051e4:	bf18      	it	ne
 80051e6:	2301      	movne	r3, #1
 80051e8:	0692      	lsls	r2, r2, #26
 80051ea:	d430      	bmi.n	800524e <_printf_common+0xba>
 80051ec:	4641      	mov	r1, r8
 80051ee:	4638      	mov	r0, r7
 80051f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051f4:	47c8      	blx	r9
 80051f6:	3001      	adds	r0, #1
 80051f8:	d023      	beq.n	8005242 <_printf_common+0xae>
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	6922      	ldr	r2, [r4, #16]
 80051fe:	f003 0306 	and.w	r3, r3, #6
 8005202:	2b04      	cmp	r3, #4
 8005204:	bf14      	ite	ne
 8005206:	2500      	movne	r5, #0
 8005208:	6833      	ldreq	r3, [r6, #0]
 800520a:	f04f 0600 	mov.w	r6, #0
 800520e:	bf08      	it	eq
 8005210:	68e5      	ldreq	r5, [r4, #12]
 8005212:	f104 041a 	add.w	r4, r4, #26
 8005216:	bf08      	it	eq
 8005218:	1aed      	subeq	r5, r5, r3
 800521a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800521e:	bf08      	it	eq
 8005220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005224:	4293      	cmp	r3, r2
 8005226:	bfc4      	itt	gt
 8005228:	1a9b      	subgt	r3, r3, r2
 800522a:	18ed      	addgt	r5, r5, r3
 800522c:	42b5      	cmp	r5, r6
 800522e:	d11a      	bne.n	8005266 <_printf_common+0xd2>
 8005230:	2000      	movs	r0, #0
 8005232:	e008      	b.n	8005246 <_printf_common+0xb2>
 8005234:	2301      	movs	r3, #1
 8005236:	4652      	mov	r2, sl
 8005238:	4641      	mov	r1, r8
 800523a:	4638      	mov	r0, r7
 800523c:	47c8      	blx	r9
 800523e:	3001      	adds	r0, #1
 8005240:	d103      	bne.n	800524a <_printf_common+0xb6>
 8005242:	f04f 30ff 	mov.w	r0, #4294967295
 8005246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524a:	3501      	adds	r5, #1
 800524c:	e7c1      	b.n	80051d2 <_printf_common+0x3e>
 800524e:	2030      	movs	r0, #48	@ 0x30
 8005250:	18e1      	adds	r1, r4, r3
 8005252:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800525c:	4422      	add	r2, r4
 800525e:	3302      	adds	r3, #2
 8005260:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005264:	e7c2      	b.n	80051ec <_printf_common+0x58>
 8005266:	2301      	movs	r3, #1
 8005268:	4622      	mov	r2, r4
 800526a:	4641      	mov	r1, r8
 800526c:	4638      	mov	r0, r7
 800526e:	47c8      	blx	r9
 8005270:	3001      	adds	r0, #1
 8005272:	d0e6      	beq.n	8005242 <_printf_common+0xae>
 8005274:	3601      	adds	r6, #1
 8005276:	e7d9      	b.n	800522c <_printf_common+0x98>

08005278 <_printf_i>:
 8005278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800527c:	7e0f      	ldrb	r7, [r1, #24]
 800527e:	4691      	mov	r9, r2
 8005280:	2f78      	cmp	r7, #120	@ 0x78
 8005282:	4680      	mov	r8, r0
 8005284:	460c      	mov	r4, r1
 8005286:	469a      	mov	sl, r3
 8005288:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800528a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800528e:	d807      	bhi.n	80052a0 <_printf_i+0x28>
 8005290:	2f62      	cmp	r7, #98	@ 0x62
 8005292:	d80a      	bhi.n	80052aa <_printf_i+0x32>
 8005294:	2f00      	cmp	r7, #0
 8005296:	f000 80d3 	beq.w	8005440 <_printf_i+0x1c8>
 800529a:	2f58      	cmp	r7, #88	@ 0x58
 800529c:	f000 80ba 	beq.w	8005414 <_printf_i+0x19c>
 80052a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052a8:	e03a      	b.n	8005320 <_printf_i+0xa8>
 80052aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052ae:	2b15      	cmp	r3, #21
 80052b0:	d8f6      	bhi.n	80052a0 <_printf_i+0x28>
 80052b2:	a101      	add	r1, pc, #4	@ (adr r1, 80052b8 <_printf_i+0x40>)
 80052b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052b8:	08005311 	.word	0x08005311
 80052bc:	08005325 	.word	0x08005325
 80052c0:	080052a1 	.word	0x080052a1
 80052c4:	080052a1 	.word	0x080052a1
 80052c8:	080052a1 	.word	0x080052a1
 80052cc:	080052a1 	.word	0x080052a1
 80052d0:	08005325 	.word	0x08005325
 80052d4:	080052a1 	.word	0x080052a1
 80052d8:	080052a1 	.word	0x080052a1
 80052dc:	080052a1 	.word	0x080052a1
 80052e0:	080052a1 	.word	0x080052a1
 80052e4:	08005427 	.word	0x08005427
 80052e8:	0800534f 	.word	0x0800534f
 80052ec:	080053e1 	.word	0x080053e1
 80052f0:	080052a1 	.word	0x080052a1
 80052f4:	080052a1 	.word	0x080052a1
 80052f8:	08005449 	.word	0x08005449
 80052fc:	080052a1 	.word	0x080052a1
 8005300:	0800534f 	.word	0x0800534f
 8005304:	080052a1 	.word	0x080052a1
 8005308:	080052a1 	.word	0x080052a1
 800530c:	080053e9 	.word	0x080053e9
 8005310:	6833      	ldr	r3, [r6, #0]
 8005312:	1d1a      	adds	r2, r3, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6032      	str	r2, [r6, #0]
 8005318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800531c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005320:	2301      	movs	r3, #1
 8005322:	e09e      	b.n	8005462 <_printf_i+0x1ea>
 8005324:	6833      	ldr	r3, [r6, #0]
 8005326:	6820      	ldr	r0, [r4, #0]
 8005328:	1d19      	adds	r1, r3, #4
 800532a:	6031      	str	r1, [r6, #0]
 800532c:	0606      	lsls	r6, r0, #24
 800532e:	d501      	bpl.n	8005334 <_printf_i+0xbc>
 8005330:	681d      	ldr	r5, [r3, #0]
 8005332:	e003      	b.n	800533c <_printf_i+0xc4>
 8005334:	0645      	lsls	r5, r0, #25
 8005336:	d5fb      	bpl.n	8005330 <_printf_i+0xb8>
 8005338:	f9b3 5000 	ldrsh.w	r5, [r3]
 800533c:	2d00      	cmp	r5, #0
 800533e:	da03      	bge.n	8005348 <_printf_i+0xd0>
 8005340:	232d      	movs	r3, #45	@ 0x2d
 8005342:	426d      	negs	r5, r5
 8005344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005348:	230a      	movs	r3, #10
 800534a:	4859      	ldr	r0, [pc, #356]	@ (80054b0 <_printf_i+0x238>)
 800534c:	e011      	b.n	8005372 <_printf_i+0xfa>
 800534e:	6821      	ldr	r1, [r4, #0]
 8005350:	6833      	ldr	r3, [r6, #0]
 8005352:	0608      	lsls	r0, r1, #24
 8005354:	f853 5b04 	ldr.w	r5, [r3], #4
 8005358:	d402      	bmi.n	8005360 <_printf_i+0xe8>
 800535a:	0649      	lsls	r1, r1, #25
 800535c:	bf48      	it	mi
 800535e:	b2ad      	uxthmi	r5, r5
 8005360:	2f6f      	cmp	r7, #111	@ 0x6f
 8005362:	6033      	str	r3, [r6, #0]
 8005364:	bf14      	ite	ne
 8005366:	230a      	movne	r3, #10
 8005368:	2308      	moveq	r3, #8
 800536a:	4851      	ldr	r0, [pc, #324]	@ (80054b0 <_printf_i+0x238>)
 800536c:	2100      	movs	r1, #0
 800536e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005372:	6866      	ldr	r6, [r4, #4]
 8005374:	2e00      	cmp	r6, #0
 8005376:	bfa8      	it	ge
 8005378:	6821      	ldrge	r1, [r4, #0]
 800537a:	60a6      	str	r6, [r4, #8]
 800537c:	bfa4      	itt	ge
 800537e:	f021 0104 	bicge.w	r1, r1, #4
 8005382:	6021      	strge	r1, [r4, #0]
 8005384:	b90d      	cbnz	r5, 800538a <_printf_i+0x112>
 8005386:	2e00      	cmp	r6, #0
 8005388:	d04b      	beq.n	8005422 <_printf_i+0x1aa>
 800538a:	4616      	mov	r6, r2
 800538c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005390:	fb03 5711 	mls	r7, r3, r1, r5
 8005394:	5dc7      	ldrb	r7, [r0, r7]
 8005396:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800539a:	462f      	mov	r7, r5
 800539c:	42bb      	cmp	r3, r7
 800539e:	460d      	mov	r5, r1
 80053a0:	d9f4      	bls.n	800538c <_printf_i+0x114>
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d10b      	bne.n	80053be <_printf_i+0x146>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	07df      	lsls	r7, r3, #31
 80053aa:	d508      	bpl.n	80053be <_printf_i+0x146>
 80053ac:	6923      	ldr	r3, [r4, #16]
 80053ae:	6861      	ldr	r1, [r4, #4]
 80053b0:	4299      	cmp	r1, r3
 80053b2:	bfde      	ittt	le
 80053b4:	2330      	movle	r3, #48	@ 0x30
 80053b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053be:	1b92      	subs	r2, r2, r6
 80053c0:	6122      	str	r2, [r4, #16]
 80053c2:	464b      	mov	r3, r9
 80053c4:	4621      	mov	r1, r4
 80053c6:	4640      	mov	r0, r8
 80053c8:	f8cd a000 	str.w	sl, [sp]
 80053cc:	aa03      	add	r2, sp, #12
 80053ce:	f7ff fee1 	bl	8005194 <_printf_common>
 80053d2:	3001      	adds	r0, #1
 80053d4:	d14a      	bne.n	800546c <_printf_i+0x1f4>
 80053d6:	f04f 30ff 	mov.w	r0, #4294967295
 80053da:	b004      	add	sp, #16
 80053dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	f043 0320 	orr.w	r3, r3, #32
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	2778      	movs	r7, #120	@ 0x78
 80053ea:	4832      	ldr	r0, [pc, #200]	@ (80054b4 <_printf_i+0x23c>)
 80053ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	6831      	ldr	r1, [r6, #0]
 80053f4:	061f      	lsls	r7, r3, #24
 80053f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80053fa:	d402      	bmi.n	8005402 <_printf_i+0x18a>
 80053fc:	065f      	lsls	r7, r3, #25
 80053fe:	bf48      	it	mi
 8005400:	b2ad      	uxthmi	r5, r5
 8005402:	6031      	str	r1, [r6, #0]
 8005404:	07d9      	lsls	r1, r3, #31
 8005406:	bf44      	itt	mi
 8005408:	f043 0320 	orrmi.w	r3, r3, #32
 800540c:	6023      	strmi	r3, [r4, #0]
 800540e:	b11d      	cbz	r5, 8005418 <_printf_i+0x1a0>
 8005410:	2310      	movs	r3, #16
 8005412:	e7ab      	b.n	800536c <_printf_i+0xf4>
 8005414:	4826      	ldr	r0, [pc, #152]	@ (80054b0 <_printf_i+0x238>)
 8005416:	e7e9      	b.n	80053ec <_printf_i+0x174>
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	f023 0320 	bic.w	r3, r3, #32
 800541e:	6023      	str	r3, [r4, #0]
 8005420:	e7f6      	b.n	8005410 <_printf_i+0x198>
 8005422:	4616      	mov	r6, r2
 8005424:	e7bd      	b.n	80053a2 <_printf_i+0x12a>
 8005426:	6833      	ldr	r3, [r6, #0]
 8005428:	6825      	ldr	r5, [r4, #0]
 800542a:	1d18      	adds	r0, r3, #4
 800542c:	6961      	ldr	r1, [r4, #20]
 800542e:	6030      	str	r0, [r6, #0]
 8005430:	062e      	lsls	r6, r5, #24
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	d501      	bpl.n	800543a <_printf_i+0x1c2>
 8005436:	6019      	str	r1, [r3, #0]
 8005438:	e002      	b.n	8005440 <_printf_i+0x1c8>
 800543a:	0668      	lsls	r0, r5, #25
 800543c:	d5fb      	bpl.n	8005436 <_printf_i+0x1be>
 800543e:	8019      	strh	r1, [r3, #0]
 8005440:	2300      	movs	r3, #0
 8005442:	4616      	mov	r6, r2
 8005444:	6123      	str	r3, [r4, #16]
 8005446:	e7bc      	b.n	80053c2 <_printf_i+0x14a>
 8005448:	6833      	ldr	r3, [r6, #0]
 800544a:	2100      	movs	r1, #0
 800544c:	1d1a      	adds	r2, r3, #4
 800544e:	6032      	str	r2, [r6, #0]
 8005450:	681e      	ldr	r6, [r3, #0]
 8005452:	6862      	ldr	r2, [r4, #4]
 8005454:	4630      	mov	r0, r6
 8005456:	f000 f859 	bl	800550c <memchr>
 800545a:	b108      	cbz	r0, 8005460 <_printf_i+0x1e8>
 800545c:	1b80      	subs	r0, r0, r6
 800545e:	6060      	str	r0, [r4, #4]
 8005460:	6863      	ldr	r3, [r4, #4]
 8005462:	6123      	str	r3, [r4, #16]
 8005464:	2300      	movs	r3, #0
 8005466:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800546a:	e7aa      	b.n	80053c2 <_printf_i+0x14a>
 800546c:	4632      	mov	r2, r6
 800546e:	4649      	mov	r1, r9
 8005470:	4640      	mov	r0, r8
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	47d0      	blx	sl
 8005476:	3001      	adds	r0, #1
 8005478:	d0ad      	beq.n	80053d6 <_printf_i+0x15e>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	079b      	lsls	r3, r3, #30
 800547e:	d413      	bmi.n	80054a8 <_printf_i+0x230>
 8005480:	68e0      	ldr	r0, [r4, #12]
 8005482:	9b03      	ldr	r3, [sp, #12]
 8005484:	4298      	cmp	r0, r3
 8005486:	bfb8      	it	lt
 8005488:	4618      	movlt	r0, r3
 800548a:	e7a6      	b.n	80053da <_printf_i+0x162>
 800548c:	2301      	movs	r3, #1
 800548e:	4632      	mov	r2, r6
 8005490:	4649      	mov	r1, r9
 8005492:	4640      	mov	r0, r8
 8005494:	47d0      	blx	sl
 8005496:	3001      	adds	r0, #1
 8005498:	d09d      	beq.n	80053d6 <_printf_i+0x15e>
 800549a:	3501      	adds	r5, #1
 800549c:	68e3      	ldr	r3, [r4, #12]
 800549e:	9903      	ldr	r1, [sp, #12]
 80054a0:	1a5b      	subs	r3, r3, r1
 80054a2:	42ab      	cmp	r3, r5
 80054a4:	dcf2      	bgt.n	800548c <_printf_i+0x214>
 80054a6:	e7eb      	b.n	8005480 <_printf_i+0x208>
 80054a8:	2500      	movs	r5, #0
 80054aa:	f104 0619 	add.w	r6, r4, #25
 80054ae:	e7f5      	b.n	800549c <_printf_i+0x224>
 80054b0:	080059dc 	.word	0x080059dc
 80054b4:	080059ed 	.word	0x080059ed

080054b8 <memmove>:
 80054b8:	4288      	cmp	r0, r1
 80054ba:	b510      	push	{r4, lr}
 80054bc:	eb01 0402 	add.w	r4, r1, r2
 80054c0:	d902      	bls.n	80054c8 <memmove+0x10>
 80054c2:	4284      	cmp	r4, r0
 80054c4:	4623      	mov	r3, r4
 80054c6:	d807      	bhi.n	80054d8 <memmove+0x20>
 80054c8:	1e43      	subs	r3, r0, #1
 80054ca:	42a1      	cmp	r1, r4
 80054cc:	d008      	beq.n	80054e0 <memmove+0x28>
 80054ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054d6:	e7f8      	b.n	80054ca <memmove+0x12>
 80054d8:	4601      	mov	r1, r0
 80054da:	4402      	add	r2, r0
 80054dc:	428a      	cmp	r2, r1
 80054de:	d100      	bne.n	80054e2 <memmove+0x2a>
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054ea:	e7f7      	b.n	80054dc <memmove+0x24>

080054ec <_sbrk_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	2300      	movs	r3, #0
 80054f0:	4d05      	ldr	r5, [pc, #20]	@ (8005508 <_sbrk_r+0x1c>)
 80054f2:	4604      	mov	r4, r0
 80054f4:	4608      	mov	r0, r1
 80054f6:	602b      	str	r3, [r5, #0]
 80054f8:	f7fb fb24 	bl	8000b44 <_sbrk>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_sbrk_r+0x1a>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_sbrk_r+0x1a>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	20001224 	.word	0x20001224

0800550c <memchr>:
 800550c:	4603      	mov	r3, r0
 800550e:	b510      	push	{r4, lr}
 8005510:	b2c9      	uxtb	r1, r1
 8005512:	4402      	add	r2, r0
 8005514:	4293      	cmp	r3, r2
 8005516:	4618      	mov	r0, r3
 8005518:	d101      	bne.n	800551e <memchr+0x12>
 800551a:	2000      	movs	r0, #0
 800551c:	e003      	b.n	8005526 <memchr+0x1a>
 800551e:	7804      	ldrb	r4, [r0, #0]
 8005520:	3301      	adds	r3, #1
 8005522:	428c      	cmp	r4, r1
 8005524:	d1f6      	bne.n	8005514 <memchr+0x8>
 8005526:	bd10      	pop	{r4, pc}

08005528 <_realloc_r>:
 8005528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800552c:	4680      	mov	r8, r0
 800552e:	4615      	mov	r5, r2
 8005530:	460c      	mov	r4, r1
 8005532:	b921      	cbnz	r1, 800553e <_realloc_r+0x16>
 8005534:	4611      	mov	r1, r2
 8005536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800553a:	f7ff bc47 	b.w	8004dcc <_malloc_r>
 800553e:	b92a      	cbnz	r2, 800554c <_realloc_r+0x24>
 8005540:	f7ff fbda 	bl	8004cf8 <_free_r>
 8005544:	2400      	movs	r4, #0
 8005546:	4620      	mov	r0, r4
 8005548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800554c:	f000 f81a 	bl	8005584 <_malloc_usable_size_r>
 8005550:	4285      	cmp	r5, r0
 8005552:	4606      	mov	r6, r0
 8005554:	d802      	bhi.n	800555c <_realloc_r+0x34>
 8005556:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800555a:	d8f4      	bhi.n	8005546 <_realloc_r+0x1e>
 800555c:	4629      	mov	r1, r5
 800555e:	4640      	mov	r0, r8
 8005560:	f7ff fc34 	bl	8004dcc <_malloc_r>
 8005564:	4607      	mov	r7, r0
 8005566:	2800      	cmp	r0, #0
 8005568:	d0ec      	beq.n	8005544 <_realloc_r+0x1c>
 800556a:	42b5      	cmp	r5, r6
 800556c:	462a      	mov	r2, r5
 800556e:	4621      	mov	r1, r4
 8005570:	bf28      	it	cs
 8005572:	4632      	movcs	r2, r6
 8005574:	f7ff fbb2 	bl	8004cdc <memcpy>
 8005578:	4621      	mov	r1, r4
 800557a:	4640      	mov	r0, r8
 800557c:	f7ff fbbc 	bl	8004cf8 <_free_r>
 8005580:	463c      	mov	r4, r7
 8005582:	e7e0      	b.n	8005546 <_realloc_r+0x1e>

08005584 <_malloc_usable_size_r>:
 8005584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005588:	1f18      	subs	r0, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	bfbc      	itt	lt
 800558e:	580b      	ldrlt	r3, [r1, r0]
 8005590:	18c0      	addlt	r0, r0, r3
 8005592:	4770      	bx	lr

08005594 <_init>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	bf00      	nop
 8005598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559a:	bc08      	pop	{r3}
 800559c:	469e      	mov	lr, r3
 800559e:	4770      	bx	lr

080055a0 <_fini>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	bf00      	nop
 80055a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a6:	bc08      	pop	{r3}
 80055a8:	469e      	mov	lr, r3
 80055aa:	4770      	bx	lr
