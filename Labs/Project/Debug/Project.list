
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000547c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800558c  0800558c  0000658c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e0  080059e0  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  080059e0  080059e0  000069e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059e8  080059e8  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059e8  080059e8  000069e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059ec  080059ec  000069ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080059f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d0  20000064  08005a54  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001234  08005a54  00007234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120d0  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d28  00000000  00000000  0001915d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0001be88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9a  00000000  00000000  0001cff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019790  00000000  00000000  0001dd92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137a6  00000000  00000000  00037522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000934f3  00000000  00000000  0004acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de1bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e30  00000000  00000000  000de200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000e3030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08005574 	.word	0x08005574

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08005574 	.word	0x08005574

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	@ (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	@ (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	@ 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000080 	.word	0x20000080
 800018c:	200000d4 	.word	0x200000d4

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b098      	sub	sp, #96	@ 0x60
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fd27 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f897 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f901 	bl	80003a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001a2:	f000 f8d5 	bl	8000350 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN 2 */
  floorMutex = xSemaphoreCreateMutex();
 80001a6:	2001      	movs	r0, #1
 80001a8:	f002 fbd9 	bl	800295e <xQueueCreateMutex>
 80001ac:	4603      	mov	r3, r0
 80001ae:	4a3c      	ldr	r2, [pc, #240]	@ (80002a0 <main+0x110>)
 80001b0:	6013      	str	r3, [r2, #0]
  if (floorMutex == NULL) {
 80001b2:	4b3b      	ldr	r3, [pc, #236]	@ (80002a0 <main+0x110>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d101      	bne.n	80001be <main+0x2e>
      Error_Handler(); // Handle mutex creation failure
 80001ba:	f000 fb8d 	bl	80008d8 <Error_Handler>
  }

  emergencyMutex = xSemaphoreCreateMutex();
 80001be:	2001      	movs	r0, #1
 80001c0:	f002 fbcd 	bl	800295e <xQueueCreateMutex>
 80001c4:	4603      	mov	r3, r0
 80001c6:	4a37      	ldr	r2, [pc, #220]	@ (80002a4 <main+0x114>)
 80001c8:	6013      	str	r3, [r2, #0]
  if (emergencyMutex == NULL) {
 80001ca:	4b36      	ldr	r3, [pc, #216]	@ (80002a4 <main+0x114>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d101      	bne.n	80001d6 <main+0x46>
      Error_Handler(); // Handle mutex creation failure
 80001d2:	f000 fb81 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE END 2 */

  emergencyQueue = xQueueCreate(1, sizeof(int));
 80001d6:	2200      	movs	r2, #0
 80001d8:	2104      	movs	r1, #4
 80001da:	2001      	movs	r0, #1
 80001dc:	f002 fb4b 	bl	8002876 <xQueueGenericCreate>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a31      	ldr	r2, [pc, #196]	@ (80002a8 <main+0x118>)
 80001e4:	6013      	str	r3, [r2, #0]
  if (emergencyQueue == NULL) {
 80001e6:	4b30      	ldr	r3, [pc, #192]	@ (80002a8 <main+0x118>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d101      	bne.n	80001f2 <main+0x62>
      Error_Handler(); // Handle creation failure
 80001ee:	f000 fb73 	bl	80008d8 <Error_Handler>
  }

  floorQueue = xQueueCreate(2, sizeof(int));
 80001f2:	2200      	movs	r2, #0
 80001f4:	2104      	movs	r1, #4
 80001f6:	2002      	movs	r0, #2
 80001f8:	f002 fb3d 	bl	8002876 <xQueueGenericCreate>
 80001fc:	4603      	mov	r3, r0
 80001fe:	4a2b      	ldr	r2, [pc, #172]	@ (80002ac <main+0x11c>)
 8000200:	6013      	str	r3, [r2, #0]
  if (floorQueue == NULL) {
 8000202:	4b2a      	ldr	r3, [pc, #168]	@ (80002ac <main+0x11c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d101      	bne.n	800020e <main+0x7e>
      Error_Handler();
 800020a:	f000 fb65 	bl	80008d8 <Error_Handler>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of emergencySemaphore */
  osSemaphoreDef(emergencySemaphore);
 800020e:	2300      	movs	r3, #0
 8000210:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000212:	2300      	movs	r3, #0
 8000214:	65fb      	str	r3, [r7, #92]	@ 0x5c
  emergencySemaphoreHandle = osSemaphoreCreate(osSemaphore(emergencySemaphore), 1);
 8000216:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800021a:	2101      	movs	r1, #1
 800021c:	4618      	mov	r0, r3
 800021e:	f002 f961 	bl	80024e4 <osSemaphoreCreate>
 8000222:	4603      	mov	r3, r0
 8000224:	4a22      	ldr	r2, [pc, #136]	@ (80002b0 <main+0x120>)
 8000226:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of FloorSelectionT */
  osThreadDef(FloorSelectionT, FloorSelectionTaskHandle, osPriorityBelowNormal, 0, 128);
 8000228:	4b22      	ldr	r3, [pc, #136]	@ (80002b4 <main+0x124>)
 800022a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800022e:	461d      	mov	r5, r3
 8000230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000234:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000238:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FloorSelectionTHandle = osThreadCreate(osThread(FloorSelectionT), NULL);
 800023c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f002 f8ee 	bl	8002424 <osThreadCreate>
 8000248:	4603      	mov	r3, r0
 800024a:	4a1b      	ldr	r2, [pc, #108]	@ (80002b8 <main+0x128>)
 800024c:	6013      	str	r3, [r2, #0]

  /* definition and creation of ElevatorMovemen */
  osThreadDef(ElevatorMovemen, ElevatorMovementTaskHandle, osPriorityNormal, 0, 256);
 800024e:	4b1b      	ldr	r3, [pc, #108]	@ (80002bc <main+0x12c>)
 8000250:	f107 0420 	add.w	r4, r7, #32
 8000254:	461d      	mov	r5, r3
 8000256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800025e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ElevatorMovemenHandle = osThreadCreate(osThread(ElevatorMovemen), NULL);
 8000262:	f107 0320 	add.w	r3, r7, #32
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f002 f8db 	bl	8002424 <osThreadCreate>
 800026e:	4603      	mov	r3, r0
 8000270:	4a13      	ldr	r2, [pc, #76]	@ (80002c0 <main+0x130>)
 8000272:	6013      	str	r3, [r2, #0]

  /* definition and creation of DisplayUpdateTa */
  osThreadDef(DisplayUpdateTa, DisplayUpdateTaskHandle, osPriorityAboveNormal, 0, 128);
 8000274:	4b13      	ldr	r3, [pc, #76]	@ (80002c4 <main+0x134>)
 8000276:	1d3c      	adds	r4, r7, #4
 8000278:	461d      	mov	r5, r3
 800027a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800027e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000282:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayUpdateTaHandle = osThreadCreate(osThread(DisplayUpdateTa), NULL);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f002 f8ca 	bl	8002424 <osThreadCreate>
 8000290:	4603      	mov	r3, r0
 8000292:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <main+0x138>)
 8000294:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000296:	f002 f8be 	bl	8002416 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029a:	bf00      	nop
 800029c:	e7fd      	b.n	800029a <main+0x10a>
 800029e:	bf00      	nop
 80002a0:	2000033c 	.word	0x2000033c
 80002a4:	20000340 	.word	0x20000340
 80002a8:	20000330 	.word	0x20000330
 80002ac:	2000032c 	.word	0x2000032c
 80002b0:	20000328 	.word	0x20000328
 80002b4:	0800559c 	.word	0x0800559c
 80002b8:	2000031c 	.word	0x2000031c
 80002bc:	080055c8 	.word	0x080055c8
 80002c0:	20000320 	.word	0x20000320
 80002c4:	080055f4 	.word	0x080055f4
 80002c8:	20000324 	.word	0x20000324

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b090      	sub	sp, #64	@ 0x40
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2228      	movs	r2, #40	@ 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f004 fca8 	bl	8004c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ee:	2302      	movs	r3, #2
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2310      	movs	r3, #16
 80002f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002fe:	2300      	movs	r3, #0
 8000300:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000302:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	f107 0318 	add.w	r3, r7, #24
 800030c:	4618      	mov	r0, r3
 800030e:	f000 ff31 	bl	8001174 <HAL_RCC_OscConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000318:	f000 fade 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	230f      	movs	r3, #15
 800031e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000320:	2302      	movs	r3, #2
 8000322:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800032c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2102      	movs	r1, #2
 8000336:	4618      	mov	r0, r3
 8000338:	f001 f99e 	bl	8001678 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000342:	f000 fac9 	bl	80008d8 <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	3740      	adds	r7, #64	@ 0x40
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000354:	4b11      	ldr	r3, [pc, #68]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 8000356:	4a12      	ldr	r2, [pc, #72]	@ (80003a0 <MX_USART2_UART_Init+0x50>)
 8000358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800035a:	4b10      	ldr	r3, [pc, #64]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 800035c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000362:	4b0e      	ldr	r3, [pc, #56]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000368:	4b0c      	ldr	r3, [pc, #48]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 8000376:	220c      	movs	r2, #12
 8000378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037a:	4b08      	ldr	r3, [pc, #32]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	@ (800039c <MX_USART2_UART_Init+0x4c>)
 8000388:	f001 fd72 	bl	8001e70 <HAL_UART_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000392:	f000 faa1 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	200002d4 	.word	0x200002d4
 80003a0:	40004400 	.word	0x40004400

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a2c      	ldr	r2, [pc, #176]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003be:	f043 0310 	orr.w	r3, r3, #16
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0310 	and.w	r3, r3, #16
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d0:	4b27      	ldr	r3, [pc, #156]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a26      	ldr	r2, [pc, #152]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003d6:	f043 0320 	orr.w	r3, r3, #32
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b24      	ldr	r3, [pc, #144]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0320 	and.w	r3, r3, #32
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	4b21      	ldr	r3, [pc, #132]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a20      	ldr	r2, [pc, #128]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003ee:	f043 0304 	orr.w	r3, r3, #4
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000470 <MX_GPIO_Init+0xcc>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0304 	and.w	r3, r3, #4
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000400:	4b1b      	ldr	r3, [pc, #108]	@ (8000470 <MX_GPIO_Init+0xcc>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a1a      	ldr	r2, [pc, #104]	@ (8000470 <MX_GPIO_Init+0xcc>)
 8000406:	f043 0308 	orr.w	r3, r3, #8
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b18      	ldr	r3, [pc, #96]	@ (8000470 <MX_GPIO_Init+0xcc>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0308 	and.w	r3, r3, #8
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2120      	movs	r1, #32
 800041c:	4815      	ldr	r0, [pc, #84]	@ (8000474 <MX_GPIO_Init+0xd0>)
 800041e:	f000 fe79 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000422:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000428:	4b13      	ldr	r3, [pc, #76]	@ (8000478 <MX_GPIO_Init+0xd4>)
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	4619      	mov	r1, r3
 8000436:	4811      	ldr	r0, [pc, #68]	@ (800047c <MX_GPIO_Init+0xd8>)
 8000438:	f000 fce8 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800043c:	2320      	movs	r3, #32
 800043e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000440:	2301      	movs	r3, #1
 8000442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	2302      	movs	r3, #2
 800044a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	4808      	ldr	r0, [pc, #32]	@ (8000474 <MX_GPIO_Init+0xd0>)
 8000454:	f000 fcda 	bl	8000e0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000458:	2200      	movs	r2, #0
 800045a:	2105      	movs	r1, #5
 800045c:	2028      	movs	r0, #40	@ 0x28
 800045e:	f000 fcaa 	bl	8000db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000462:	2028      	movs	r0, #40	@ 0x28
 8000464:	f000 fcc3 	bl	8000dee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000468:	bf00      	nop
 800046a:	3720      	adds	r7, #32
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40021000 	.word	0x40021000
 8000474:	40010800 	.word	0x40010800
 8000478:	10110000 	.word	0x10110000
 800047c:	40011000 	.word	0x40011000

08000480 <CLI_Transmit>:

/* USER CODE BEGIN 4 */


void CLI_Transmit(const char *message) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f7ff fe61 	bl	8000150 <strlen>
 800048e:	4603      	mov	r3, r0
 8000490:	b29a      	uxth	r2, r3
 8000492:	f04f 33ff 	mov.w	r3, #4294967295
 8000496:	6879      	ldr	r1, [r7, #4]
 8000498:	4803      	ldr	r0, [pc, #12]	@ (80004a8 <CLI_Transmit+0x28>)
 800049a:	f001 fd39 	bl	8001f10 <HAL_UART_Transmit>
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200002d4 	.word	0x200002d4

080004ac <CLI_Receive>:


#define RX_BUFFER_SIZE 100
char rx_buffer[RX_BUFFER_SIZE];

int CLI_Receive(char *buffer, uint16_t buffer_size) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	460b      	mov	r3, r1
 80004b6:	807b      	strh	r3, [r7, #2]
    uint16_t index = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	81fb      	strh	r3, [r7, #14]
    uint8_t rx_char;

    while (index < buffer_size - 1) {
 80004bc:	e02a      	b.n	8000514 <CLI_Receive+0x68>
        if (HAL_UART_Receive(&huart2, &rx_char, 1, HAL_MAX_DELAY) == HAL_OK) {
 80004be:	f107 010d 	add.w	r1, r7, #13
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295
 80004c6:	2201      	movs	r2, #1
 80004c8:	481a      	ldr	r0, [pc, #104]	@ (8000534 <CLI_Receive+0x88>)
 80004ca:	f001 fdac 	bl	8002026 <HAL_UART_Receive>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d11d      	bne.n	8000510 <CLI_Receive+0x64>
            HAL_UART_Transmit(&huart2, &rx_char, 1, HAL_MAX_DELAY);
 80004d4:	f107 010d 	add.w	r1, r7, #13
 80004d8:	f04f 33ff 	mov.w	r3, #4294967295
 80004dc:	2201      	movs	r2, #1
 80004de:	4815      	ldr	r0, [pc, #84]	@ (8000534 <CLI_Receive+0x88>)
 80004e0:	f001 fd16 	bl	8001f10 <HAL_UART_Transmit>
            if (rx_char == '\r' || rx_char == '\n') {
 80004e4:	7b7b      	ldrb	r3, [r7, #13]
 80004e6:	2b0d      	cmp	r3, #13
 80004e8:	d002      	beq.n	80004f0 <CLI_Receive+0x44>
 80004ea:	7b7b      	ldrb	r3, [r7, #13]
 80004ec:	2b0a      	cmp	r3, #10
 80004ee:	d106      	bne.n	80004fe <CLI_Receive+0x52>
                buffer[index] = '\0';
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
                return 1; // Successful reception
 80004fa:	2301      	movs	r3, #1
 80004fc:	e015      	b.n	800052a <CLI_Receive+0x7e>
            }
            buffer[index++] = rx_char;
 80004fe:	89fb      	ldrh	r3, [r7, #14]
 8000500:	1c5a      	adds	r2, r3, #1
 8000502:	81fa      	strh	r2, [r7, #14]
 8000504:	461a      	mov	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	7b7a      	ldrb	r2, [r7, #13]
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	e001      	b.n	8000514 <CLI_Receive+0x68>
        } else {
            return 0; // Reception error
 8000510:	2300      	movs	r3, #0
 8000512:	e00a      	b.n	800052a <CLI_Receive+0x7e>
    while (index < buffer_size - 1) {
 8000514:	89fa      	ldrh	r2, [r7, #14]
 8000516:	887b      	ldrh	r3, [r7, #2]
 8000518:	3b01      	subs	r3, #1
 800051a:	429a      	cmp	r2, r3
 800051c:	dbcf      	blt.n	80004be <CLI_Receive+0x12>
        }
    }
    buffer[index] = '\0';
 800051e:	89fb      	ldrh	r3, [r7, #14]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	4413      	add	r3, r2
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
    return 1;
 8000528:	2301      	movs	r3, #1
}
 800052a:	4618      	mov	r0, r3
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200002d4 	.word	0x200002d4

08000538 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick();
 8000542:	f000 fb79 	bl	8000c38 <HAL_GetTick>
 8000546:	60f8      	str	r0, [r7, #12]

    if (GPIO_Pin == GPIO_PIN_13 && current_time - last_interrupt_time > 200) { // Debounce: 200 ms
 8000548:	88fb      	ldrh	r3, [r7, #6]
 800054a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800054e:	d112      	bne.n	8000576 <HAL_GPIO_EXTI_Callback+0x3e>
 8000550:	4b0b      	ldr	r3, [pc, #44]	@ (8000580 <HAL_GPIO_EXTI_Callback+0x48>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	2bc8      	cmp	r3, #200	@ 0xc8
 800055a:	d90c      	bls.n	8000576 <HAL_GPIO_EXTI_Callback+0x3e>
        int emergencySignal = 1;
 800055c:	2301      	movs	r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
        xQueueSendFromISR(emergencyQueue, &emergencySignal, NULL);
 8000560:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	f107 0108 	add.w	r1, r7, #8
 8000568:	2300      	movs	r3, #0
 800056a:	2200      	movs	r2, #0
 800056c:	f002 fb12 	bl	8002b94 <xQueueGenericSendFromISR>
        last_interrupt_time = current_time;
 8000570:	4a03      	ldr	r2, [pc, #12]	@ (8000580 <HAL_GPIO_EXTI_Callback+0x48>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	6013      	str	r3, [r2, #0]
    }
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000344 	.word	0x20000344
 8000584:	20000330 	.word	0x20000330

08000588 <FloorSelectionTaskHandle>:
  * @brief  Function implementing the FloorSelectionT thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FloorSelectionTaskHandle */
void FloorSelectionTaskHandle(void const *argument) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b09e      	sub	sp, #120	@ 0x78
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    char command_buffer[100];
    int targetFloor;

    CLI_Transmit("\x1b[2J\x1b[3;1H\x1b[4;1r\x1b[4;1H");
 8000590:	4868      	ldr	r0, [pc, #416]	@ (8000734 <FloorSelectionTaskHandle+0x1ac>)
 8000592:	f7ff ff75 	bl	8000480 <CLI_Transmit>

    for (;;) {
        // Process emergency signals
        int emergencySignal;
        if (xQueueReceive(emergencyQueue, &emergencySignal, 0) == pdPASS) {
 8000596:	4b68      	ldr	r3, [pc, #416]	@ (8000738 <FloorSelectionTaskHandle+0x1b0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f107 010c 	add.w	r1, r7, #12
 800059e:	2200      	movs	r2, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fb95 	bl	8002cd0 <xQueueReceive>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d116      	bne.n	80005da <FloorSelectionTaskHandle+0x52>
            xSemaphoreTake(emergencyMutex, portMAX_DELAY);
 80005ac:	4b63      	ldr	r3, [pc, #396]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f04f 31ff 	mov.w	r1, #4294967295
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fc6d 	bl	8002e94 <xQueueSemaphoreTake>
            emergencyState = 1;
 80005ba:	4b61      	ldr	r3, [pc, #388]	@ (8000740 <FloorSelectionTaskHandle+0x1b8>)
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]
            xSemaphoreGive(emergencyMutex);
 80005c0:	4b5e      	ldr	r3, [pc, #376]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	2300      	movs	r3, #0
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	f002 f9e1 	bl	8002990 <xQueueGenericSend>

            CLI_Transmit("\x1b[2J\x1b[H");
 80005ce:	485d      	ldr	r0, [pc, #372]	@ (8000744 <FloorSelectionTaskHandle+0x1bc>)
 80005d0:	f7ff ff56 	bl	8000480 <CLI_Transmit>
            CLI_Transmit("Emergency mode activated. All operations halted.\n");
 80005d4:	485c      	ldr	r0, [pc, #368]	@ (8000748 <FloorSelectionTaskHandle+0x1c0>)
 80005d6:	f7ff ff53 	bl	8000480 <CLI_Transmit>
        }

        // Display CLI prompt
        CLI_Transmit("\x1b[24;1H> ");
 80005da:	485c      	ldr	r0, [pc, #368]	@ (800074c <FloorSelectionTaskHandle+0x1c4>)
 80005dc:	f7ff ff50 	bl	8000480 <CLI_Transmit>
        if (CLI_Receive(command_buffer, sizeof(command_buffer))) {
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2164      	movs	r1, #100	@ 0x64
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff60 	bl	80004ac <CLI_Receive>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0d1      	beq.n	8000596 <FloorSelectionTaskHandle+0xe>
            CLI_Transmit("\x1b[23;1H");
 80005f2:	4857      	ldr	r0, [pc, #348]	@ (8000750 <FloorSelectionTaskHandle+0x1c8>)
 80005f4:	f7ff ff44 	bl	8000480 <CLI_Transmit>
            CLI_Transmit("Received: ");
 80005f8:	4856      	ldr	r0, [pc, #344]	@ (8000754 <FloorSelectionTaskHandle+0x1cc>)
 80005fa:	f7ff ff41 	bl	8000480 <CLI_Transmit>
            CLI_Transmit(command_buffer);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ff3c 	bl	8000480 <CLI_Transmit>
            CLI_Transmit("\n");
 8000608:	4853      	ldr	r0, [pc, #332]	@ (8000758 <FloorSelectionTaskHandle+0x1d0>)
 800060a:	f7ff ff39 	bl	8000480 <CLI_Transmit>

            // Handle emergency mode
            xSemaphoreTake(emergencyMutex, portMAX_DELAY);
 800060e:	4b4b      	ldr	r3, [pc, #300]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f04f 31ff 	mov.w	r1, #4294967295
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fc3c 	bl	8002e94 <xQueueSemaphoreTake>
            if (emergencyState) {
 800061c:	4b48      	ldr	r3, [pc, #288]	@ (8000740 <FloorSelectionTaskHandle+0x1b8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d029      	beq.n	8000678 <FloorSelectionTaskHandle+0xf0>
                xSemaphoreGive(emergencyMutex);
 8000624:	4b45      	ldr	r3, [pc, #276]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	f002 f9af 	bl	8002990 <xQueueGenericSend>
                if (strncmp(command_buffer, "exit_emergency", 14) == 0) {
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	220e      	movs	r2, #14
 8000638:	4948      	ldr	r1, [pc, #288]	@ (800075c <FloorSelectionTaskHandle+0x1d4>)
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fb00 	bl	8004c40 <strncmp>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d114      	bne.n	8000670 <FloorSelectionTaskHandle+0xe8>
                    xSemaphoreTake(emergencyMutex, portMAX_DELAY);
 8000646:	4b3d      	ldr	r3, [pc, #244]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f04f 31ff 	mov.w	r1, #4294967295
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fc20 	bl	8002e94 <xQueueSemaphoreTake>
                    emergencyState = 0; // Deactivate emergency mode
 8000654:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <FloorSelectionTaskHandle+0x1b8>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
                    xSemaphoreGive(emergencyMutex);
 800065a:	4b38      	ldr	r3, [pc, #224]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	2300      	movs	r3, #0
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	f002 f994 	bl	8002990 <xQueueGenericSend>
                    CLI_Transmit("Emergency mode deactivated. Resuming operations.\n");
 8000668:	483d      	ldr	r0, [pc, #244]	@ (8000760 <FloorSelectionTaskHandle+0x1d8>)
 800066a:	f7ff ff09 	bl	8000480 <CLI_Transmit>
                } else {
                    CLI_Transmit("Only 'exit_emergency' allowed in emergency mode.\n");
                }
                continue; // Ignore other commands
 800066e:	e05f      	b.n	8000730 <FloorSelectionTaskHandle+0x1a8>
                    CLI_Transmit("Only 'exit_emergency' allowed in emergency mode.\n");
 8000670:	483c      	ldr	r0, [pc, #240]	@ (8000764 <FloorSelectionTaskHandle+0x1dc>)
 8000672:	f7ff ff05 	bl	8000480 <CLI_Transmit>
 8000676:	e78e      	b.n	8000596 <FloorSelectionTaskHandle+0xe>
            }
            xSemaphoreGive(emergencyMutex);
 8000678:	4b30      	ldr	r3, [pc, #192]	@ (800073c <FloorSelectionTaskHandle+0x1b4>)
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	2300      	movs	r3, #0
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	f002 f985 	bl	8002990 <xQueueGenericSend>

            // Handle normal commands
            if (strncmp(command_buffer, "enter", 5) == 0) {
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2205      	movs	r2, #5
 800068c:	4936      	ldr	r1, [pc, #216]	@ (8000768 <FloorSelectionTaskHandle+0x1e0>)
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fad6 	bl	8004c40 <strncmp>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d106      	bne.n	80006a8 <FloorSelectionTaskHandle+0x120>
                insideState = 1;
 800069a:	4b34      	ldr	r3, [pc, #208]	@ (800076c <FloorSelectionTaskHandle+0x1e4>)
 800069c:	2201      	movs	r2, #1
 800069e:	601a      	str	r2, [r3, #0]
                CLI_Transmit("You have entered the elevator.\n");
 80006a0:	4833      	ldr	r0, [pc, #204]	@ (8000770 <FloorSelectionTaskHandle+0x1e8>)
 80006a2:	f7ff feed 	bl	8000480 <CLI_Transmit>
 80006a6:	e776      	b.n	8000596 <FloorSelectionTaskHandle+0xe>
            } else if (strncmp(command_buffer, "exit", 4) == 0) {
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2204      	movs	r2, #4
 80006ae:	4931      	ldr	r1, [pc, #196]	@ (8000774 <FloorSelectionTaskHandle+0x1ec>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fac5 	bl	8004c40 <strncmp>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d106      	bne.n	80006ca <FloorSelectionTaskHandle+0x142>
                insideState = 0;
 80006bc:	4b2b      	ldr	r3, [pc, #172]	@ (800076c <FloorSelectionTaskHandle+0x1e4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
                CLI_Transmit("You have exited the elevator.\n");
 80006c2:	482d      	ldr	r0, [pc, #180]	@ (8000778 <FloorSelectionTaskHandle+0x1f0>)
 80006c4:	f7ff fedc 	bl	8000480 <CLI_Transmit>
 80006c8:	e765      	b.n	8000596 <FloorSelectionTaskHandle+0xe>
            } else if (strncmp(command_buffer, "floor=", 6) == 0) {
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2206      	movs	r2, #6
 80006d0:	492a      	ldr	r1, [pc, #168]	@ (800077c <FloorSelectionTaskHandle+0x1f4>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fab4 	bl	8004c40 <strncmp>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d125      	bne.n	800072a <FloorSelectionTaskHandle+0x1a2>
                if (insideState) {
 80006de:	4b23      	ldr	r3, [pc, #140]	@ (800076c <FloorSelectionTaskHandle+0x1e4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d01d      	beq.n	8000722 <FloorSelectionTaskHandle+0x19a>
                    targetFloor = atoi(command_buffer + 6);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	3306      	adds	r3, #6
 80006ec:	4618      	mov	r0, r3
 80006ee:	f004 f9e3 	bl	8004ab8 <atoi>
 80006f2:	4603      	mov	r3, r0
 80006f4:	613b      	str	r3, [r7, #16]
                    if (targetFloor >= 1 && targetFloor <= 3) {
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dd0e      	ble.n	800071a <FloorSelectionTaskHandle+0x192>
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	dc0b      	bgt.n	800071a <FloorSelectionTaskHandle+0x192>
                        xQueueSend(floorQueue, &targetFloor, pdMS_TO_TICKS(50));
 8000702:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <FloorSelectionTaskHandle+0x1f8>)
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	f107 0110 	add.w	r1, r7, #16
 800070a:	2300      	movs	r3, #0
 800070c:	2232      	movs	r2, #50	@ 0x32
 800070e:	f002 f93f 	bl	8002990 <xQueueGenericSend>
                        CLI_Transmit("Moving to selected floor...\n");
 8000712:	481c      	ldr	r0, [pc, #112]	@ (8000784 <FloorSelectionTaskHandle+0x1fc>)
 8000714:	f7ff feb4 	bl	8000480 <CLI_Transmit>
 8000718:	e00a      	b.n	8000730 <FloorSelectionTaskHandle+0x1a8>
                    } else {
                        CLI_Transmit("Invalid floor. Enter 1, 2, or 3.\n");
 800071a:	481b      	ldr	r0, [pc, #108]	@ (8000788 <FloorSelectionTaskHandle+0x200>)
 800071c:	f7ff feb0 	bl	8000480 <CLI_Transmit>
 8000720:	e739      	b.n	8000596 <FloorSelectionTaskHandle+0xe>
                    }
                } else {
                    CLI_Transmit("You must enter the elevator to select a floor.\n");
 8000722:	481a      	ldr	r0, [pc, #104]	@ (800078c <FloorSelectionTaskHandle+0x204>)
 8000724:	f7ff feac 	bl	8000480 <CLI_Transmit>
 8000728:	e735      	b.n	8000596 <FloorSelectionTaskHandle+0xe>
                }
            } else {
                // Handle invalid command
                CLI_Transmit("Invalid command. Available commands: enter, exit, floor=<1|2|3>, exit_emergency\n");
 800072a:	4819      	ldr	r0, [pc, #100]	@ (8000790 <FloorSelectionTaskHandle+0x208>)
 800072c:	f7ff fea8 	bl	8000480 <CLI_Transmit>
    for (;;) {
 8000730:	e731      	b.n	8000596 <FloorSelectionTaskHandle+0xe>
 8000732:	bf00      	nop
 8000734:	08005610 	.word	0x08005610
 8000738:	20000330 	.word	0x20000330
 800073c:	20000340 	.word	0x20000340
 8000740:	20000338 	.word	0x20000338
 8000744:	08005628 	.word	0x08005628
 8000748:	08005630 	.word	0x08005630
 800074c:	08005664 	.word	0x08005664
 8000750:	08005670 	.word	0x08005670
 8000754:	08005678 	.word	0x08005678
 8000758:	08005684 	.word	0x08005684
 800075c:	08005688 	.word	0x08005688
 8000760:	08005698 	.word	0x08005698
 8000764:	080056cc 	.word	0x080056cc
 8000768:	08005700 	.word	0x08005700
 800076c:	20000334 	.word	0x20000334
 8000770:	08005708 	.word	0x08005708
 8000774:	08005728 	.word	0x08005728
 8000778:	08005730 	.word	0x08005730
 800077c:	08005750 	.word	0x08005750
 8000780:	2000032c 	.word	0x2000032c
 8000784:	08005758 	.word	0x08005758
 8000788:	08005778 	.word	0x08005778
 800078c:	0800579c 	.word	0x0800579c
 8000790:	080057cc 	.word	0x080057cc

08000794 <ElevatorMovementTaskHandle>:
* @brief Function implementing the ElevatorMovemen thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ElevatorMovementTaskHandle */
void ElevatorMovementTaskHandle(void const *argument) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b090      	sub	sp, #64	@ 0x40
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
    int targetFloor;

    for (;;) {
        if (xQueueReceive(floorQueue, &targetFloor, portMAX_DELAY) == pdPASS) {
 800079c:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <ElevatorMovementTaskHandle+0x9c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 fa91 	bl	8002cd0 <xQueueReceive>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d1f3      	bne.n	800079c <ElevatorMovementTaskHandle+0x8>
            while (1) {
                xSemaphoreTake(floorMutex, portMAX_DELAY);
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <ElevatorMovementTaskHandle+0xa0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fb69 	bl	8002e94 <xQueueSemaphoreTake>
                if (currentFloor == targetFloor) {
 80007c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <ElevatorMovementTaskHandle+0xa4>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d10a      	bne.n	80007e2 <ElevatorMovementTaskHandle+0x4e>
                    xSemaphoreGive(floorMutex);
 80007cc:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <ElevatorMovementTaskHandle+0xa0>)
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	2300      	movs	r3, #0
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	f002 f8db 	bl	8002990 <xQueueGenericSend>
                snprintf(move_message, sizeof(move_message), "Moving... Floor: %d\n", currentFloor);
                CLI_Transmit(move_message);

                osDelay(1000);
            }
            CLI_Transmit("Arrived at Target Floor.\n");
 80007da:	4818      	ldr	r0, [pc, #96]	@ (800083c <ElevatorMovementTaskHandle+0xa8>)
 80007dc:	f7ff fe50 	bl	8000480 <CLI_Transmit>
 80007e0:	e7dc      	b.n	800079c <ElevatorMovementTaskHandle+0x8>
                currentFloor += (currentFloor < targetFloor) ? 1 : -1;
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <ElevatorMovementTaskHandle+0xa4>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007e8:	429a      	cmp	r2, r3
 80007ea:	da01      	bge.n	80007f0 <ElevatorMovementTaskHandle+0x5c>
 80007ec:	2201      	movs	r2, #1
 80007ee:	e001      	b.n	80007f4 <ElevatorMovementTaskHandle+0x60>
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295
 80007f4:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <ElevatorMovementTaskHandle+0xa4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000838 <ElevatorMovementTaskHandle+0xa4>)
 80007fc:	6013      	str	r3, [r2, #0]
                xSemaphoreGive(floorMutex);
 80007fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000834 <ElevatorMovementTaskHandle+0xa0>)
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	2300      	movs	r3, #0
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	f002 f8c2 	bl	8002990 <xQueueGenericSend>
                snprintf(move_message, sizeof(move_message), "Moving... Floor: %d\n", currentFloor);
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <ElevatorMovementTaskHandle+0xa4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f107 0008 	add.w	r0, r7, #8
 8000814:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <ElevatorMovementTaskHandle+0xac>)
 8000816:	2132      	movs	r1, #50	@ 0x32
 8000818:	f004 f9d6 	bl	8004bc8 <sniprintf>
                CLI_Transmit(move_message);
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fe2d 	bl	8000480 <CLI_Transmit>
                osDelay(1000);
 8000826:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800082a:	f001 fe47 	bl	80024bc <osDelay>
            while (1) {
 800082e:	e7c1      	b.n	80007b4 <ElevatorMovementTaskHandle+0x20>
 8000830:	2000032c 	.word	0x2000032c
 8000834:	2000033c 	.word	0x2000033c
 8000838:	20000000 	.word	0x20000000
 800083c:	08005820 	.word	0x08005820
 8000840:	0800583c 	.word	0x0800583c

08000844 <DisplayUpdateTaskHandle>:
* @brief Function implementing the DisplayUpdateTa thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DisplayUpdateTaskHandle */
void DisplayUpdateTaskHandle(void const *argument) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b090      	sub	sp, #64	@ 0x40
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
    char message[50];

    for (;;) {
        xSemaphoreTake(floorMutex, portMAX_DELAY);
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <DisplayUpdateTaskHandle+0x5c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f04f 31ff 	mov.w	r1, #4294967295
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fb1d 	bl	8002e94 <xQueueSemaphoreTake>
        int localFloor = currentFloor;
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <DisplayUpdateTaskHandle+0x60>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        xSemaphoreGive(floorMutex);
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <DisplayUpdateTaskHandle+0x5c>)
 8000862:	6818      	ldr	r0, [r3, #0]
 8000864:	2300      	movs	r3, #0
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	f002 f891 	bl	8002990 <xQueueGenericSend>

        // Save current cursor position
        CLI_Transmit("\x1b[s"); // Save cursor position
 800086e:	480e      	ldr	r0, [pc, #56]	@ (80008a8 <DisplayUpdateTaskHandle+0x64>)
 8000870:	f7ff fe06 	bl	8000480 <CLI_Transmit>

        // Update the "Current Floor" display
        snprintf(message, sizeof(message), "\x1b[2;16HCurrent Floor: %d   ", localFloor);
 8000874:	f107 0008 	add.w	r0, r7, #8
 8000878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800087a:	4a0c      	ldr	r2, [pc, #48]	@ (80008ac <DisplayUpdateTaskHandle+0x68>)
 800087c:	2132      	movs	r1, #50	@ 0x32
 800087e:	f004 f9a3 	bl	8004bc8 <sniprintf>
        CLI_Transmit(message);
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fdfa 	bl	8000480 <CLI_Transmit>

        // Restore the saved cursor position
        CLI_Transmit("\x1b[u"); // Restore cursor position
 800088c:	4808      	ldr	r0, [pc, #32]	@ (80008b0 <DisplayUpdateTaskHandle+0x6c>)
 800088e:	f7ff fdf7 	bl	8000480 <CLI_Transmit>

        osDelay(1000);
 8000892:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000896:	f001 fe11 	bl	80024bc <osDelay>
    for (;;) {
 800089a:	bf00      	nop
 800089c:	e7d6      	b.n	800084c <DisplayUpdateTaskHandle+0x8>
 800089e:	bf00      	nop
 80008a0:	2000033c 	.word	0x2000033c
 80008a4:	20000000 	.word	0x20000000
 80008a8:	08005854 	.word	0x08005854
 80008ac:	08005858 	.word	0x08005858
 80008b0:	08005874 	.word	0x08005874

080008b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d101      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c6:	f000 f9a5 	bl	8000c14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40000800 	.word	0x40000800

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ea:	4b18      	ldr	r3, [pc, #96]	@ (800094c <HAL_MspInit+0x68>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a17      	ldr	r2, [pc, #92]	@ (800094c <HAL_MspInit+0x68>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b15      	ldr	r3, [pc, #84]	@ (800094c <HAL_MspInit+0x68>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_MspInit+0x68>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a11      	ldr	r2, [pc, #68]	@ (800094c <HAL_MspInit+0x68>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <HAL_MspInit+0x68>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	210f      	movs	r1, #15
 800091e:	f06f 0001 	mvn.w	r0, #1
 8000922:	f000 fa48 	bl	8000db6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000926:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <HAL_MspInit+0x6c>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <HAL_MspInit+0x6c>)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000
 8000950:	40010000 	.word	0x40010000

08000954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a15      	ldr	r2, [pc, #84]	@ (80009c4 <HAL_UART_MspInit+0x70>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d123      	bne.n	80009bc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <HAL_UART_MspInit+0x74>)
 8000976:	69db      	ldr	r3, [r3, #28]
 8000978:	4a13      	ldr	r2, [pc, #76]	@ (80009c8 <HAL_UART_MspInit+0x74>)
 800097a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800097e:	61d3      	str	r3, [r2, #28]
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <HAL_UART_MspInit+0x74>)
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_UART_MspInit+0x74>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <HAL_UART_MspInit+0x74>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <HAL_UART_MspInit+0x74>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009a4:	230c      	movs	r3, #12
 80009a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4619      	mov	r1, r3
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <HAL_UART_MspInit+0x78>)
 80009b8:	f000 fa28 	bl	8000e0c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009bc:	bf00      	nop
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010800 	.word	0x40010800

080009d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08e      	sub	sp, #56	@ 0x38
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80009e6:	4b34      	ldr	r3, [pc, #208]	@ (8000ab8 <HAL_InitTick+0xe8>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	4a33      	ldr	r2, [pc, #204]	@ (8000ab8 <HAL_InitTick+0xe8>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	61d3      	str	r3, [r2, #28]
 80009f2:	4b31      	ldr	r3, [pc, #196]	@ (8000ab8 <HAL_InitTick+0xe8>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009fe:	f107 0210 	add.w	r2, r7, #16
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4611      	mov	r1, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 ffa5 	bl	8001958 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d103      	bne.n	8000a20 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a18:	f000 ff76 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8000a1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a1e:	e004      	b.n	8000a2a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a20:	f000 ff72 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8000a24:	4603      	mov	r3, r0
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a2c:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <HAL_InitTick+0xec>)
 8000a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a32:	0c9b      	lsrs	r3, r3, #18
 8000a34:	3b01      	subs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a38:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <HAL_InitTick+0xf0>)
 8000a3a:	4a22      	ldr	r2, [pc, #136]	@ (8000ac4 <HAL_InitTick+0xf4>)
 8000a3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000a3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <HAL_InitTick+0xf0>)
 8000a40:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a44:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a46:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac0 <HAL_InitTick+0xf0>)
 8000a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a4a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <HAL_InitTick+0xf0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <HAL_InitTick+0xf0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a58:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <HAL_InitTick+0xf0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000a5e:	4818      	ldr	r0, [pc, #96]	@ (8000ac0 <HAL_InitTick+0xf0>)
 8000a60:	f000 ffc8 	bl	80019f4 <HAL_TIM_Base_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a6a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d11b      	bne.n	8000aaa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000a72:	4813      	ldr	r0, [pc, #76]	@ (8000ac0 <HAL_InitTick+0xf0>)
 8000a74:	f001 f816 	bl	8001aa4 <HAL_TIM_Base_Start_IT>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d111      	bne.n	8000aaa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a86:	201e      	movs	r0, #30
 8000a88:	f000 f9b1 	bl	8000dee <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b0f      	cmp	r3, #15
 8000a90:	d808      	bhi.n	8000aa4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a92:	2200      	movs	r2, #0
 8000a94:	6879      	ldr	r1, [r7, #4]
 8000a96:	201e      	movs	r0, #30
 8000a98:	f000 f98d 	bl	8000db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <HAL_InitTick+0xf8>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
 8000aa2:	e002      	b.n	8000aaa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aaa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3738      	adds	r7, #56	@ 0x38
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	431bde83 	.word	0x431bde83
 8000ac0:	20000348 	.word	0x20000348
 8000ac4:	40000800 	.word	0x40000800
 8000ac8:	20000008 	.word	0x20000008

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <TIM4_IRQHandler+0x10>)
 8000b06:	f001 f81f 	bl	8001b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000348 	.word	0x20000348

08000b14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b18:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b1c:	f000 fb12 	bl	8001144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	@ (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b54:	f004 f886 	bl	8004c64 <__errno>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20005000 	.word	0x20005000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	20000390 	.word	0x20000390
 8000b8c:	20001238 	.word	0x20001238

08000b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b9c:	f7ff fff8 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba0:	480b      	ldr	r0, [pc, #44]	@ (8000bd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ba2:	490c      	ldr	r1, [pc, #48]	@ (8000bd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a09      	ldr	r2, [pc, #36]	@ (8000bdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bb8:	4c09      	ldr	r4, [pc, #36]	@ (8000be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f004 f853 	bl	8004c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bca:	f7ff fae1 	bl	8000190 <main>
  bx lr
 8000bce:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000bd8:	080059f0 	.word	0x080059f0
  ldr r2, =_sbss
 8000bdc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000be0:	20001234 	.word	0x20001234

08000be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <HAL_Init+0x28>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	@ (8000c10 <HAL_Init+0x28>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 f8d1 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f7ff fee6 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fe6e 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <HAL_IncTick+0x1c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <HAL_IncTick+0x20>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a03      	ldr	r2, [pc, #12]	@ (8000c34 <HAL_IncTick+0x20>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	2000000c 	.word	0x2000000c
 8000c34:	20000394 	.word	0x20000394

08000c38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	@ (8000c48 <HAL_GetTick+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	20000394 	.word	0x20000394

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	@ (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	db0b      	blt.n	8000cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 021f 	and.w	r2, r3, #31
 8000cc8:	4906      	ldr	r1, [pc, #24]	@ (8000ce4 <__NVIC_EnableIRQ+0x34>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	095b      	lsrs	r3, r3, #5
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	@ (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	@ (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	@ 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff4f 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff64 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ffb2 	bl	8000d3c <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff81 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff57 	bl	8000cb0 <__NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b08b      	sub	sp, #44	@ 0x2c
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1e:	e169      	b.n	80010f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e20:	2201      	movs	r2, #1
 8000e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f040 8158 	bne.w	80010ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	4a9a      	ldr	r2, [pc, #616]	@ (80010ac <HAL_GPIO_Init+0x2a0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d05e      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e48:	4a98      	ldr	r2, [pc, #608]	@ (80010ac <HAL_GPIO_Init+0x2a0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d875      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e4e:	4a98      	ldr	r2, [pc, #608]	@ (80010b0 <HAL_GPIO_Init+0x2a4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d058      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e54:	4a96      	ldr	r2, [pc, #600]	@ (80010b0 <HAL_GPIO_Init+0x2a4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d86f      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e5a:	4a96      	ldr	r2, [pc, #600]	@ (80010b4 <HAL_GPIO_Init+0x2a8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d052      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e60:	4a94      	ldr	r2, [pc, #592]	@ (80010b4 <HAL_GPIO_Init+0x2a8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d869      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e66:	4a94      	ldr	r2, [pc, #592]	@ (80010b8 <HAL_GPIO_Init+0x2ac>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d04c      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e6c:	4a92      	ldr	r2, [pc, #584]	@ (80010b8 <HAL_GPIO_Init+0x2ac>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d863      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e72:	4a92      	ldr	r2, [pc, #584]	@ (80010bc <HAL_GPIO_Init+0x2b0>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d046      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e78:	4a90      	ldr	r2, [pc, #576]	@ (80010bc <HAL_GPIO_Init+0x2b0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d85d      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e7e:	2b12      	cmp	r3, #18
 8000e80:	d82a      	bhi.n	8000ed8 <HAL_GPIO_Init+0xcc>
 8000e82:	2b12      	cmp	r3, #18
 8000e84:	d859      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e86:	a201      	add	r2, pc, #4	@ (adr r2, 8000e8c <HAL_GPIO_Init+0x80>)
 8000e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8c:	08000f07 	.word	0x08000f07
 8000e90:	08000ee1 	.word	0x08000ee1
 8000e94:	08000ef3 	.word	0x08000ef3
 8000e98:	08000f35 	.word	0x08000f35
 8000e9c:	08000f3b 	.word	0x08000f3b
 8000ea0:	08000f3b 	.word	0x08000f3b
 8000ea4:	08000f3b 	.word	0x08000f3b
 8000ea8:	08000f3b 	.word	0x08000f3b
 8000eac:	08000f3b 	.word	0x08000f3b
 8000eb0:	08000f3b 	.word	0x08000f3b
 8000eb4:	08000f3b 	.word	0x08000f3b
 8000eb8:	08000f3b 	.word	0x08000f3b
 8000ebc:	08000f3b 	.word	0x08000f3b
 8000ec0:	08000f3b 	.word	0x08000f3b
 8000ec4:	08000f3b 	.word	0x08000f3b
 8000ec8:	08000f3b 	.word	0x08000f3b
 8000ecc:	08000f3b 	.word	0x08000f3b
 8000ed0:	08000ee9 	.word	0x08000ee9
 8000ed4:	08000efd 	.word	0x08000efd
 8000ed8:	4a79      	ldr	r2, [pc, #484]	@ (80010c0 <HAL_GPIO_Init+0x2b4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d013      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ede:	e02c      	b.n	8000f3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	623b      	str	r3, [r7, #32]
          break;
 8000ee6:	e029      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	3304      	adds	r3, #4
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	e024      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	623b      	str	r3, [r7, #32]
          break;
 8000efa:	e01f      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	330c      	adds	r3, #12
 8000f02:	623b      	str	r3, [r7, #32]
          break;
 8000f04:	e01a      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e013      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d105      	bne.n	8000f28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	611a      	str	r2, [r3, #16]
          break;
 8000f26:	e009      	b.n	8000f3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	615a      	str	r2, [r3, #20]
          break;
 8000f32:	e003      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
          break;
 8000f38:	e000      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          break;
 8000f3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2bff      	cmp	r3, #255	@ 0xff
 8000f40:	d801      	bhi.n	8000f46 <HAL_GPIO_Init+0x13a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	e001      	b.n	8000f4a <HAL_GPIO_Init+0x13e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	2bff      	cmp	r3, #255	@ 0xff
 8000f50:	d802      	bhi.n	8000f58 <HAL_GPIO_Init+0x14c>
 8000f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_Init+0x152>
 8000f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5a:	3b08      	subs	r3, #8
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	210f      	movs	r1, #15
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	6a39      	ldr	r1, [r7, #32]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 80b1 	beq.w	80010ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8c:	4b4d      	ldr	r3, [pc, #308]	@ (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a4c      	ldr	r2, [pc, #304]	@ (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b4a      	ldr	r3, [pc, #296]	@ (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fa4:	4a48      	ldr	r2, [pc, #288]	@ (80010c8 <HAL_GPIO_Init+0x2bc>)
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a40      	ldr	r2, [pc, #256]	@ (80010cc <HAL_GPIO_Init+0x2c0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d013      	beq.n	8000ff8 <HAL_GPIO_Init+0x1ec>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80010d0 <HAL_GPIO_Init+0x2c4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d00d      	beq.n	8000ff4 <HAL_GPIO_Init+0x1e8>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a3e      	ldr	r2, [pc, #248]	@ (80010d4 <HAL_GPIO_Init+0x2c8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d007      	beq.n	8000ff0 <HAL_GPIO_Init+0x1e4>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a3d      	ldr	r2, [pc, #244]	@ (80010d8 <HAL_GPIO_Init+0x2cc>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d101      	bne.n	8000fec <HAL_GPIO_Init+0x1e0>
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e006      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000fec:	2304      	movs	r3, #4
 8000fee:	e004      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e002      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ffc:	f002 0203 	and.w	r2, r2, #3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	4093      	lsls	r3, r2
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800100a:	492f      	ldr	r1, [pc, #188]	@ (80010c8 <HAL_GPIO_Init+0x2bc>)
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001024:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	492c      	ldr	r1, [pc, #176]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	608b      	str	r3, [r1, #8]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001032:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4928      	ldr	r1, [pc, #160]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800103c:	4013      	ands	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d006      	beq.n	800105a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800104c:	4b23      	ldr	r3, [pc, #140]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	4922      	ldr	r1, [pc, #136]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	60cb      	str	r3, [r1, #12]
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800105a:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	491e      	ldr	r1, [pc, #120]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 8001064:	4013      	ands	r3, r2
 8001066:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001074:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4918      	ldr	r1, [pc, #96]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	43db      	mvns	r3, r3
 800108a:	4914      	ldr	r1, [pc, #80]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800108c:	4013      	ands	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d021      	beq.n	80010e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	490e      	ldr	r1, [pc, #56]	@ (80010dc <HAL_GPIO_Init+0x2d0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	600b      	str	r3, [r1, #0]
 80010a8:	e021      	b.n	80010ee <HAL_GPIO_Init+0x2e2>
 80010aa:	bf00      	nop
 80010ac:	10320000 	.word	0x10320000
 80010b0:	10310000 	.word	0x10310000
 80010b4:	10220000 	.word	0x10220000
 80010b8:	10210000 	.word	0x10210000
 80010bc:	10120000 	.word	0x10120000
 80010c0:	10110000 	.word	0x10110000
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000
 80010cc:	40010800 	.word	0x40010800
 80010d0:	40010c00 	.word	0x40010c00
 80010d4:	40011000 	.word	0x40011000
 80010d8:	40011400 	.word	0x40011400
 80010dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <HAL_GPIO_Init+0x304>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	4909      	ldr	r1, [pc, #36]	@ (8001110 <HAL_GPIO_Init+0x304>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	3301      	adds	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f47f ae8e 	bne.w	8000e20 <HAL_GPIO_Init+0x14>
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	372c      	adds	r7, #44	@ 0x2c
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40010400 	.word	0x40010400

08001114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
 8001120:	4613      	mov	r3, r2
 8001122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001124:	787b      	ldrb	r3, [r7, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001130:	e003      	b.n	800113a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	041a      	lsls	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	611a      	str	r2, [r3, #16]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001150:	695a      	ldr	r2, [r3, #20]
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f9e8 	bl	8000538 <HAL_GPIO_EXTI_Callback>
  }
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40010400 	.word	0x40010400

08001174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e272      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8087 	beq.w	80012a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001194:	4b92      	ldr	r3, [pc, #584]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b04      	cmp	r3, #4
 800119e:	d00c      	beq.n	80011ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a0:	4b8f      	ldr	r3, [pc, #572]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d112      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5e>
 80011ac:	4b8c      	ldr	r3, [pc, #560]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011b8:	d10b      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ba:	4b89      	ldr	r3, [pc, #548]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d06c      	beq.n	80012a0 <HAL_RCC_OscConfig+0x12c>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d168      	bne.n	80012a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e24c      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x76>
 80011dc:	4b80      	ldr	r3, [pc, #512]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a7f      	ldr	r2, [pc, #508]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e02e      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x98>
 80011f2:	4b7b      	ldr	r3, [pc, #492]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a7a      	ldr	r2, [pc, #488]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b78      	ldr	r3, [pc, #480]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a77      	ldr	r2, [pc, #476]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001204:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e01d      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0xbc>
 8001216:	4b72      	ldr	r3, [pc, #456]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a71      	ldr	r2, [pc, #452]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b6f      	ldr	r3, [pc, #444]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a6e      	ldr	r2, [pc, #440]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e00b      	b.n	8001248 <HAL_RCC_OscConfig+0xd4>
 8001230:	4b6b      	ldr	r3, [pc, #428]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a6a      	ldr	r2, [pc, #424]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b68      	ldr	r3, [pc, #416]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a67      	ldr	r2, [pc, #412]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001246:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fcf2 	bl	8000c38 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fcee 	bl	8000c38 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	@ 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e200      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b5d      	ldr	r3, [pc, #372]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0xe4>
 8001276:	e014      	b.n	80012a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fcde 	bl	8000c38 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fcda 	bl	8000c38 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	@ 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e1ec      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	4b53      	ldr	r3, [pc, #332]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x10c>
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d063      	beq.n	8001376 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ae:	4b4c      	ldr	r3, [pc, #304]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ba:	4b49      	ldr	r3, [pc, #292]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d11c      	bne.n	8001300 <HAL_RCC_OscConfig+0x18c>
 80012c6:	4b46      	ldr	r3, [pc, #280]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d116      	bne.n	8001300 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	4b43      	ldr	r3, [pc, #268]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_RCC_OscConfig+0x176>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1c0      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	4b3d      	ldr	r3, [pc, #244]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4939      	ldr	r1, [pc, #228]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	e03a      	b.n	8001376 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d020      	beq.n	800134a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001308:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <HAL_RCC_OscConfig+0x270>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130e:	f7ff fc93 	bl	8000c38 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff fc8f 	bl	8000c38 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e1a1      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	4b2d      	ldr	r3, [pc, #180]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4927      	ldr	r1, [pc, #156]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134a:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <HAL_RCC_OscConfig+0x270>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fc72 	bl	8000c38 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fc6e 	bl	8000c38 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e180      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d03a      	beq.n	80013f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d019      	beq.n	80013be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <HAL_RCC_OscConfig+0x274>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff fc52 	bl	8000c38 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fc4e 	bl	8000c38 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e160      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	4b0d      	ldr	r3, [pc, #52]	@ (80013e0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f000 fafe 	bl	80019b8 <RCC_Delay>
 80013bc:	e01c      	b.n	80013f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_RCC_OscConfig+0x274>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fc38 	bl	8000c38 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ca:	e00f      	b.n	80013ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013cc:	f7ff fc34 	bl	8000c38 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d908      	bls.n	80013ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e146      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	42420000 	.word	0x42420000
 80013e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	4b92      	ldr	r3, [pc, #584]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e9      	bne.n	80013cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a6 	beq.w	8001552 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140a:	4b8b      	ldr	r3, [pc, #556]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b88      	ldr	r3, [pc, #544]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a87      	ldr	r2, [pc, #540]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b85      	ldr	r3, [pc, #532]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142e:	2301      	movs	r3, #1
 8001430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001432:	4b82      	ldr	r3, [pc, #520]	@ (800163c <HAL_RCC_OscConfig+0x4c8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143a:	2b00      	cmp	r3, #0
 800143c:	d118      	bne.n	8001470 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143e:	4b7f      	ldr	r3, [pc, #508]	@ (800163c <HAL_RCC_OscConfig+0x4c8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a7e      	ldr	r2, [pc, #504]	@ (800163c <HAL_RCC_OscConfig+0x4c8>)
 8001444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144a:	f7ff fbf5 	bl	8000c38 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001452:	f7ff fbf1 	bl	8000c38 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b64      	cmp	r3, #100	@ 0x64
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e103      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001464:	4b75      	ldr	r3, [pc, #468]	@ (800163c <HAL_RCC_OscConfig+0x4c8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x312>
 8001478:	4b6f      	ldr	r3, [pc, #444]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4a6e      	ldr	r2, [pc, #440]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6213      	str	r3, [r2, #32]
 8001484:	e02d      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x334>
 800148e:	4b6a      	ldr	r3, [pc, #424]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a69      	ldr	r2, [pc, #420]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	6213      	str	r3, [r2, #32]
 800149a:	4b67      	ldr	r3, [pc, #412]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a66      	ldr	r2, [pc, #408]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	6213      	str	r3, [r2, #32]
 80014a6:	e01c      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d10c      	bne.n	80014ca <HAL_RCC_OscConfig+0x356>
 80014b0:	4b61      	ldr	r3, [pc, #388]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4a60      	ldr	r2, [pc, #384]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6213      	str	r3, [r2, #32]
 80014bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	e00b      	b.n	80014e2 <HAL_RCC_OscConfig+0x36e>
 80014ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	4b58      	ldr	r3, [pc, #352]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a57      	ldr	r2, [pc, #348]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d015      	beq.n	8001516 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fba5 	bl	8000c38 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f0:	e00a      	b.n	8001508 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f7ff fba1 	bl	8000c38 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001500:	4293      	cmp	r3, r2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e0b1      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	4b4b      	ldr	r3, [pc, #300]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0ee      	beq.n	80014f2 <HAL_RCC_OscConfig+0x37e>
 8001514:	e014      	b.n	8001540 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fb8f 	bl	8000c38 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151c:	e00a      	b.n	8001534 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151e:	f7ff fb8b 	bl	8000c38 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e09b      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001534:	4b40      	ldr	r3, [pc, #256]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1ee      	bne.n	800151e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d105      	bne.n	8001552 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001546:	4b3c      	ldr	r3, [pc, #240]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a3b      	ldr	r2, [pc, #236]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8087 	beq.w	800166a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800155c:	4b36      	ldr	r3, [pc, #216]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d061      	beq.n	800162c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d146      	bne.n	80015fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001570:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <HAL_RCC_OscConfig+0x4cc>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fb5f 	bl	8000c38 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff fb5b 	bl	8000c38 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e06d      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001590:	4b29      	ldr	r3, [pc, #164]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a4:	d108      	bne.n	80015b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015a6:	4b24      	ldr	r3, [pc, #144]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	4921      	ldr	r1, [pc, #132]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a19      	ldr	r1, [r3, #32]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c8:	430b      	orrs	r3, r1
 80015ca:	491b      	ldr	r1, [pc, #108]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <HAL_RCC_OscConfig+0x4cc>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fb2f 	bl	8000c38 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015de:	f7ff fb2b 	bl	8000c38 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e03d      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x46a>
 80015fc:	e035      	b.n	800166a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <HAL_RCC_OscConfig+0x4cc>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fb18 	bl	8000c38 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fb14 	bl	8000c38 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e026      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x498>
 800162a:	e01e      	b.n	800166a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d107      	bne.n	8001644 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e019      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
 8001638:	40021000 	.word	0x40021000
 800163c:	40007000 	.word	0x40007000
 8001640:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <HAL_RCC_OscConfig+0x500>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	429a      	cmp	r2, r3
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	429a      	cmp	r2, r3
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0d0      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800168c:	4b6a      	ldr	r3, [pc, #424]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d910      	bls.n	80016bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b67      	ldr	r3, [pc, #412]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 0207 	bic.w	r2, r3, #7
 80016a2:	4965      	ldr	r1, [pc, #404]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b63      	ldr	r3, [pc, #396]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0b8      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d4:	4b59      	ldr	r3, [pc, #356]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4a58      	ldr	r2, [pc, #352]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ec:	4b53      	ldr	r3, [pc, #332]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a52      	ldr	r2, [pc, #328]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b50      	ldr	r3, [pc, #320]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	494d      	ldr	r1, [pc, #308]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d040      	beq.n	8001798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b47      	ldr	r3, [pc, #284]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d115      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e07f      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	4b41      	ldr	r3, [pc, #260]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e073      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	4b3d      	ldr	r3, [pc, #244]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e06b      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001756:	4b39      	ldr	r3, [pc, #228]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f023 0203 	bic.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4936      	ldr	r1, [pc, #216]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001768:	f7ff fa66 	bl	8000c38 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	e00a      	b.n	8001786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001770:	f7ff fa62 	bl	8000c38 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e053      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 020c 	and.w	r2, r3, #12
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d1eb      	bne.n	8001770 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d210      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 0207 	bic.w	r2, r3, #7
 80017ae:	4922      	ldr	r1, [pc, #136]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e032      	b.n	800182e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4916      	ldr	r1, [pc, #88]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	490e      	ldr	r1, [pc, #56]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001806:	f000 f821 	bl	800184c <HAL_RCC_GetSysClockFreq>
 800180a:	4602      	mov	r2, r0
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	490a      	ldr	r1, [pc, #40]	@ (8001840 <HAL_RCC_ClockConfig+0x1c8>)
 8001818:	5ccb      	ldrb	r3, [r1, r3]
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	4a09      	ldr	r2, [pc, #36]	@ (8001844 <HAL_RCC_ClockConfig+0x1cc>)
 8001820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <HAL_RCC_ClockConfig+0x1d0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f8d2 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40022000 	.word	0x40022000
 800183c:	40021000 	.word	0x40021000
 8001840:	08005880 	.word	0x08005880
 8001844:	20000004 	.word	0x20000004
 8001848:	20000008 	.word	0x20000008

0800184c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001866:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b04      	cmp	r3, #4
 8001874:	d002      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x30>
 8001876:	2b08      	cmp	r3, #8
 8001878:	d003      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x36>
 800187a:	e027      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800187e:	613b      	str	r3, [r7, #16]
      break;
 8001880:	e027      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	0c9b      	lsrs	r3, r3, #18
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800188c:	5cd3      	ldrb	r3, [r2, r3]
 800188e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d010      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	0c5b      	lsrs	r3, r3, #17
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	4a11      	ldr	r2, [pc, #68]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80018a6:	5cd3      	ldrb	r3, [r2, r3]
 80018a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ae:	fb03 f202 	mul.w	r2, r3, r2
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e004      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a0c      	ldr	r2, [pc, #48]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	613b      	str	r3, [r7, #16]
      break;
 80018ca:	e002      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ce:	613b      	str	r3, [r7, #16]
      break;
 80018d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d2:	693b      	ldr	r3, [r7, #16]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	007a1200 	.word	0x007a1200
 80018e8:	08005898 	.word	0x08005898
 80018ec:	080058a8 	.word	0x080058a8
 80018f0:	003d0900 	.word	0x003d0900

080018f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f8:	4b02      	ldr	r3, [pc, #8]	@ (8001904 <HAL_RCC_GetHCLKFreq+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800190c:	f7ff fff2 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4903      	ldr	r1, [pc, #12]	@ (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	08005890 	.word	0x08005890

08001930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001934:	f7ff ffde 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	0adb      	lsrs	r3, r3, #11
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	@ (8001954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	08005890 	.word	0x08005890

08001958 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	220f      	movs	r2, #15
 8001966:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <HAL_RCC_GetClockConfig+0x58>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001974:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <HAL_RCC_GetClockConfig+0x58>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <HAL_RCC_GetClockConfig+0x58>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <HAL_RCC_GetClockConfig+0x58>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	08db      	lsrs	r3, r3, #3
 8001992:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0207 	and.w	r2, r3, #7
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40022000 	.word	0x40022000

080019b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019c0:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <RCC_Delay+0x34>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <RCC_Delay+0x38>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0a5b      	lsrs	r3, r3, #9
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019d4:	bf00      	nop
  }
  while (Delay --);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1e5a      	subs	r2, r3, #1
 80019da:	60fa      	str	r2, [r7, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f9      	bne.n	80019d4 <RCC_Delay+0x1c>
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	20000004 	.word	0x20000004
 80019f0:	10624dd3 	.word	0x10624dd3

080019f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e041      	b.n	8001a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f839 	bl	8001a92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4610      	mov	r0, r2
 8001a34:	f000 f99c 	bl	8001d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d001      	beq.n	8001abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e03a      	b.n	8001b32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0201 	orr.w	r2, r2, #1
 8001ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a18      	ldr	r2, [pc, #96]	@ (8001b3c <HAL_TIM_Base_Start_IT+0x98>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00e      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x58>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ae6:	d009      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x58>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a14      	ldr	r2, [pc, #80]	@ (8001b40 <HAL_TIM_Base_Start_IT+0x9c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d004      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x58>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a13      	ldr	r2, [pc, #76]	@ (8001b44 <HAL_TIM_Base_Start_IT+0xa0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d111      	bne.n	8001b20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d010      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0201 	orr.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b1e:	e007      	b.n	8001b30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40012c00 	.word	0x40012c00
 8001b40:	40000400 	.word	0x40000400
 8001b44:	40000800 	.word	0x40000800

08001b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d020      	beq.n	8001bac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01b      	beq.n	8001bac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0202 	mvn.w	r2, #2
 8001b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8d1 	bl	8001d3a <HAL_TIM_IC_CaptureCallback>
 8001b98:	e005      	b.n	8001ba6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8c4 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f8d3 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d020      	beq.n	8001bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01b      	beq.n	8001bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0204 	mvn.w	r2, #4
 8001bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8ab 	bl	8001d3a <HAL_TIM_IC_CaptureCallback>
 8001be4:	e005      	b.n	8001bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f89e 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f8ad 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d020      	beq.n	8001c44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01b      	beq.n	8001c44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0208 	mvn.w	r2, #8
 8001c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2204      	movs	r2, #4
 8001c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f885 	bl	8001d3a <HAL_TIM_IC_CaptureCallback>
 8001c30:	e005      	b.n	8001c3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f878 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f887 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d020      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01b      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0210 	mvn.w	r2, #16
 8001c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2208      	movs	r2, #8
 8001c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f85f 	bl	8001d3a <HAL_TIM_IC_CaptureCallback>
 8001c7c:	e005      	b.n	8001c8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f852 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f861 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00c      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0201 	mvn.w	r2, #1
 8001cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fe00 	bl	80008b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00c      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8c3 	bl	8001e5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00c      	beq.n	8001cfc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f831 	bl	8001d5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00c      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0220 	mvn.w	r2, #32
 8001d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f896 	bl	8001e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a2f      	ldr	r2, [pc, #188]	@ (8001e40 <TIM_Base_SetConfig+0xd0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d00b      	beq.n	8001da0 <TIM_Base_SetConfig+0x30>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d8e:	d007      	beq.n	8001da0 <TIM_Base_SetConfig+0x30>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a2c      	ldr	r2, [pc, #176]	@ (8001e44 <TIM_Base_SetConfig+0xd4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d003      	beq.n	8001da0 <TIM_Base_SetConfig+0x30>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a2b      	ldr	r2, [pc, #172]	@ (8001e48 <TIM_Base_SetConfig+0xd8>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d108      	bne.n	8001db2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a22      	ldr	r2, [pc, #136]	@ (8001e40 <TIM_Base_SetConfig+0xd0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00b      	beq.n	8001dd2 <TIM_Base_SetConfig+0x62>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc0:	d007      	beq.n	8001dd2 <TIM_Base_SetConfig+0x62>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e44 <TIM_Base_SetConfig+0xd4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d003      	beq.n	8001dd2 <TIM_Base_SetConfig+0x62>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e48 <TIM_Base_SetConfig+0xd8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d108      	bne.n	8001de4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <TIM_Base_SetConfig+0xd0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d103      	bne.n	8001e18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f023 0201 	bic.w	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	611a      	str	r2, [r3, #16]
  }
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	40012c00 	.word	0x40012c00
 8001e44:	40000400 	.word	0x40000400
 8001e48:	40000800 	.word	0x40000800

08001e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e042      	b.n	8001f08 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7fe fd5c 	bl	8000954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2224      	movs	r2, #36	@ 0x24
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001eb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fa09 	bl	80022cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ec8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ed8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ee8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	@ 0x28
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d175      	bne.n	800201c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <HAL_UART_Transmit+0x2c>
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e06e      	b.n	800201e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2221      	movs	r2, #33	@ 0x21
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f4e:	f7fe fe73 	bl	8000c38 <HAL_GetTick>
 8001f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	88fa      	ldrh	r2, [r7, #6]
 8001f58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	88fa      	ldrh	r2, [r7, #6]
 8001f5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f68:	d108      	bne.n	8001f7c <HAL_UART_Transmit+0x6c>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d104      	bne.n	8001f7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	e003      	b.n	8001f84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f84:	e02e      	b.n	8001fe4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2180      	movs	r1, #128	@ 0x80
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f8df 	bl	8002154 <UART_WaitOnFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e03a      	b.n	800201e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10b      	bne.n	8001fc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	e007      	b.n	8001fd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1cb      	bne.n	8001f86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2140      	movs	r1, #64	@ 0x40
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 f8ab 	bl	8002154 <UART_WaitOnFlagUntilTimeout>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e006      	b.n	800201e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	e000      	b.n	800201e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800201c:	2302      	movs	r3, #2
  }
}
 800201e:	4618      	mov	r0, r3
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b08a      	sub	sp, #40	@ 0x28
 800202a:	af02      	add	r7, sp, #8
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4613      	mov	r3, r2
 8002034:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b20      	cmp	r3, #32
 8002044:	f040 8081 	bne.w	800214a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <HAL_UART_Receive+0x2e>
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e079      	b.n	800214c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2222      	movs	r2, #34	@ 0x22
 8002062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800206c:	f7fe fde4 	bl	8000c38 <HAL_GetTick>
 8002070:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	88fa      	ldrh	r2, [r7, #6]
 8002076:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	88fa      	ldrh	r2, [r7, #6]
 800207c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002086:	d108      	bne.n	800209a <HAL_UART_Receive+0x74>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d104      	bne.n	800209a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	e003      	b.n	80020a2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80020a2:	e047      	b.n	8002134 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2200      	movs	r2, #0
 80020ac:	2120      	movs	r1, #32
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f850 	bl	8002154 <UART_WaitOnFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e042      	b.n	800214c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10c      	bne.n	80020e6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d8:	b29a      	uxth	r2, r3
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	3302      	adds	r3, #2
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	e01f      	b.n	8002126 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ee:	d007      	beq.n	8002100 <HAL_UART_Receive+0xda>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10a      	bne.n	800210e <HAL_UART_Receive+0xe8>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d106      	bne.n	800210e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e008      	b.n	8002120 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800211a:	b2da      	uxtb	r2, r3
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	3301      	adds	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1b2      	bne.n	80020a4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800214a:	2302      	movs	r3, #2
  }
}
 800214c:	4618      	mov	r0, r3
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002164:	e03b      	b.n	80021de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d037      	beq.n	80021de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216e:	f7fe fd63 	bl	8000c38 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	6a3a      	ldr	r2, [r7, #32]
 800217a:	429a      	cmp	r2, r3
 800217c:	d302      	bcc.n	8002184 <UART_WaitOnFlagUntilTimeout+0x30>
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e03a      	b.n	80021fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	d023      	beq.n	80021de <UART_WaitOnFlagUntilTimeout+0x8a>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b80      	cmp	r3, #128	@ 0x80
 800219a:	d020      	beq.n	80021de <UART_WaitOnFlagUntilTimeout+0x8a>
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b40      	cmp	r3, #64	@ 0x40
 80021a0:	d01d      	beq.n	80021de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d116      	bne.n	80021de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f81d 	bl	8002206 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2208      	movs	r2, #8
 80021d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4013      	ands	r3, r2
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	bf0c      	ite	eq
 80021ee:	2301      	moveq	r3, #1
 80021f0:	2300      	movne	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d0b4      	beq.n	8002166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002206:	b480      	push	{r7}
 8002208:	b095      	sub	sp, #84	@ 0x54
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	330c      	adds	r3, #12
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002218:	e853 3f00 	ldrex	r3, [r3]
 800221c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800221e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002220:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002224:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	330c      	adds	r3, #12
 800222c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800222e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002230:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002232:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002234:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002236:	e841 2300 	strex	r3, r2, [r1]
 800223a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800223c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1e5      	bne.n	800220e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3314      	adds	r3, #20
 8002248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	e853 3f00 	ldrex	r3, [r3]
 8002250:	61fb      	str	r3, [r7, #28]
   return(result);
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	64bb      	str	r3, [r7, #72]	@ 0x48
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	3314      	adds	r3, #20
 8002260:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002262:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002264:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002266:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800226a:	e841 2300 	strex	r3, r2, [r1]
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1e5      	bne.n	8002242 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	2b01      	cmp	r3, #1
 800227c:	d119      	bne.n	80022b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	330c      	adds	r3, #12
 8002284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	e853 3f00 	ldrex	r3, [r3]
 800228c:	60bb      	str	r3, [r7, #8]
   return(result);
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f023 0310 	bic.w	r3, r3, #16
 8002294:	647b      	str	r3, [r7, #68]	@ 0x44
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	330c      	adds	r3, #12
 800229c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800229e:	61ba      	str	r2, [r7, #24]
 80022a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a2:	6979      	ldr	r1, [r7, #20]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	e841 2300 	strex	r3, r2, [r1]
 80022aa:	613b      	str	r3, [r7, #16]
   return(result);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1e5      	bne.n	800227e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80022c0:	bf00      	nop
 80022c2:	3754      	adds	r7, #84	@ 0x54
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
	...

080022cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002306:	f023 030c 	bic.w	r3, r3, #12
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	68b9      	ldr	r1, [r7, #8]
 8002310:	430b      	orrs	r3, r1
 8002312:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2c      	ldr	r2, [pc, #176]	@ (80023e0 <UART_SetConfig+0x114>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d103      	bne.n	800233c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002334:	f7ff fafc 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	e002      	b.n	8002342 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800233c:	f7ff fae4 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8002340:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	009a      	lsls	r2, r3, #2
 800234c:	441a      	add	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	4a22      	ldr	r2, [pc, #136]	@ (80023e4 <UART_SetConfig+0x118>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	0119      	lsls	r1, r3, #4
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	009a      	lsls	r2, r3, #2
 800236c:	441a      	add	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fbb2 f2f3 	udiv	r2, r2, r3
 8002378:	4b1a      	ldr	r3, [pc, #104]	@ (80023e4 <UART_SetConfig+0x118>)
 800237a:	fba3 0302 	umull	r0, r3, r3, r2
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2064      	movs	r0, #100	@ 0x64
 8002382:	fb00 f303 	mul.w	r3, r0, r3
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	3332      	adds	r3, #50	@ 0x32
 800238c:	4a15      	ldr	r2, [pc, #84]	@ (80023e4 <UART_SetConfig+0x118>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002398:	4419      	add	r1, r3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	009a      	lsls	r2, r3, #2
 80023a4:	441a      	add	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <UART_SetConfig+0x118>)
 80023b2:	fba3 0302 	umull	r0, r3, r3, r2
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2064      	movs	r0, #100	@ 0x64
 80023ba:	fb00 f303 	mul.w	r3, r0, r3
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	3332      	adds	r3, #50	@ 0x32
 80023c4:	4a07      	ldr	r2, [pc, #28]	@ (80023e4 <UART_SetConfig+0x118>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	f003 020f 	and.w	r2, r3, #15
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	440a      	add	r2, r1
 80023d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40013800 	.word	0x40013800
 80023e4:	51eb851f 	.word	0x51eb851f

080023e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80023f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fa:	2b84      	cmp	r3, #132	@ 0x84
 80023fc:	d005      	beq.n	800240a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80023fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4413      	add	r3, r2
 8002406:	3303      	adds	r3, #3
 8002408:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800240a:	68fb      	ldr	r3, [r7, #12]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800241a:	f001 f93f 	bl	800369c <vTaskStartScheduler>
  
  return osOK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}

08002424 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002426:	b089      	sub	sp, #36	@ 0x24
 8002428:	af04      	add	r7, sp, #16
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d020      	beq.n	8002478 <osThreadCreate+0x54>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01c      	beq.n	8002478 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685c      	ldr	r4, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691e      	ldr	r6, [r3, #16]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ffc9 	bl	80023e8 <makeFreeRtosPriority>
 8002456:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002460:	9202      	str	r2, [sp, #8]
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	9100      	str	r1, [sp, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	4632      	mov	r2, r6
 800246a:	4629      	mov	r1, r5
 800246c:	4620      	mov	r0, r4
 800246e:	f000 ff48 	bl	8003302 <xTaskCreateStatic>
 8002472:	4603      	mov	r3, r0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	e01c      	b.n	80024b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685c      	ldr	r4, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002484:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ffab 	bl	80023e8 <makeFreeRtosPriority>
 8002492:	4602      	mov	r2, r0
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	9200      	str	r2, [sp, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4632      	mov	r2, r6
 80024a0:	4629      	mov	r1, r5
 80024a2:	4620      	mov	r0, r4
 80024a4:	f000 ff8d 	bl	80033c2 <xTaskCreate>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d001      	beq.n	80024b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80024b2:	68fb      	ldr	r3, [r7, #12]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <osDelay+0x16>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	e000      	b.n	80024d4 <osDelay+0x18>
 80024d2:	2301      	movs	r3, #1
 80024d4:	4618      	mov	r0, r3
 80024d6:	f001 f8ab 	bl	8003630 <vTaskDelay>
  
  return osOK;
 80024da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00f      	beq.n	8002516 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10a      	bne.n	8002512 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2203      	movs	r2, #3
 8002502:	9200      	str	r2, [sp, #0]
 8002504:	2200      	movs	r2, #0
 8002506:	2100      	movs	r1, #0
 8002508:	2001      	movs	r0, #1
 800250a:	f000 f937 	bl	800277c <xQueueGenericCreateStatic>
 800250e:	4603      	mov	r3, r0
 8002510:	e016      	b.n	8002540 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002512:	2300      	movs	r3, #0
 8002514:	e014      	b.n	8002540 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d110      	bne.n	800253e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800251c:	2203      	movs	r2, #3
 800251e:	2100      	movs	r1, #0
 8002520:	2001      	movs	r0, #1
 8002522:	f000 f9a8 	bl	8002876 <xQueueGenericCreate>
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <osSemaphoreCreate+0x56>
 800252e:	2300      	movs	r3, #0
 8002530:	2200      	movs	r2, #0
 8002532:	2100      	movs	r1, #0
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fa2b 	bl	8002990 <xQueueGenericSend>
      return sema;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	e000      	b.n	8002540 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800253e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f103 0208 	add.w	r2, r3, #8
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f04f 32ff 	mov.w	r2, #4294967295
 8002560:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f103 0208 	add.w	r2, r3, #8
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f103 0208 	add.w	r2, r3, #8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	601a      	str	r2, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fa:	d103      	bne.n	8002604 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	e00c      	b.n	800261e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3308      	adds	r3, #8
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	e002      	b.n	8002612 <vListInsert+0x2e>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	429a      	cmp	r2, r3
 800261c:	d2f6      	bcs.n	800260c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	601a      	str	r2, [r3, #0]
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6892      	ldr	r2, [r2, #8]
 800266a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6852      	ldr	r2, [r2, #4]
 8002674:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	d103      	bne.n	8002688 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1e5a      	subs	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
	...

080026a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10b      	bne.n	80026d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026ce:	bf00      	nop
 80026d0:	bf00      	nop
 80026d2:	e7fd      	b.n	80026d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026d4:	f001 ff02 	bl	80044dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e0:	68f9      	ldr	r1, [r7, #12]
 80026e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	441a      	add	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002704:	3b01      	subs	r3, #1
 8002706:	68f9      	ldr	r1, [r7, #12]
 8002708:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	441a      	add	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	22ff      	movs	r2, #255	@ 0xff
 8002718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	22ff      	movs	r2, #255	@ 0xff
 8002720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d114      	bne.n	8002754 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d01a      	beq.n	8002768 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3310      	adds	r3, #16
 8002736:	4618      	mov	r0, r3
 8002738:	f001 f9fa 	bl	8003b30 <xTaskRemoveFromEventList>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d012      	beq.n	8002768 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002742:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <xQueueGenericReset+0xd0>)
 8002744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	e009      	b.n	8002768 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3310      	adds	r3, #16
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fef5 	bl	8002548 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3324      	adds	r3, #36	@ 0x24
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fef0 	bl	8002548 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002768:	f001 fee8 	bl	800453c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800276c:	2301      	movs	r3, #1
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	e000ed04 	.word	0xe000ed04

0800277c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08e      	sub	sp, #56	@ 0x38
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002794:	f383 8811 	msr	BASEPRI, r3
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80027a2:	bf00      	nop
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10b      	bne.n	80027c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80027ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	e7fd      	b.n	80027c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <xQueueGenericCreateStatic+0x56>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <xQueueGenericCreateStatic+0x5a>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <xQueueGenericCreateStatic+0x5c>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10b      	bne.n	80027f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	623b      	str	r3, [r7, #32]
}
 80027ee:	bf00      	nop
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <xQueueGenericCreateStatic+0x84>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <xQueueGenericCreateStatic+0x88>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <xQueueGenericCreateStatic+0x8a>
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10b      	bne.n	8002822 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800280a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	61fb      	str	r3, [r7, #28]
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	e7fd      	b.n	800281e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002822:	2348      	movs	r3, #72	@ 0x48
 8002824:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b48      	cmp	r3, #72	@ 0x48
 800282a:	d00b      	beq.n	8002844 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800282c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	61bb      	str	r3, [r7, #24]
}
 800283e:	bf00      	nop
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002844:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800284a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00d      	beq.n	800286c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002858:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800285c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f840 	bl	80028ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800286c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800286e:	4618      	mov	r0, r3
 8002870:	3730      	adds	r7, #48	@ 0x30
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002876:	b580      	push	{r7, lr}
 8002878:	b08a      	sub	sp, #40	@ 0x28
 800287a:	af02      	add	r7, sp, #8
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	4613      	mov	r3, r2
 8002882:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10b      	bne.n	80028a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	613b      	str	r3, [r7, #16]
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	e7fd      	b.n	800289e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	3348      	adds	r3, #72	@ 0x48
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 ff15 	bl	80046e0 <pvPortMalloc>
 80028b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d011      	beq.n	80028e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	3348      	adds	r3, #72	@ 0x48
 80028c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028d0:	79fa      	ldrb	r2, [r7, #7]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	4613      	mov	r3, r2
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f805 	bl	80028ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028e2:	69bb      	ldr	r3, [r7, #24]
	}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d103      	bne.n	8002908 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e002      	b.n	800290e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800291a:	2101      	movs	r1, #1
 800291c:	69b8      	ldr	r0, [r7, #24]
 800291e:	f7ff fec3 	bl	80026a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00e      	beq.n	8002956 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800294a:	2300      	movs	r3, #0
 800294c:	2200      	movs	r2, #0
 800294e:	2100      	movs	r1, #0
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f81d 	bl	8002990 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002968:	2301      	movs	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	461a      	mov	r2, r3
 8002974:	6939      	ldr	r1, [r7, #16]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff ff7d 	bl	8002876 <xQueueGenericCreate>
 800297c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7ff ffd3 	bl	800292a <prvInitialiseMutex>

		return xNewQueue;
 8002984:	68fb      	ldr	r3, [r7, #12]
	}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08e      	sub	sp, #56	@ 0x38
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800299e:	2300      	movs	r3, #0
 80029a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80029a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10b      	bne.n	80029c4 <xQueueGenericSend+0x34>
	__asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80029be:	bf00      	nop
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <xQueueGenericSend+0x42>
 80029ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <xQueueGenericSend+0x46>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <xQueueGenericSend+0x48>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <xQueueGenericSend+0x64>
	__asm volatile
 80029dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029ee:	bf00      	nop
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d103      	bne.n	8002a02 <xQueueGenericSend+0x72>
 80029fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <xQueueGenericSend+0x76>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <xQueueGenericSend+0x78>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10b      	bne.n	8002a24 <xQueueGenericSend+0x94>
	__asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	623b      	str	r3, [r7, #32]
}
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a24:	f001 fa44 	bl	8003eb0 <xTaskGetSchedulerState>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <xQueueGenericSend+0xa4>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <xQueueGenericSend+0xa8>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <xQueueGenericSend+0xaa>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10b      	bne.n	8002a56 <xQueueGenericSend+0xc6>
	__asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	61fb      	str	r3, [r7, #28]
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	e7fd      	b.n	8002a52 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a56:	f001 fd41 	bl	80044dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d302      	bcc.n	8002a6c <xQueueGenericSend+0xdc>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d129      	bne.n	8002ac0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a72:	f000 fb36 	bl	80030e2 <prvCopyDataToQueue>
 8002a76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d010      	beq.n	8002aa2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a82:	3324      	adds	r3, #36	@ 0x24
 8002a84:	4618      	mov	r0, r3
 8002a86:	f001 f853 	bl	8003b30 <xTaskRemoveFromEventList>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d013      	beq.n	8002ab8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a90:	4b3f      	ldr	r3, [pc, #252]	@ (8002b90 <xQueueGenericSend+0x200>)
 8002a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	e00a      	b.n	8002ab8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d007      	beq.n	8002ab8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002aa8:	4b39      	ldr	r3, [pc, #228]	@ (8002b90 <xQueueGenericSend+0x200>)
 8002aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ab8:	f001 fd40 	bl	800453c <vPortExitCritical>
				return pdPASS;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e063      	b.n	8002b88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ac6:	f001 fd39 	bl	800453c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e05c      	b.n	8002b88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d106      	bne.n	8002ae2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f001 f88d 	bl	8003bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ae2:	f001 fd2b 	bl	800453c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ae6:	f000 fe3b 	bl	8003760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002aea:	f001 fcf7 	bl	80044dc <vPortEnterCritical>
 8002aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002af4:	b25b      	sxtb	r3, r3
 8002af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afa:	d103      	bne.n	8002b04 <xQueueGenericSend+0x174>
 8002afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b0a:	b25b      	sxtb	r3, r3
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d103      	bne.n	8002b1a <xQueueGenericSend+0x18a>
 8002b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b1a:	f001 fd0f 	bl	800453c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b1e:	1d3a      	adds	r2, r7, #4
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 f87c 	bl	8003c24 <xTaskCheckForTimeOut>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d124      	bne.n	8002b7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b34:	f000 fbcd 	bl	80032d2 <prvIsQueueFull>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d018      	beq.n	8002b70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	3310      	adds	r3, #16
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 ffcc 	bl	8003ae4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b4e:	f000 fb58 	bl	8003202 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b52:	f000 fe13 	bl	800377c <xTaskResumeAll>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f47f af7c 	bne.w	8002a56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b90 <xQueueGenericSend+0x200>)
 8002b60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	e772      	b.n	8002a56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b72:	f000 fb46 	bl	8003202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b76:	f000 fe01 	bl	800377c <xTaskResumeAll>
 8002b7a:	e76c      	b.n	8002a56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b7e:	f000 fb40 	bl	8003202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b82:	f000 fdfb 	bl	800377c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3738      	adds	r7, #56	@ 0x38
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	e000ed04 	.word	0xe000ed04

08002b94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b090      	sub	sp, #64	@ 0x40
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10b      	bne.n	8002bc4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002bbe:	bf00      	nop
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d103      	bne.n	8002bd2 <xQueueGenericSendFromISR+0x3e>
 8002bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <xQueueGenericSendFromISR+0x42>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <xQueueGenericSendFromISR+0x44>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10b      	bne.n	8002bf4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002bee:	bf00      	nop
 8002bf0:	bf00      	nop
 8002bf2:	e7fd      	b.n	8002bf0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d103      	bne.n	8002c02 <xQueueGenericSendFromISR+0x6e>
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <xQueueGenericSendFromISR+0x72>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <xQueueGenericSendFromISR+0x74>
 8002c06:	2300      	movs	r3, #0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10b      	bne.n	8002c24 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	623b      	str	r3, [r7, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c24:	f001 fd1c 	bl	8004660 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c28:	f3ef 8211 	mrs	r2, BASEPRI
 8002c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	61fa      	str	r2, [r7, #28]
 8002c3e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c40:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c42:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d302      	bcc.n	8002c56 <xQueueGenericSendFromISR+0xc2>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d12f      	bne.n	8002cb6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002c6c:	f000 fa39 	bl	80030e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c70:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d112      	bne.n	8002ca0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d016      	beq.n	8002cb0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c84:	3324      	adds	r3, #36	@ 0x24
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 ff52 	bl	8003b30 <xTaskRemoveFromEventList>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00e      	beq.n	8002cb0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00b      	beq.n	8002cb0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e007      	b.n	8002cb0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ca0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	b25a      	sxtb	r2, r3
 8002caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002cb4:	e001      	b.n	8002cba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cbc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3740      	adds	r7, #64	@ 0x40
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08c      	sub	sp, #48	@ 0x30
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <xQueueReceive+0x32>
	__asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	623b      	str	r3, [r7, #32]
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	e7fd      	b.n	8002cfe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d103      	bne.n	8002d10 <xQueueReceive+0x40>
 8002d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <xQueueReceive+0x44>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <xQueueReceive+0x46>
 8002d14:	2300      	movs	r3, #0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10b      	bne.n	8002d32 <xQueueReceive+0x62>
	__asm volatile
 8002d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	61fb      	str	r3, [r7, #28]
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	e7fd      	b.n	8002d2e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d32:	f001 f8bd 	bl	8003eb0 <xTaskGetSchedulerState>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <xQueueReceive+0x72>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <xQueueReceive+0x76>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <xQueueReceive+0x78>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <xQueueReceive+0x94>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	61bb      	str	r3, [r7, #24]
}
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d64:	f001 fbba 	bl	80044dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01f      	beq.n	8002db4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d78:	f000 fa1d 	bl	80031b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	1e5a      	subs	r2, r3, #1
 8002d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d82:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00f      	beq.n	8002dac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8e:	3310      	adds	r3, #16
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fecd 	bl	8003b30 <xTaskRemoveFromEventList>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d007      	beq.n	8002dac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e90 <xQueueReceive+0x1c0>)
 8002d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002dac:	f001 fbc6 	bl	800453c <vPortExitCritical>
				return pdPASS;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e069      	b.n	8002e88 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d103      	bne.n	8002dc2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dba:	f001 fbbf 	bl	800453c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e062      	b.n	8002e88 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dc8:	f107 0310 	add.w	r3, r7, #16
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 ff13 	bl	8003bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dd6:	f001 fbb1 	bl	800453c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dda:	f000 fcc1 	bl	8003760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dde:	f001 fb7d 	bl	80044dc <vPortEnterCritical>
 8002de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002de8:	b25b      	sxtb	r3, r3
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d103      	bne.n	8002df8 <xQueueReceive+0x128>
 8002df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002dfe:	b25b      	sxtb	r3, r3
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d103      	bne.n	8002e0e <xQueueReceive+0x13e>
 8002e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e0e:	f001 fb95 	bl	800453c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e12:	1d3a      	adds	r2, r7, #4
 8002e14:	f107 0310 	add.w	r3, r7, #16
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 ff02 	bl	8003c24 <xTaskCheckForTimeOut>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d123      	bne.n	8002e6e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e28:	f000 fa3d 	bl	80032a6 <prvIsQueueEmpty>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d017      	beq.n	8002e62 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e34:	3324      	adds	r3, #36	@ 0x24
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fe52 	bl	8003ae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e42:	f000 f9de 	bl	8003202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e46:	f000 fc99 	bl	800377c <xTaskResumeAll>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d189      	bne.n	8002d64 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002e50:	4b0f      	ldr	r3, [pc, #60]	@ (8002e90 <xQueueReceive+0x1c0>)
 8002e52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	e780      	b.n	8002d64 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e64:	f000 f9cd 	bl	8003202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e68:	f000 fc88 	bl	800377c <xTaskResumeAll>
 8002e6c:	e77a      	b.n	8002d64 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e70:	f000 f9c7 	bl	8003202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e74:	f000 fc82 	bl	800377c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e7a:	f000 fa14 	bl	80032a6 <prvIsQueueEmpty>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f43f af6f 	beq.w	8002d64 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3730      	adds	r7, #48	@ 0x30
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	e000ed04 	.word	0xe000ed04

08002e94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08e      	sub	sp, #56	@ 0x38
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10b      	bne.n	8002ec8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	623b      	str	r3, [r7, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00b      	beq.n	8002ee8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	61fb      	str	r3, [r7, #28]
}
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
 8002ee6:	e7fd      	b.n	8002ee4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ee8:	f000 ffe2 	bl	8003eb0 <xTaskGetSchedulerState>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <xQueueSemaphoreTake+0x64>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <xQueueSemaphoreTake+0x68>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <xQueueSemaphoreTake+0x6a>
 8002efc:	2300      	movs	r3, #0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	61bb      	str	r3, [r7, #24]
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	e7fd      	b.n	8002f16 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f1a:	f001 fadf 	bl	80044dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f22:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d024      	beq.n	8002f74 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2c:	1e5a      	subs	r2, r3, #1
 8002f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f30:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d104      	bne.n	8002f44 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002f3a:	f001 f965 	bl	8004208 <pvTaskIncrementMutexHeldCount>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f42:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00f      	beq.n	8002f6c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4e:	3310      	adds	r3, #16
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fded 	bl	8003b30 <xTaskRemoveFromEventList>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f5c:	4b54      	ldr	r3, [pc, #336]	@ (80030b0 <xQueueSemaphoreTake+0x21c>)
 8002f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f6c:	f001 fae6 	bl	800453c <vPortExitCritical>
				return pdPASS;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e098      	b.n	80030a6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d112      	bne.n	8002fa0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	617b      	str	r3, [r7, #20]
}
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002f98:	f001 fad0 	bl	800453c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e082      	b.n	80030a6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fa6:	f107 030c 	add.w	r3, r7, #12
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fe24 	bl	8003bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fb4:	f001 fac2 	bl	800453c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fb8:	f000 fbd2 	bl	8003760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fbc:	f001 fa8e 	bl	80044dc <vPortEnterCritical>
 8002fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fc6:	b25b      	sxtb	r3, r3
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d103      	bne.n	8002fd6 <xQueueSemaphoreTake+0x142>
 8002fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fdc:	b25b      	sxtb	r3, r3
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d103      	bne.n	8002fec <xQueueSemaphoreTake+0x158>
 8002fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fec:	f001 faa6 	bl	800453c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ff0:	463a      	mov	r2, r7
 8002ff2:	f107 030c 	add.w	r3, r7, #12
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fe13 	bl	8003c24 <xTaskCheckForTimeOut>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d132      	bne.n	800306a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003004:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003006:	f000 f94e 	bl	80032a6 <prvIsQueueEmpty>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d026      	beq.n	800305e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003018:	f001 fa60 	bl	80044dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800301c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 ff63 	bl	8003eec <xTaskPriorityInherit>
 8003026:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003028:	f001 fa88 	bl	800453c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800302c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302e:	3324      	adds	r3, #36	@ 0x24
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fd55 	bl	8003ae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800303a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800303c:	f000 f8e1 	bl	8003202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003040:	f000 fb9c 	bl	800377c <xTaskResumeAll>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	f47f af67 	bne.w	8002f1a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800304c:	4b18      	ldr	r3, [pc, #96]	@ (80030b0 <xQueueSemaphoreTake+0x21c>)
 800304e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	e75d      	b.n	8002f1a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800305e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003060:	f000 f8cf 	bl	8003202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003064:	f000 fb8a 	bl	800377c <xTaskResumeAll>
 8003068:	e757      	b.n	8002f1a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800306a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800306c:	f000 f8c9 	bl	8003202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003070:	f000 fb84 	bl	800377c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003074:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003076:	f000 f916 	bl	80032a6 <prvIsQueueEmpty>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	f43f af4c 	beq.w	8002f1a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003088:	f001 fa28 	bl	80044dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800308c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800308e:	f000 f811 	bl	80030b4 <prvGetDisinheritPriorityAfterTimeout>
 8003092:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800309a:	4618      	mov	r0, r3
 800309c:	f001 f824 	bl	80040e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80030a0:	f001 fa4c 	bl	800453c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3738      	adds	r7, #56	@ 0x38
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	e000ed04 	.word	0xe000ed04

080030b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d006      	beq.n	80030d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f1c3 0307 	rsb	r3, r3, #7
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e001      	b.n	80030d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80030d6:	68fb      	ldr	r3, [r7, #12]
	}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b086      	sub	sp, #24
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10d      	bne.n	800311c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d14d      	bne.n	80031a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 ff63 	bl	8003fd8 <xTaskPriorityDisinherit>
 8003112:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	e043      	b.n	80031a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d119      	bne.n	8003156 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6858      	ldr	r0, [r3, #4]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	461a      	mov	r2, r3
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	f001 fdc5 	bl	8004cbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	441a      	add	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	429a      	cmp	r2, r3
 800314a:	d32b      	bcc.n	80031a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	e026      	b.n	80031a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	68d8      	ldr	r0, [r3, #12]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	461a      	mov	r2, r3
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	f001 fdab 	bl	8004cbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	425b      	negs	r3, r3
 8003170:	441a      	add	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d207      	bcs.n	8003192 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	425b      	negs	r3, r3
 800318c:	441a      	add	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d105      	bne.n	80031a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80031ac:	697b      	ldr	r3, [r7, #20]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d018      	beq.n	80031fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	441a      	add	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d303      	bcc.n	80031ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68d9      	ldr	r1, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	461a      	mov	r2, r3
 80031f4:	6838      	ldr	r0, [r7, #0]
 80031f6:	f001 fd61 	bl	8004cbc <memcpy>
	}
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800320a:	f001 f967 	bl	80044dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003214:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003216:	e011      	b.n	800323c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	2b00      	cmp	r3, #0
 800321e:	d012      	beq.n	8003246 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3324      	adds	r3, #36	@ 0x24
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fc83 	bl	8003b30 <xTaskRemoveFromEventList>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003230:	f000 fd5c 	bl	8003cec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	3b01      	subs	r3, #1
 8003238:	b2db      	uxtb	r3, r3
 800323a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800323c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003240:	2b00      	cmp	r3, #0
 8003242:	dce9      	bgt.n	8003218 <prvUnlockQueue+0x16>
 8003244:	e000      	b.n	8003248 <prvUnlockQueue+0x46>
					break;
 8003246:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	22ff      	movs	r2, #255	@ 0xff
 800324c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003250:	f001 f974 	bl	800453c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003254:	f001 f942 	bl	80044dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800325e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003260:	e011      	b.n	8003286 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d012      	beq.n	8003290 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3310      	adds	r3, #16
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fc5e 	bl	8003b30 <xTaskRemoveFromEventList>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800327a:	f000 fd37 	bl	8003cec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800327e:	7bbb      	ldrb	r3, [r7, #14]
 8003280:	3b01      	subs	r3, #1
 8003282:	b2db      	uxtb	r3, r3
 8003284:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800328a:	2b00      	cmp	r3, #0
 800328c:	dce9      	bgt.n	8003262 <prvUnlockQueue+0x60>
 800328e:	e000      	b.n	8003292 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003290:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	22ff      	movs	r2, #255	@ 0xff
 8003296:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800329a:	f001 f94f 	bl	800453c <vPortExitCritical>
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032ae:	f001 f915 	bl	80044dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032ba:	2301      	movs	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	e001      	b.n	80032c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032c4:	f001 f93a 	bl	800453c <vPortExitCritical>

	return xReturn;
 80032c8:	68fb      	ldr	r3, [r7, #12]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032da:	f001 f8ff 	bl	80044dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d102      	bne.n	80032f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032ea:	2301      	movs	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	e001      	b.n	80032f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032f4:	f001 f922 	bl	800453c <vPortExitCritical>

	return xReturn;
 80032f8:	68fb      	ldr	r3, [r7, #12]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003302:	b580      	push	{r7, lr}
 8003304:	b08e      	sub	sp, #56	@ 0x38
 8003306:	af04      	add	r7, sp, #16
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <xTaskCreateStatic+0x2c>
	__asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	623b      	str	r3, [r7, #32]
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	e7fd      	b.n	800332a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800332e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <xTaskCreateStatic+0x4a>
	__asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	61fb      	str	r3, [r7, #28]
}
 8003346:	bf00      	nop
 8003348:	bf00      	nop
 800334a:	e7fd      	b.n	8003348 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800334c:	2354      	movs	r3, #84	@ 0x54
 800334e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b54      	cmp	r3, #84	@ 0x54
 8003354:	d00b      	beq.n	800336e <xTaskCreateStatic+0x6c>
	__asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	61bb      	str	r3, [r7, #24]
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	e7fd      	b.n	800336a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800336e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01e      	beq.n	80033b4 <xTaskCreateStatic+0xb2>
 8003376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01b      	beq.n	80033b4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800337c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003382:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003384:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	2202      	movs	r2, #2
 800338a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800338e:	2300      	movs	r3, #0
 8003390:	9303      	str	r3, [sp, #12]
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	9302      	str	r3, [sp, #8]
 8003396:	f107 0314 	add.w	r3, r7, #20
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f850 	bl	800344c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033ae:	f000 f8d5 	bl	800355c <prvAddNewTaskToReadyList>
 80033b2:	e001      	b.n	80033b8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033b8:	697b      	ldr	r3, [r7, #20]
	}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3728      	adds	r7, #40	@ 0x28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b08c      	sub	sp, #48	@ 0x30
 80033c6:	af04      	add	r7, sp, #16
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 f982 	bl	80046e0 <pvPortMalloc>
 80033dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00e      	beq.n	8003402 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033e4:	2054      	movs	r0, #84	@ 0x54
 80033e6:	f001 f97b 	bl	80046e0 <pvPortMalloc>
 80033ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80033f8:	e005      	b.n	8003406 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f001 fa3e 	bl	800487c <vPortFree>
 8003400:	e001      	b.n	8003406 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d017      	beq.n	800343c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003414:	88fa      	ldrh	r2, [r7, #6]
 8003416:	2300      	movs	r3, #0
 8003418:	9303      	str	r3, [sp, #12]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	9302      	str	r3, [sp, #8]
 800341e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 f80e 	bl	800344c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003430:	69f8      	ldr	r0, [r7, #28]
 8003432:	f000 f893 	bl	800355c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003436:	2301      	movs	r3, #1
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	e002      	b.n	8003442 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800343c:	f04f 33ff 	mov.w	r3, #4294967295
 8003440:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003442:	69bb      	ldr	r3, [r7, #24]
	}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003464:	3b01      	subs	r3, #1
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f023 0307 	bic.w	r3, r3, #7
 8003472:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	617b      	str	r3, [r7, #20]
}
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	e7fd      	b.n	8003492 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01f      	beq.n	80034dc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800349c:	2300      	movs	r3, #0
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	e012      	b.n	80034c8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	4413      	add	r3, r2
 80034a8:	7819      	ldrb	r1, [r3, #0]
 80034aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	3334      	adds	r3, #52	@ 0x34
 80034b2:	460a      	mov	r2, r1
 80034b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3301      	adds	r3, #1
 80034c6:	61fb      	str	r3, [r7, #28]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b0f      	cmp	r3, #15
 80034cc:	d9e9      	bls.n	80034a2 <prvInitialiseNewTask+0x56>
 80034ce:	e000      	b.n	80034d2 <prvInitialiseNewTask+0x86>
			{
				break;
 80034d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034da:	e003      	b.n	80034e4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e6:	2b06      	cmp	r3, #6
 80034e8:	d901      	bls.n	80034ee <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034ea:	2306      	movs	r3, #6
 80034ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034f8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80034fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fc:	2200      	movs	r2, #0
 80034fe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003502:	3304      	adds	r3, #4
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff f83e 	bl	8002586 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800350a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350c:	3318      	adds	r3, #24
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff f839 	bl	8002586 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003518:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351c:	f1c3 0207 	rsb	r2, r3, #7
 8003520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003522:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003528:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800352a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352c:	2200      	movs	r2, #0
 800352e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	68f9      	ldr	r1, [r7, #12]
 800353c:	69b8      	ldr	r0, [r7, #24]
 800353e:	f000 fedd 	bl	80042fc <pxPortInitialiseStack>
 8003542:	4602      	mov	r2, r0
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800354e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003552:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003554:	bf00      	nop
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003564:	f000 ffba 	bl	80044dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003568:	4b2a      	ldr	r3, [pc, #168]	@ (8003614 <prvAddNewTaskToReadyList+0xb8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	4a29      	ldr	r2, [pc, #164]	@ (8003614 <prvAddNewTaskToReadyList+0xb8>)
 8003570:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003572:	4b29      	ldr	r3, [pc, #164]	@ (8003618 <prvAddNewTaskToReadyList+0xbc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800357a:	4a27      	ldr	r2, [pc, #156]	@ (8003618 <prvAddNewTaskToReadyList+0xbc>)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003580:	4b24      	ldr	r3, [pc, #144]	@ (8003614 <prvAddNewTaskToReadyList+0xb8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d110      	bne.n	80035aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003588:	f000 fbd4 	bl	8003d34 <prvInitialiseTaskLists>
 800358c:	e00d      	b.n	80035aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800358e:	4b23      	ldr	r3, [pc, #140]	@ (800361c <prvAddNewTaskToReadyList+0xc0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003596:	4b20      	ldr	r3, [pc, #128]	@ (8003618 <prvAddNewTaskToReadyList+0xbc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d802      	bhi.n	80035aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003618 <prvAddNewTaskToReadyList+0xbc>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003620 <prvAddNewTaskToReadyList+0xc4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003620 <prvAddNewTaskToReadyList+0xc4>)
 80035b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	2201      	movs	r2, #1
 80035ba:	409a      	lsls	r2, r3
 80035bc:	4b19      	ldr	r3, [pc, #100]	@ (8003624 <prvAddNewTaskToReadyList+0xc8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	4a18      	ldr	r2, [pc, #96]	@ (8003624 <prvAddNewTaskToReadyList+0xc8>)
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4a15      	ldr	r2, [pc, #84]	@ (8003628 <prvAddNewTaskToReadyList+0xcc>)
 80035d4:	441a      	add	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3304      	adds	r3, #4
 80035da:	4619      	mov	r1, r3
 80035dc:	4610      	mov	r0, r2
 80035de:	f7fe ffde 	bl	800259e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035e2:	f000 ffab 	bl	800453c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <prvAddNewTaskToReadyList+0xc0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00e      	beq.n	800360c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003618 <prvAddNewTaskToReadyList+0xbc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d207      	bcs.n	800360c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035fc:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <prvAddNewTaskToReadyList+0xd0>)
 80035fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000498 	.word	0x20000498
 8003618:	20000398 	.word	0x20000398
 800361c:	200004a4 	.word	0x200004a4
 8003620:	200004b4 	.word	0x200004b4
 8003624:	200004a0 	.word	0x200004a0
 8003628:	2000039c 	.word	0x2000039c
 800362c:	e000ed04 	.word	0xe000ed04

08003630 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d018      	beq.n	8003674 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003642:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <vTaskDelay+0x64>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <vTaskDelay+0x32>
	__asm volatile
 800364a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	60bb      	str	r3, [r7, #8]
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	e7fd      	b.n	800365e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003662:	f000 f87d 	bl	8003760 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003666:	2100      	movs	r1, #0
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fde1 	bl	8004230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800366e:	f000 f885 	bl	800377c <xTaskResumeAll>
 8003672:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800367a:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <vTaskDelay+0x68>)
 800367c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	200004c0 	.word	0x200004c0
 8003698:	e000ed04 	.word	0xe000ed04

0800369c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	@ 0x28
 80036a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036aa:	463a      	mov	r2, r7
 80036ac:	1d39      	adds	r1, r7, #4
 80036ae:	f107 0308 	add.w	r3, r7, #8
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc fd54 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036b8:	6839      	ldr	r1, [r7, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	9202      	str	r2, [sp, #8]
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	2300      	movs	r3, #0
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2300      	movs	r3, #0
 80036c8:	460a      	mov	r2, r1
 80036ca:	491f      	ldr	r1, [pc, #124]	@ (8003748 <vTaskStartScheduler+0xac>)
 80036cc:	481f      	ldr	r0, [pc, #124]	@ (800374c <vTaskStartScheduler+0xb0>)
 80036ce:	f7ff fe18 	bl	8003302 <xTaskCreateStatic>
 80036d2:	4603      	mov	r3, r0
 80036d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003750 <vTaskStartScheduler+0xb4>)
 80036d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003750 <vTaskStartScheduler+0xb4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036e0:	2301      	movs	r3, #1
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e001      	b.n	80036ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d116      	bne.n	800371e <vTaskStartScheduler+0x82>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	613b      	str	r3, [r7, #16]
}
 8003702:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003704:	4b13      	ldr	r3, [pc, #76]	@ (8003754 <vTaskStartScheduler+0xb8>)
 8003706:	f04f 32ff 	mov.w	r2, #4294967295
 800370a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800370c:	4b12      	ldr	r3, [pc, #72]	@ (8003758 <vTaskStartScheduler+0xbc>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003712:	4b12      	ldr	r3, [pc, #72]	@ (800375c <vTaskStartScheduler+0xc0>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003718:	f000 fe6e 	bl	80043f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800371c:	e00f      	b.n	800373e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d10b      	bne.n	800373e <vTaskStartScheduler+0xa2>
	__asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	60fb      	str	r3, [r7, #12]
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	e7fd      	b.n	800373a <vTaskStartScheduler+0x9e>
}
 800373e:	bf00      	nop
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	08005878 	.word	0x08005878
 800374c:	08003d05 	.word	0x08003d05
 8003750:	200004bc 	.word	0x200004bc
 8003754:	200004b8 	.word	0x200004b8
 8003758:	200004a4 	.word	0x200004a4
 800375c:	2000049c 	.word	0x2000049c

08003760 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003764:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <vTaskSuspendAll+0x18>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	4a03      	ldr	r2, [pc, #12]	@ (8003778 <vTaskSuspendAll+0x18>)
 800376c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800376e:	bf00      	nop
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	200004c0 	.word	0x200004c0

0800377c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800378a:	4b42      	ldr	r3, [pc, #264]	@ (8003894 <xTaskResumeAll+0x118>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10b      	bne.n	80037aa <xTaskResumeAll+0x2e>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	603b      	str	r3, [r7, #0]
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	e7fd      	b.n	80037a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037aa:	f000 fe97 	bl	80044dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037ae:	4b39      	ldr	r3, [pc, #228]	@ (8003894 <xTaskResumeAll+0x118>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	4a37      	ldr	r2, [pc, #220]	@ (8003894 <xTaskResumeAll+0x118>)
 80037b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037b8:	4b36      	ldr	r3, [pc, #216]	@ (8003894 <xTaskResumeAll+0x118>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d161      	bne.n	8003884 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037c0:	4b35      	ldr	r3, [pc, #212]	@ (8003898 <xTaskResumeAll+0x11c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d05d      	beq.n	8003884 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037c8:	e02e      	b.n	8003828 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ca:	4b34      	ldr	r3, [pc, #208]	@ (800389c <xTaskResumeAll+0x120>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	3318      	adds	r3, #24
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe ff3c 	bl	8002654 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	3304      	adds	r3, #4
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe ff37 	bl	8002654 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ea:	2201      	movs	r2, #1
 80037ec:	409a      	lsls	r2, r3
 80037ee:	4b2c      	ldr	r3, [pc, #176]	@ (80038a0 <xTaskResumeAll+0x124>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	4a2a      	ldr	r2, [pc, #168]	@ (80038a0 <xTaskResumeAll+0x124>)
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4a27      	ldr	r2, [pc, #156]	@ (80038a4 <xTaskResumeAll+0x128>)
 8003806:	441a      	add	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	3304      	adds	r3, #4
 800380c:	4619      	mov	r1, r3
 800380e:	4610      	mov	r0, r2
 8003810:	f7fe fec5 	bl	800259e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003818:	4b23      	ldr	r3, [pc, #140]	@ (80038a8 <xTaskResumeAll+0x12c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381e:	429a      	cmp	r2, r3
 8003820:	d302      	bcc.n	8003828 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003822:	4b22      	ldr	r3, [pc, #136]	@ (80038ac <xTaskResumeAll+0x130>)
 8003824:	2201      	movs	r2, #1
 8003826:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003828:	4b1c      	ldr	r3, [pc, #112]	@ (800389c <xTaskResumeAll+0x120>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1cc      	bne.n	80037ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003836:	f000 fb1b 	bl	8003e70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800383a:	4b1d      	ldr	r3, [pc, #116]	@ (80038b0 <xTaskResumeAll+0x134>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d010      	beq.n	8003868 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003846:	f000 f837 	bl	80038b8 <xTaskIncrementTick>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003850:	4b16      	ldr	r3, [pc, #88]	@ (80038ac <xTaskResumeAll+0x130>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3b01      	subs	r3, #1
 800385a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f1      	bne.n	8003846 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003862:	4b13      	ldr	r3, [pc, #76]	@ (80038b0 <xTaskResumeAll+0x134>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003868:	4b10      	ldr	r3, [pc, #64]	@ (80038ac <xTaskResumeAll+0x130>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d009      	beq.n	8003884 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003870:	2301      	movs	r3, #1
 8003872:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003874:	4b0f      	ldr	r3, [pc, #60]	@ (80038b4 <xTaskResumeAll+0x138>)
 8003876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003884:	f000 fe5a 	bl	800453c <vPortExitCritical>

	return xAlreadyYielded;
 8003888:	68bb      	ldr	r3, [r7, #8]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	200004c0 	.word	0x200004c0
 8003898:	20000498 	.word	0x20000498
 800389c:	20000458 	.word	0x20000458
 80038a0:	200004a0 	.word	0x200004a0
 80038a4:	2000039c 	.word	0x2000039c
 80038a8:	20000398 	.word	0x20000398
 80038ac:	200004ac 	.word	0x200004ac
 80038b0:	200004a8 	.word	0x200004a8
 80038b4:	e000ed04 	.word	0xe000ed04

080038b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038c2:	4b4f      	ldr	r3, [pc, #316]	@ (8003a00 <xTaskIncrementTick+0x148>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f040 808f 	bne.w	80039ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003a04 <xTaskIncrementTick+0x14c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3301      	adds	r3, #1
 80038d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003a04 <xTaskIncrementTick+0x14c>)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d121      	bne.n	8003924 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80038e0:	4b49      	ldr	r3, [pc, #292]	@ (8003a08 <xTaskIncrementTick+0x150>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <xTaskIncrementTick+0x4a>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	603b      	str	r3, [r7, #0]
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	e7fd      	b.n	80038fe <xTaskIncrementTick+0x46>
 8003902:	4b41      	ldr	r3, [pc, #260]	@ (8003a08 <xTaskIncrementTick+0x150>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	4b40      	ldr	r3, [pc, #256]	@ (8003a0c <xTaskIncrementTick+0x154>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a08 <xTaskIncrementTick+0x150>)
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4a3e      	ldr	r2, [pc, #248]	@ (8003a0c <xTaskIncrementTick+0x154>)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b3e      	ldr	r3, [pc, #248]	@ (8003a10 <xTaskIncrementTick+0x158>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a10 <xTaskIncrementTick+0x158>)
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	f000 faa6 	bl	8003e70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003924:	4b3b      	ldr	r3, [pc, #236]	@ (8003a14 <xTaskIncrementTick+0x15c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	429a      	cmp	r2, r3
 800392c:	d348      	bcc.n	80039c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800392e:	4b36      	ldr	r3, [pc, #216]	@ (8003a08 <xTaskIncrementTick+0x150>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003938:	4b36      	ldr	r3, [pc, #216]	@ (8003a14 <xTaskIncrementTick+0x15c>)
 800393a:	f04f 32ff 	mov.w	r2, #4294967295
 800393e:	601a      	str	r2, [r3, #0]
					break;
 8003940:	e03e      	b.n	80039c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003942:	4b31      	ldr	r3, [pc, #196]	@ (8003a08 <xTaskIncrementTick+0x150>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d203      	bcs.n	8003962 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800395a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a14 <xTaskIncrementTick+0x15c>)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003960:	e02e      	b.n	80039c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	3304      	adds	r3, #4
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fe74 	bl	8002654 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	d004      	beq.n	800397e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	3318      	adds	r3, #24
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe fe6b 	bl	8002654 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003982:	2201      	movs	r2, #1
 8003984:	409a      	lsls	r2, r3
 8003986:	4b24      	ldr	r3, [pc, #144]	@ (8003a18 <xTaskIncrementTick+0x160>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4313      	orrs	r3, r2
 800398c:	4a22      	ldr	r2, [pc, #136]	@ (8003a18 <xTaskIncrementTick+0x160>)
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a1c <xTaskIncrementTick+0x164>)
 800399e:	441a      	add	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f7fe fdf9 	bl	800259e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a20 <xTaskIncrementTick+0x168>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d3b9      	bcc.n	800392e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80039ba:	2301      	movs	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039be:	e7b6      	b.n	800392e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039c0:	4b17      	ldr	r3, [pc, #92]	@ (8003a20 <xTaskIncrementTick+0x168>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c6:	4915      	ldr	r1, [pc, #84]	@ (8003a1c <xTaskIncrementTick+0x164>)
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d901      	bls.n	80039dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80039d8:	2301      	movs	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80039dc:	4b11      	ldr	r3, [pc, #68]	@ (8003a24 <xTaskIncrementTick+0x16c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e004      	b.n	80039f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80039ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003a28 <xTaskIncrementTick+0x170>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3301      	adds	r3, #1
 80039f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003a28 <xTaskIncrementTick+0x170>)
 80039f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80039f4:	697b      	ldr	r3, [r7, #20]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200004c0 	.word	0x200004c0
 8003a04:	2000049c 	.word	0x2000049c
 8003a08:	20000450 	.word	0x20000450
 8003a0c:	20000454 	.word	0x20000454
 8003a10:	200004b0 	.word	0x200004b0
 8003a14:	200004b8 	.word	0x200004b8
 8003a18:	200004a0 	.word	0x200004a0
 8003a1c:	2000039c 	.word	0x2000039c
 8003a20:	20000398 	.word	0x20000398
 8003a24:	200004ac 	.word	0x200004ac
 8003a28:	200004a8 	.word	0x200004a8

08003a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a32:	4b27      	ldr	r3, [pc, #156]	@ (8003ad0 <vTaskSwitchContext+0xa4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a3a:	4b26      	ldr	r3, [pc, #152]	@ (8003ad4 <vTaskSwitchContext+0xa8>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a40:	e040      	b.n	8003ac4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003a42:	4b24      	ldr	r3, [pc, #144]	@ (8003ad4 <vTaskSwitchContext+0xa8>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a48:	4b23      	ldr	r3, [pc, #140]	@ (8003ad8 <vTaskSwitchContext+0xac>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	fab3 f383 	clz	r3, r3
 8003a54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a56:	7afb      	ldrb	r3, [r7, #11]
 8003a58:	f1c3 031f 	rsb	r3, r3, #31
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	491f      	ldr	r1, [pc, #124]	@ (8003adc <vTaskSwitchContext+0xb0>)
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	607b      	str	r3, [r7, #4]
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	e7fd      	b.n	8003a86 <vTaskSwitchContext+0x5a>
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4a11      	ldr	r2, [pc, #68]	@ (8003adc <vTaskSwitchContext+0xb0>)
 8003a96:	4413      	add	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	3308      	adds	r3, #8
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d104      	bne.n	8003aba <vTaskSwitchContext+0x8e>
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a07      	ldr	r2, [pc, #28]	@ (8003ae0 <vTaskSwitchContext+0xb4>)
 8003ac2:	6013      	str	r3, [r2, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	200004c0 	.word	0x200004c0
 8003ad4:	200004ac 	.word	0x200004ac
 8003ad8:	200004a0 	.word	0x200004a0
 8003adc:	2000039c 	.word	0x2000039c
 8003ae0:	20000398 	.word	0x20000398

08003ae4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10b      	bne.n	8003b0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b0c:	4b07      	ldr	r3, [pc, #28]	@ (8003b2c <vTaskPlaceOnEventList+0x48>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3318      	adds	r3, #24
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7fe fd65 	bl	80025e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	6838      	ldr	r0, [r7, #0]
 8003b1e:	f000 fb87 	bl	8004230 <prvAddCurrentTaskToDelayedList>
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000398 	.word	0x20000398

08003b30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10b      	bne.n	8003b5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	60fb      	str	r3, [r7, #12]
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	e7fd      	b.n	8003b5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	3318      	adds	r3, #24
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fd76 	bl	8002654 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b68:	4b1d      	ldr	r3, [pc, #116]	@ (8003be0 <xTaskRemoveFromEventList+0xb0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d11c      	bne.n	8003baa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe fd6d 	bl	8002654 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7e:	2201      	movs	r2, #1
 8003b80:	409a      	lsls	r2, r3
 8003b82:	4b18      	ldr	r3, [pc, #96]	@ (8003be4 <xTaskRemoveFromEventList+0xb4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	4a16      	ldr	r2, [pc, #88]	@ (8003be4 <xTaskRemoveFromEventList+0xb4>)
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4a13      	ldr	r2, [pc, #76]	@ (8003be8 <xTaskRemoveFromEventList+0xb8>)
 8003b9a:	441a      	add	r2, r3
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	f7fe fcfb 	bl	800259e <vListInsertEnd>
 8003ba8:	e005      	b.n	8003bb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	3318      	adds	r3, #24
 8003bae:	4619      	mov	r1, r3
 8003bb0:	480e      	ldr	r0, [pc, #56]	@ (8003bec <xTaskRemoveFromEventList+0xbc>)
 8003bb2:	f7fe fcf4 	bl	800259e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bba:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <xTaskRemoveFromEventList+0xc0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d905      	bls.n	8003bd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf4 <xTaskRemoveFromEventList+0xc4>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e001      	b.n	8003bd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bd4:	697b      	ldr	r3, [r7, #20]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200004c0 	.word	0x200004c0
 8003be4:	200004a0 	.word	0x200004a0
 8003be8:	2000039c 	.word	0x2000039c
 8003bec:	20000458 	.word	0x20000458
 8003bf0:	20000398 	.word	0x20000398
 8003bf4:	200004ac 	.word	0x200004ac

08003bf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c00:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <vTaskInternalSetTimeOutState+0x24>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c08:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <vTaskInternalSetTimeOutState+0x28>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	605a      	str	r2, [r3, #4]
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	200004b0 	.word	0x200004b0
 8003c20:	2000049c 	.word	0x2000049c

08003c24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10b      	bne.n	8003c4c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	613b      	str	r3, [r7, #16]
}
 8003c46:	bf00      	nop
 8003c48:	bf00      	nop
 8003c4a:	e7fd      	b.n	8003c48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10b      	bne.n	8003c6a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	60fb      	str	r3, [r7, #12]
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	e7fd      	b.n	8003c66 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003c6a:	f000 fc37 	bl	80044dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <xTaskCheckForTimeOut+0xc0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c86:	d102      	bne.n	8003c8e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61fb      	str	r3, [r7, #28]
 8003c8c:	e023      	b.n	8003cd6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4b15      	ldr	r3, [pc, #84]	@ (8003ce8 <xTaskCheckForTimeOut+0xc4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d007      	beq.n	8003caa <xTaskCheckForTimeOut+0x86>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d302      	bcc.n	8003caa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	e015      	b.n	8003cd6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d20b      	bcs.n	8003ccc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	1ad2      	subs	r2, r2, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ff99 	bl	8003bf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	e004      	b.n	8003cd6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cd6:	f000 fc31 	bl	800453c <vPortExitCritical>

	return xReturn;
 8003cda:	69fb      	ldr	r3, [r7, #28]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3720      	adds	r7, #32
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	2000049c 	.word	0x2000049c
 8003ce8:	200004b0 	.word	0x200004b0

08003cec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	@ (8003d00 <vTaskMissedYield+0x14>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
}
 8003cf6:	bf00      	nop
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	200004ac 	.word	0x200004ac

08003d04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d0c:	f000 f852 	bl	8003db4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d10:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <prvIdleTask+0x28>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d9f9      	bls.n	8003d0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d18:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <prvIdleTask+0x2c>)
 8003d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d28:	e7f0      	b.n	8003d0c <prvIdleTask+0x8>
 8003d2a:	bf00      	nop
 8003d2c:	2000039c 	.word	0x2000039c
 8003d30:	e000ed04 	.word	0xe000ed04

08003d34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	e00c      	b.n	8003d5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4a12      	ldr	r2, [pc, #72]	@ (8003d94 <prvInitialiseTaskLists+0x60>)
 8003d4c:	4413      	add	r3, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fbfa 	bl	8002548 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3301      	adds	r3, #1
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d9ef      	bls.n	8003d40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d60:	480d      	ldr	r0, [pc, #52]	@ (8003d98 <prvInitialiseTaskLists+0x64>)
 8003d62:	f7fe fbf1 	bl	8002548 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d66:	480d      	ldr	r0, [pc, #52]	@ (8003d9c <prvInitialiseTaskLists+0x68>)
 8003d68:	f7fe fbee 	bl	8002548 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d6c:	480c      	ldr	r0, [pc, #48]	@ (8003da0 <prvInitialiseTaskLists+0x6c>)
 8003d6e:	f7fe fbeb 	bl	8002548 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d72:	480c      	ldr	r0, [pc, #48]	@ (8003da4 <prvInitialiseTaskLists+0x70>)
 8003d74:	f7fe fbe8 	bl	8002548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d78:	480b      	ldr	r0, [pc, #44]	@ (8003da8 <prvInitialiseTaskLists+0x74>)
 8003d7a:	f7fe fbe5 	bl	8002548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <prvInitialiseTaskLists+0x78>)
 8003d80:	4a05      	ldr	r2, [pc, #20]	@ (8003d98 <prvInitialiseTaskLists+0x64>)
 8003d82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d84:	4b0a      	ldr	r3, [pc, #40]	@ (8003db0 <prvInitialiseTaskLists+0x7c>)
 8003d86:	4a05      	ldr	r2, [pc, #20]	@ (8003d9c <prvInitialiseTaskLists+0x68>)
 8003d88:	601a      	str	r2, [r3, #0]
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	2000039c 	.word	0x2000039c
 8003d98:	20000428 	.word	0x20000428
 8003d9c:	2000043c 	.word	0x2000043c
 8003da0:	20000458 	.word	0x20000458
 8003da4:	2000046c 	.word	0x2000046c
 8003da8:	20000484 	.word	0x20000484
 8003dac:	20000450 	.word	0x20000450
 8003db0:	20000454 	.word	0x20000454

08003db4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dba:	e019      	b.n	8003df0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003dbc:	f000 fb8e 	bl	80044dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc0:	4b10      	ldr	r3, [pc, #64]	@ (8003e04 <prvCheckTasksWaitingTermination+0x50>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fe fc41 	bl	8002654 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <prvCheckTasksWaitingTermination+0x54>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8003e08 <prvCheckTasksWaitingTermination+0x54>)
 8003dda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <prvCheckTasksWaitingTermination+0x58>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	4a0a      	ldr	r2, [pc, #40]	@ (8003e0c <prvCheckTasksWaitingTermination+0x58>)
 8003de4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003de6:	f000 fba9 	bl	800453c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f810 	bl	8003e10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003df0:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <prvCheckTasksWaitingTermination+0x58>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e1      	bne.n	8003dbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	2000046c 	.word	0x2000046c
 8003e08:	20000498 	.word	0x20000498
 8003e0c:	20000480 	.word	0x20000480

08003e10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d108      	bne.n	8003e34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fd28 	bl	800487c <vPortFree>
				vPortFree( pxTCB );
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fd25 	bl	800487c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e32:	e019      	b.n	8003e68 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d103      	bne.n	8003e46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fd1c 	bl	800487c <vPortFree>
	}
 8003e44:	e010      	b.n	8003e68 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d00b      	beq.n	8003e68 <prvDeleteTCB+0x58>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	60fb      	str	r3, [r7, #12]
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <prvDeleteTCB+0x54>
	}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e76:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea8 <prvResetNextTaskUnblockTime+0x38>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d104      	bne.n	8003e8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e80:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <prvResetNextTaskUnblockTime+0x3c>)
 8003e82:	f04f 32ff 	mov.w	r2, #4294967295
 8003e86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e88:	e008      	b.n	8003e9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ea8 <prvResetNextTaskUnblockTime+0x38>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4a04      	ldr	r2, [pc, #16]	@ (8003eac <prvResetNextTaskUnblockTime+0x3c>)
 8003e9a:	6013      	str	r3, [r2, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000450 	.word	0x20000450
 8003eac:	200004b8 	.word	0x200004b8

08003eb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee4 <xTaskGetSchedulerState+0x34>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d102      	bne.n	8003ec4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	607b      	str	r3, [r7, #4]
 8003ec2:	e008      	b.n	8003ed6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec4:	4b08      	ldr	r3, [pc, #32]	@ (8003ee8 <xTaskGetSchedulerState+0x38>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d102      	bne.n	8003ed2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	e001      	b.n	8003ed6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ed6:	687b      	ldr	r3, [r7, #4]
	}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	200004a4 	.word	0x200004a4
 8003ee8:	200004c0 	.word	0x200004c0

08003eec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d05e      	beq.n	8003fc0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f06:	4b31      	ldr	r3, [pc, #196]	@ (8003fcc <xTaskPriorityInherit+0xe0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d24e      	bcs.n	8003fae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	db06      	blt.n	8003f26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f18:	4b2c      	ldr	r3, [pc, #176]	@ (8003fcc <xTaskPriorityInherit+0xe0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	f1c3 0207 	rsb	r2, r3, #7
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6959      	ldr	r1, [r3, #20]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4a26      	ldr	r2, [pc, #152]	@ (8003fd0 <xTaskPriorityInherit+0xe4>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	4299      	cmp	r1, r3
 8003f3c:	d12f      	bne.n	8003f9e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fb86 	bl	8002654 <uxListRemove>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	2201      	movs	r2, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43da      	mvns	r2, r3
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd4 <xTaskPriorityInherit+0xe8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd4 <xTaskPriorityInherit+0xe8>)
 8003f62:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f64:	4b19      	ldr	r3, [pc, #100]	@ (8003fcc <xTaskPriorityInherit+0xe0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f72:	2201      	movs	r2, #1
 8003f74:	409a      	lsls	r2, r3
 8003f76:	4b17      	ldr	r3, [pc, #92]	@ (8003fd4 <xTaskPriorityInherit+0xe8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	4a15      	ldr	r2, [pc, #84]	@ (8003fd4 <xTaskPriorityInherit+0xe8>)
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4a10      	ldr	r2, [pc, #64]	@ (8003fd0 <xTaskPriorityInherit+0xe4>)
 8003f8e:	441a      	add	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f7fe fb01 	bl	800259e <vListInsertEnd>
 8003f9c:	e004      	b.n	8003fa8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fcc <xTaskPriorityInherit+0xe0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	e008      	b.n	8003fc0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fb2:	4b06      	ldr	r3, [pc, #24]	@ (8003fcc <xTaskPriorityInherit+0xe0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d201      	bcs.n	8003fc0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
	}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000398 	.word	0x20000398
 8003fd0:	2000039c 	.word	0x2000039c
 8003fd4:	200004a0 	.word	0x200004a0

08003fd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d070      	beq.n	80040d0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003fee:	4b3b      	ldr	r3, [pc, #236]	@ (80040dc <xTaskPriorityDisinherit+0x104>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d00b      	beq.n	8004010 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	60fb      	str	r3, [r7, #12]
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10b      	bne.n	8004030 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60bb      	str	r3, [r7, #8]
}
 800402a:	bf00      	nop
 800402c:	bf00      	nop
 800402e:	e7fd      	b.n	800402c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004034:	1e5a      	subs	r2, r3, #1
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	429a      	cmp	r2, r3
 8004044:	d044      	beq.n	80040d0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800404a:	2b00      	cmp	r3, #0
 800404c:	d140      	bne.n	80040d0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	3304      	adds	r3, #4
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe fafe 	bl	8002654 <uxListRemove>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d115      	bne.n	800408a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004062:	491f      	ldr	r1, [pc, #124]	@ (80040e0 <xTaskPriorityDisinherit+0x108>)
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <xTaskPriorityDisinherit+0xb2>
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004078:	2201      	movs	r2, #1
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	43da      	mvns	r2, r3
 8004080:	4b18      	ldr	r3, [pc, #96]	@ (80040e4 <xTaskPriorityDisinherit+0x10c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4013      	ands	r3, r2
 8004086:	4a17      	ldr	r2, [pc, #92]	@ (80040e4 <xTaskPriorityDisinherit+0x10c>)
 8004088:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	f1c3 0207 	rsb	r2, r3, #7
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	2201      	movs	r2, #1
 80040a4:	409a      	lsls	r2, r3
 80040a6:	4b0f      	ldr	r3, [pc, #60]	@ (80040e4 <xTaskPriorityDisinherit+0x10c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	4a0d      	ldr	r2, [pc, #52]	@ (80040e4 <xTaskPriorityDisinherit+0x10c>)
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4a08      	ldr	r2, [pc, #32]	@ (80040e0 <xTaskPriorityDisinherit+0x108>)
 80040be:	441a      	add	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	3304      	adds	r3, #4
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f7fe fa69 	bl	800259e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040cc:	2301      	movs	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040d0:	697b      	ldr	r3, [r7, #20]
	}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000398 	.word	0x20000398
 80040e0:	2000039c 	.word	0x2000039c
 80040e4:	200004a0 	.word	0x200004a0

080040e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80040f6:	2301      	movs	r3, #1
 80040f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d079      	beq.n	80041f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10b      	bne.n	8004120 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	60fb      	str	r3, [r7, #12]
}
 800411a:	bf00      	nop
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d902      	bls.n	8004130 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	e002      	b.n	8004136 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	429a      	cmp	r2, r3
 800413e:	d059      	beq.n	80041f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	429a      	cmp	r2, r3
 8004148:	d154      	bne.n	80041f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800414a:	4b2c      	ldr	r3, [pc, #176]	@ (80041fc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	429a      	cmp	r2, r3
 8004152:	d10b      	bne.n	800416c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	60bb      	str	r3, [r7, #8]
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	e7fd      	b.n	8004168 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	db04      	blt.n	800418a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f1c3 0207 	rsb	r2, r3, #7
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	6959      	ldr	r1, [r3, #20]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4a19      	ldr	r2, [pc, #100]	@ (8004200 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800419a:	4413      	add	r3, r2
 800419c:	4299      	cmp	r1, r3
 800419e:	d129      	bne.n	80041f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe fa55 	bl	8002654 <uxListRemove>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	2201      	movs	r2, #1
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43da      	mvns	r2, r3
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4013      	ands	r3, r2
 80041c2:	4a10      	ldr	r2, [pc, #64]	@ (8004204 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80041c4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	2201      	movs	r2, #1
 80041cc:	409a      	lsls	r2, r3
 80041ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004204 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4a06      	ldr	r2, [pc, #24]	@ (8004200 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80041e6:	441a      	add	r2, r3
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4619      	mov	r1, r3
 80041ee:	4610      	mov	r0, r2
 80041f0:	f7fe f9d5 	bl	800259e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041f4:	bf00      	nop
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20000398 	.word	0x20000398
 8004200:	2000039c 	.word	0x2000039c
 8004204:	200004a0 	.word	0x200004a0

08004208 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800420c:	4b07      	ldr	r3, [pc, #28]	@ (800422c <pvTaskIncrementMutexHeldCount+0x24>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004214:	4b05      	ldr	r3, [pc, #20]	@ (800422c <pvTaskIncrementMutexHeldCount+0x24>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800421a:	3201      	adds	r2, #1
 800421c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800421e:	4b03      	ldr	r3, [pc, #12]	@ (800422c <pvTaskIncrementMutexHeldCount+0x24>)
 8004220:	681b      	ldr	r3, [r3, #0]
	}
 8004222:	4618      	mov	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000398 	.word	0x20000398

08004230 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800423a:	4b29      	ldr	r3, [pc, #164]	@ (80042e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004240:	4b28      	ldr	r3, [pc, #160]	@ (80042e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3304      	adds	r3, #4
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe fa04 	bl	8002654 <uxListRemove>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10b      	bne.n	800426a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004252:	4b24      	ldr	r3, [pc, #144]	@ (80042e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	2201      	movs	r2, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43da      	mvns	r2, r3
 8004260:	4b21      	ldr	r3, [pc, #132]	@ (80042e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4013      	ands	r3, r2
 8004266:	4a20      	ldr	r2, [pc, #128]	@ (80042e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004268:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d10a      	bne.n	8004288 <prvAddCurrentTaskToDelayedList+0x58>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004278:	4b1a      	ldr	r3, [pc, #104]	@ (80042e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3304      	adds	r3, #4
 800427e:	4619      	mov	r1, r3
 8004280:	481a      	ldr	r0, [pc, #104]	@ (80042ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8004282:	f7fe f98c 	bl	800259e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004286:	e026      	b.n	80042d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4413      	add	r3, r2
 800428e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004290:	4b14      	ldr	r3, [pc, #80]	@ (80042e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	429a      	cmp	r2, r3
 800429e:	d209      	bcs.n	80042b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042a0:	4b13      	ldr	r3, [pc, #76]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4b0f      	ldr	r3, [pc, #60]	@ (80042e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3304      	adds	r3, #4
 80042aa:	4619      	mov	r1, r3
 80042ac:	4610      	mov	r0, r2
 80042ae:	f7fe f999 	bl	80025e4 <vListInsert>
}
 80042b2:	e010      	b.n	80042d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042b4:	4b0f      	ldr	r3, [pc, #60]	@ (80042f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3304      	adds	r3, #4
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f7fe f98f 	bl	80025e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042c6:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d202      	bcs.n	80042d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80042d0:	4a09      	ldr	r2, [pc, #36]	@ (80042f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6013      	str	r3, [r2, #0]
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	2000049c 	.word	0x2000049c
 80042e4:	20000398 	.word	0x20000398
 80042e8:	200004a0 	.word	0x200004a0
 80042ec:	20000484 	.word	0x20000484
 80042f0:	20000454 	.word	0x20000454
 80042f4:	20000450 	.word	0x20000450
 80042f8:	200004b8 	.word	0x200004b8

080042fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3b04      	subs	r3, #4
 800430c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b04      	subs	r3, #4
 800431a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f023 0201 	bic.w	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3b04      	subs	r3, #4
 800432a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800432c:	4a08      	ldr	r2, [pc, #32]	@ (8004350 <pxPortInitialiseStack+0x54>)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3b14      	subs	r3, #20
 8004336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3b20      	subs	r3, #32
 8004342:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004344:	68fb      	ldr	r3, [r7, #12]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr
 8004350:	08004355 	.word	0x08004355

08004354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800435a:	2300      	movs	r3, #0
 800435c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800435e:	4b12      	ldr	r3, [pc, #72]	@ (80043a8 <prvTaskExitError+0x54>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004366:	d00b      	beq.n	8004380 <prvTaskExitError+0x2c>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	60fb      	str	r3, [r7, #12]
}
 800437a:	bf00      	nop
 800437c:	bf00      	nop
 800437e:	e7fd      	b.n	800437c <prvTaskExitError+0x28>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	60bb      	str	r3, [r7, #8]
}
 8004392:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004394:	bf00      	nop
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0fc      	beq.n	8004396 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	20000010 	.word	0x20000010
 80043ac:	00000000 	.word	0x00000000

080043b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043b0:	4b07      	ldr	r3, [pc, #28]	@ (80043d0 <pxCurrentTCBConst2>)
 80043b2:	6819      	ldr	r1, [r3, #0]
 80043b4:	6808      	ldr	r0, [r1, #0]
 80043b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043ba:	f380 8809 	msr	PSP, r0
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f380 8811 	msr	BASEPRI, r0
 80043ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80043ce:	4770      	bx	lr

080043d0 <pxCurrentTCBConst2>:
 80043d0:	20000398 	.word	0x20000398
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop

080043d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80043d8:	4806      	ldr	r0, [pc, #24]	@ (80043f4 <prvPortStartFirstTask+0x1c>)
 80043da:	6800      	ldr	r0, [r0, #0]
 80043dc:	6800      	ldr	r0, [r0, #0]
 80043de:	f380 8808 	msr	MSP, r0
 80043e2:	b662      	cpsie	i
 80043e4:	b661      	cpsie	f
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	df00      	svc	0
 80043f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043f2:	bf00      	nop
 80043f4:	e000ed08 	.word	0xe000ed08

080043f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043fe:	4b32      	ldr	r3, [pc, #200]	@ (80044c8 <xPortStartScheduler+0xd0>)
 8004400:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	22ff      	movs	r2, #255	@ 0xff
 800440e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004420:	b2da      	uxtb	r2, r3
 8004422:	4b2a      	ldr	r3, [pc, #168]	@ (80044cc <xPortStartScheduler+0xd4>)
 8004424:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004426:	4b2a      	ldr	r3, [pc, #168]	@ (80044d0 <xPortStartScheduler+0xd8>)
 8004428:	2207      	movs	r2, #7
 800442a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800442c:	e009      	b.n	8004442 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800442e:	4b28      	ldr	r3, [pc, #160]	@ (80044d0 <xPortStartScheduler+0xd8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3b01      	subs	r3, #1
 8004434:	4a26      	ldr	r2, [pc, #152]	@ (80044d0 <xPortStartScheduler+0xd8>)
 8004436:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	b2db      	uxtb	r3, r3
 8004440:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800444a:	2b80      	cmp	r3, #128	@ 0x80
 800444c:	d0ef      	beq.n	800442e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800444e:	4b20      	ldr	r3, [pc, #128]	@ (80044d0 <xPortStartScheduler+0xd8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1c3 0307 	rsb	r3, r3, #7
 8004456:	2b04      	cmp	r3, #4
 8004458:	d00b      	beq.n	8004472 <xPortStartScheduler+0x7a>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60bb      	str	r3, [r7, #8]
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	e7fd      	b.n	800446e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004472:	4b17      	ldr	r3, [pc, #92]	@ (80044d0 <xPortStartScheduler+0xd8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	4a15      	ldr	r2, [pc, #84]	@ (80044d0 <xPortStartScheduler+0xd8>)
 800447a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800447c:	4b14      	ldr	r3, [pc, #80]	@ (80044d0 <xPortStartScheduler+0xd8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004484:	4a12      	ldr	r2, [pc, #72]	@ (80044d0 <xPortStartScheduler+0xd8>)
 8004486:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004490:	4b10      	ldr	r3, [pc, #64]	@ (80044d4 <xPortStartScheduler+0xdc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a0f      	ldr	r2, [pc, #60]	@ (80044d4 <xPortStartScheduler+0xdc>)
 8004496:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800449a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800449c:	4b0d      	ldr	r3, [pc, #52]	@ (80044d4 <xPortStartScheduler+0xdc>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a0c      	ldr	r2, [pc, #48]	@ (80044d4 <xPortStartScheduler+0xdc>)
 80044a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80044a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044a8:	f000 f8b8 	bl	800461c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044ac:	4b0a      	ldr	r3, [pc, #40]	@ (80044d8 <xPortStartScheduler+0xe0>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044b2:	f7ff ff91 	bl	80043d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044b6:	f7ff fab9 	bl	8003a2c <vTaskSwitchContext>
	prvTaskExitError();
 80044ba:	f7ff ff4b 	bl	8004354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	e000e400 	.word	0xe000e400
 80044cc:	200004c4 	.word	0x200004c4
 80044d0:	200004c8 	.word	0x200004c8
 80044d4:	e000ed20 	.word	0xe000ed20
 80044d8:	20000010 	.word	0x20000010

080044dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	607b      	str	r3, [r7, #4]
}
 80044f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004534 <vPortEnterCritical+0x58>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004534 <vPortEnterCritical+0x58>)
 80044fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004500:	4b0c      	ldr	r3, [pc, #48]	@ (8004534 <vPortEnterCritical+0x58>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d110      	bne.n	800452a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004508:	4b0b      	ldr	r3, [pc, #44]	@ (8004538 <vPortEnterCritical+0x5c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <vPortEnterCritical+0x4e>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	603b      	str	r3, [r7, #0]
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	e7fd      	b.n	8004526 <vPortEnterCritical+0x4a>
	}
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	20000010 	.word	0x20000010
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004542:	4b12      	ldr	r3, [pc, #72]	@ (800458c <vPortExitCritical+0x50>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10b      	bne.n	8004562 <vPortExitCritical+0x26>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	607b      	str	r3, [r7, #4]
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	e7fd      	b.n	800455e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004562:	4b0a      	ldr	r3, [pc, #40]	@ (800458c <vPortExitCritical+0x50>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3b01      	subs	r3, #1
 8004568:	4a08      	ldr	r2, [pc, #32]	@ (800458c <vPortExitCritical+0x50>)
 800456a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800456c:	4b07      	ldr	r3, [pc, #28]	@ (800458c <vPortExitCritical+0x50>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d105      	bne.n	8004580 <vPortExitCritical+0x44>
 8004574:	2300      	movs	r3, #0
 8004576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f383 8811 	msr	BASEPRI, r3
}
 800457e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20000010 	.word	0x20000010

08004590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004590:	f3ef 8009 	mrs	r0, PSP
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <pxCurrentTCBConst>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045a0:	6010      	str	r0, [r2, #0]
 80045a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80045a6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80045aa:	f380 8811 	msr	BASEPRI, r0
 80045ae:	f7ff fa3d 	bl	8003a2c <vTaskSwitchContext>
 80045b2:	f04f 0000 	mov.w	r0, #0
 80045b6:	f380 8811 	msr	BASEPRI, r0
 80045ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80045be:	6819      	ldr	r1, [r3, #0]
 80045c0:	6808      	ldr	r0, [r1, #0]
 80045c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045c6:	f380 8809 	msr	PSP, r0
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	4770      	bx	lr

080045d0 <pxCurrentTCBConst>:
 80045d0:	20000398 	.word	0x20000398
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop

080045d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	607b      	str	r3, [r7, #4]
}
 80045f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045f2:	f7ff f961 	bl	80038b8 <xTaskIncrementTick>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045fc:	4b06      	ldr	r3, [pc, #24]	@ (8004618 <SysTick_Handler+0x40>)
 80045fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	2300      	movs	r3, #0
 8004606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f383 8811 	msr	BASEPRI, r3
}
 800460e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004620:	4b0a      	ldr	r3, [pc, #40]	@ (800464c <vPortSetupTimerInterrupt+0x30>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004626:	4b0a      	ldr	r3, [pc, #40]	@ (8004650 <vPortSetupTimerInterrupt+0x34>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800462c:	4b09      	ldr	r3, [pc, #36]	@ (8004654 <vPortSetupTimerInterrupt+0x38>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a09      	ldr	r2, [pc, #36]	@ (8004658 <vPortSetupTimerInterrupt+0x3c>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	4a08      	ldr	r2, [pc, #32]	@ (800465c <vPortSetupTimerInterrupt+0x40>)
 800463a:	3b01      	subs	r3, #1
 800463c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800463e:	4b03      	ldr	r3, [pc, #12]	@ (800464c <vPortSetupTimerInterrupt+0x30>)
 8004640:	2207      	movs	r2, #7
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr
 800464c:	e000e010 	.word	0xe000e010
 8004650:	e000e018 	.word	0xe000e018
 8004654:	20000004 	.word	0x20000004
 8004658:	10624dd3 	.word	0x10624dd3
 800465c:	e000e014 	.word	0xe000e014

08004660 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004666:	f3ef 8305 	mrs	r3, IPSR
 800466a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b0f      	cmp	r3, #15
 8004670:	d915      	bls.n	800469e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004672:	4a17      	ldr	r2, [pc, #92]	@ (80046d0 <vPortValidateInterruptPriority+0x70>)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800467c:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <vPortValidateInterruptPriority+0x74>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	7afa      	ldrb	r2, [r7, #11]
 8004682:	429a      	cmp	r2, r3
 8004684:	d20b      	bcs.n	800469e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	607b      	str	r3, [r7, #4]
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	e7fd      	b.n	800469a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800469e:	4b0e      	ldr	r3, [pc, #56]	@ (80046d8 <vPortValidateInterruptPriority+0x78>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046a6:	4b0d      	ldr	r3, [pc, #52]	@ (80046dc <vPortValidateInterruptPriority+0x7c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d90b      	bls.n	80046c6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	603b      	str	r3, [r7, #0]
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	e7fd      	b.n	80046c2 <vPortValidateInterruptPriority+0x62>
	}
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr
 80046d0:	e000e3f0 	.word	0xe000e3f0
 80046d4:	200004c4 	.word	0x200004c4
 80046d8:	e000ed0c 	.word	0xe000ed0c
 80046dc:	200004c8 	.word	0x200004c8

080046e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	@ 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046ec:	f7ff f838 	bl	8003760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046f0:	4b5c      	ldr	r3, [pc, #368]	@ (8004864 <pvPortMalloc+0x184>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046f8:	f000 f924 	bl	8004944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046fc:	4b5a      	ldr	r3, [pc, #360]	@ (8004868 <pvPortMalloc+0x188>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	f040 8095 	bne.w	8004834 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01e      	beq.n	800474e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004710:	2208      	movs	r2, #8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4413      	add	r3, r2
 8004716:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	2b00      	cmp	r3, #0
 8004720:	d015      	beq.n	800474e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f023 0307 	bic.w	r3, r3, #7
 8004728:	3308      	adds	r3, #8
 800472a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <pvPortMalloc+0x6e>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	617b      	str	r3, [r7, #20]
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	e7fd      	b.n	800474a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d06f      	beq.n	8004834 <pvPortMalloc+0x154>
 8004754:	4b45      	ldr	r3, [pc, #276]	@ (800486c <pvPortMalloc+0x18c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	429a      	cmp	r2, r3
 800475c:	d86a      	bhi.n	8004834 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800475e:	4b44      	ldr	r3, [pc, #272]	@ (8004870 <pvPortMalloc+0x190>)
 8004760:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004762:	4b43      	ldr	r3, [pc, #268]	@ (8004870 <pvPortMalloc+0x190>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004768:	e004      	b.n	8004774 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	429a      	cmp	r2, r3
 800477c:	d903      	bls.n	8004786 <pvPortMalloc+0xa6>
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f1      	bne.n	800476a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004786:	4b37      	ldr	r3, [pc, #220]	@ (8004864 <pvPortMalloc+0x184>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800478c:	429a      	cmp	r2, r3
 800478e:	d051      	beq.n	8004834 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2208      	movs	r2, #8
 8004796:	4413      	add	r3, r2
 8004798:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	1ad2      	subs	r2, r2, r3
 80047aa:	2308      	movs	r3, #8
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d920      	bls.n	80047f4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4413      	add	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00b      	beq.n	80047dc <pvPortMalloc+0xfc>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	613b      	str	r3, [r7, #16]
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	1ad2      	subs	r2, r2, r3
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047ee:	69b8      	ldr	r0, [r7, #24]
 80047f0:	f000 f90a 	bl	8004a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047f4:	4b1d      	ldr	r3, [pc, #116]	@ (800486c <pvPortMalloc+0x18c>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	4a1b      	ldr	r2, [pc, #108]	@ (800486c <pvPortMalloc+0x18c>)
 8004800:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004802:	4b1a      	ldr	r3, [pc, #104]	@ (800486c <pvPortMalloc+0x18c>)
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4b1b      	ldr	r3, [pc, #108]	@ (8004874 <pvPortMalloc+0x194>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d203      	bcs.n	8004816 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800480e:	4b17      	ldr	r3, [pc, #92]	@ (800486c <pvPortMalloc+0x18c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a18      	ldr	r2, [pc, #96]	@ (8004874 <pvPortMalloc+0x194>)
 8004814:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	4b13      	ldr	r3, [pc, #76]	@ (8004868 <pvPortMalloc+0x188>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	431a      	orrs	r2, r3
 8004820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004822:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800482a:	4b13      	ldr	r3, [pc, #76]	@ (8004878 <pvPortMalloc+0x198>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3301      	adds	r3, #1
 8004830:	4a11      	ldr	r2, [pc, #68]	@ (8004878 <pvPortMalloc+0x198>)
 8004832:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004834:	f7fe ffa2 	bl	800377c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <pvPortMalloc+0x17a>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	60fb      	str	r3, [r7, #12]
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	e7fd      	b.n	8004856 <pvPortMalloc+0x176>
	return pvReturn;
 800485a:	69fb      	ldr	r3, [r7, #28]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3728      	adds	r7, #40	@ 0x28
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	200010d4 	.word	0x200010d4
 8004868:	200010e8 	.word	0x200010e8
 800486c:	200010d8 	.word	0x200010d8
 8004870:	200010cc 	.word	0x200010cc
 8004874:	200010dc 	.word	0x200010dc
 8004878:	200010e0 	.word	0x200010e0

0800487c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d04f      	beq.n	800492e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800488e:	2308      	movs	r3, #8
 8004890:	425b      	negs	r3, r3
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4413      	add	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	4b25      	ldr	r3, [pc, #148]	@ (8004938 <vPortFree+0xbc>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10b      	bne.n	80048c2 <vPortFree+0x46>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	60fb      	str	r3, [r7, #12]
}
 80048bc:	bf00      	nop
 80048be:	bf00      	nop
 80048c0:	e7fd      	b.n	80048be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <vPortFree+0x66>
	__asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	60bb      	str	r3, [r7, #8]
}
 80048dc:	bf00      	nop
 80048de:	bf00      	nop
 80048e0:	e7fd      	b.n	80048de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	4b14      	ldr	r3, [pc, #80]	@ (8004938 <vPortFree+0xbc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01e      	beq.n	800492e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d11a      	bne.n	800492e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004938 <vPortFree+0xbc>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	43db      	mvns	r3, r3
 8004902:	401a      	ands	r2, r3
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004908:	f7fe ff2a 	bl	8003760 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	4b0a      	ldr	r3, [pc, #40]	@ (800493c <vPortFree+0xc0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4413      	add	r3, r2
 8004916:	4a09      	ldr	r2, [pc, #36]	@ (800493c <vPortFree+0xc0>)
 8004918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800491a:	6938      	ldr	r0, [r7, #16]
 800491c:	f000 f874 	bl	8004a08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004920:	4b07      	ldr	r3, [pc, #28]	@ (8004940 <vPortFree+0xc4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3301      	adds	r3, #1
 8004926:	4a06      	ldr	r2, [pc, #24]	@ (8004940 <vPortFree+0xc4>)
 8004928:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800492a:	f7fe ff27 	bl	800377c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800492e:	bf00      	nop
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	200010e8 	.word	0x200010e8
 800493c:	200010d8 	.word	0x200010d8
 8004940:	200010e4 	.word	0x200010e4

08004944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800494a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800494e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004950:	4b27      	ldr	r3, [pc, #156]	@ (80049f0 <prvHeapInit+0xac>)
 8004952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00c      	beq.n	8004978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3307      	adds	r3, #7
 8004962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0307 	bic.w	r3, r3, #7
 800496a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	4a1f      	ldr	r2, [pc, #124]	@ (80049f0 <prvHeapInit+0xac>)
 8004974:	4413      	add	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800497c:	4a1d      	ldr	r2, [pc, #116]	@ (80049f4 <prvHeapInit+0xb0>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004982:	4b1c      	ldr	r3, [pc, #112]	@ (80049f4 <prvHeapInit+0xb0>)
 8004984:	2200      	movs	r2, #0
 8004986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	4413      	add	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004990:	2208      	movs	r2, #8
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0307 	bic.w	r3, r3, #7
 800499e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4a15      	ldr	r2, [pc, #84]	@ (80049f8 <prvHeapInit+0xb4>)
 80049a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049a6:	4b14      	ldr	r3, [pc, #80]	@ (80049f8 <prvHeapInit+0xb4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2200      	movs	r2, #0
 80049ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049ae:	4b12      	ldr	r3, [pc, #72]	@ (80049f8 <prvHeapInit+0xb4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	1ad2      	subs	r2, r2, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049c4:	4b0c      	ldr	r3, [pc, #48]	@ (80049f8 <prvHeapInit+0xb4>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	4a0a      	ldr	r2, [pc, #40]	@ (80049fc <prvHeapInit+0xb8>)
 80049d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4a09      	ldr	r2, [pc, #36]	@ (8004a00 <prvHeapInit+0xbc>)
 80049da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049dc:	4b09      	ldr	r3, [pc, #36]	@ (8004a04 <prvHeapInit+0xc0>)
 80049de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	200004cc 	.word	0x200004cc
 80049f4:	200010cc 	.word	0x200010cc
 80049f8:	200010d4 	.word	0x200010d4
 80049fc:	200010dc 	.word	0x200010dc
 8004a00:	200010d8 	.word	0x200010d8
 8004a04:	200010e8 	.word	0x200010e8

08004a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a10:	4b27      	ldr	r3, [pc, #156]	@ (8004ab0 <prvInsertBlockIntoFreeList+0xa8>)
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e002      	b.n	8004a1c <prvInsertBlockIntoFreeList+0x14>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d8f7      	bhi.n	8004a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	4413      	add	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d108      	bne.n	8004a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	441a      	add	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	441a      	add	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d118      	bne.n	8004a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b14      	ldr	r3, [pc, #80]	@ (8004ab4 <prvInsertBlockIntoFreeList+0xac>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d00d      	beq.n	8004a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	441a      	add	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	e008      	b.n	8004a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a86:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab4 <prvInsertBlockIntoFreeList+0xac>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	e003      	b.n	8004a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d002      	beq.n	8004aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr
 8004ab0:	200010cc 	.word	0x200010cc
 8004ab4:	200010d4 	.word	0x200010d4

08004ab8 <atoi>:
 8004ab8:	220a      	movs	r2, #10
 8004aba:	2100      	movs	r1, #0
 8004abc:	f000 b87a 	b.w	8004bb4 <strtol>

08004ac0 <_strtol_l.constprop.0>:
 8004ac0:	2b24      	cmp	r3, #36	@ 0x24
 8004ac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac6:	4686      	mov	lr, r0
 8004ac8:	4690      	mov	r8, r2
 8004aca:	d801      	bhi.n	8004ad0 <_strtol_l.constprop.0+0x10>
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d106      	bne.n	8004ade <_strtol_l.constprop.0+0x1e>
 8004ad0:	f000 f8c8 	bl	8004c64 <__errno>
 8004ad4:	2316      	movs	r3, #22
 8004ad6:	6003      	str	r3, [r0, #0]
 8004ad8:	2000      	movs	r0, #0
 8004ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ade:	460d      	mov	r5, r1
 8004ae0:	4833      	ldr	r0, [pc, #204]	@ (8004bb0 <_strtol_l.constprop.0+0xf0>)
 8004ae2:	462a      	mov	r2, r5
 8004ae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ae8:	5d06      	ldrb	r6, [r0, r4]
 8004aea:	f016 0608 	ands.w	r6, r6, #8
 8004aee:	d1f8      	bne.n	8004ae2 <_strtol_l.constprop.0+0x22>
 8004af0:	2c2d      	cmp	r4, #45	@ 0x2d
 8004af2:	d12d      	bne.n	8004b50 <_strtol_l.constprop.0+0x90>
 8004af4:	2601      	movs	r6, #1
 8004af6:	782c      	ldrb	r4, [r5, #0]
 8004af8:	1c95      	adds	r5, r2, #2
 8004afa:	f033 0210 	bics.w	r2, r3, #16
 8004afe:	d109      	bne.n	8004b14 <_strtol_l.constprop.0+0x54>
 8004b00:	2c30      	cmp	r4, #48	@ 0x30
 8004b02:	d12a      	bne.n	8004b5a <_strtol_l.constprop.0+0x9a>
 8004b04:	782a      	ldrb	r2, [r5, #0]
 8004b06:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004b0a:	2a58      	cmp	r2, #88	@ 0x58
 8004b0c:	d125      	bne.n	8004b5a <_strtol_l.constprop.0+0x9a>
 8004b0e:	2310      	movs	r3, #16
 8004b10:	786c      	ldrb	r4, [r5, #1]
 8004b12:	3502      	adds	r5, #2
 8004b14:	2200      	movs	r2, #0
 8004b16:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004b1a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004b1e:	fbbc f9f3 	udiv	r9, ip, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	fb03 ca19 	mls	sl, r3, r9, ip
 8004b28:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004b2c:	2f09      	cmp	r7, #9
 8004b2e:	d81b      	bhi.n	8004b68 <_strtol_l.constprop.0+0xa8>
 8004b30:	463c      	mov	r4, r7
 8004b32:	42a3      	cmp	r3, r4
 8004b34:	dd27      	ble.n	8004b86 <_strtol_l.constprop.0+0xc6>
 8004b36:	1c57      	adds	r7, r2, #1
 8004b38:	d007      	beq.n	8004b4a <_strtol_l.constprop.0+0x8a>
 8004b3a:	4581      	cmp	r9, r0
 8004b3c:	d320      	bcc.n	8004b80 <_strtol_l.constprop.0+0xc0>
 8004b3e:	d101      	bne.n	8004b44 <_strtol_l.constprop.0+0x84>
 8004b40:	45a2      	cmp	sl, r4
 8004b42:	db1d      	blt.n	8004b80 <_strtol_l.constprop.0+0xc0>
 8004b44:	2201      	movs	r2, #1
 8004b46:	fb00 4003 	mla	r0, r0, r3, r4
 8004b4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b4e:	e7eb      	b.n	8004b28 <_strtol_l.constprop.0+0x68>
 8004b50:	2c2b      	cmp	r4, #43	@ 0x2b
 8004b52:	bf04      	itt	eq
 8004b54:	782c      	ldrbeq	r4, [r5, #0]
 8004b56:	1c95      	addeq	r5, r2, #2
 8004b58:	e7cf      	b.n	8004afa <_strtol_l.constprop.0+0x3a>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1da      	bne.n	8004b14 <_strtol_l.constprop.0+0x54>
 8004b5e:	2c30      	cmp	r4, #48	@ 0x30
 8004b60:	bf0c      	ite	eq
 8004b62:	2308      	moveq	r3, #8
 8004b64:	230a      	movne	r3, #10
 8004b66:	e7d5      	b.n	8004b14 <_strtol_l.constprop.0+0x54>
 8004b68:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004b6c:	2f19      	cmp	r7, #25
 8004b6e:	d801      	bhi.n	8004b74 <_strtol_l.constprop.0+0xb4>
 8004b70:	3c37      	subs	r4, #55	@ 0x37
 8004b72:	e7de      	b.n	8004b32 <_strtol_l.constprop.0+0x72>
 8004b74:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004b78:	2f19      	cmp	r7, #25
 8004b7a:	d804      	bhi.n	8004b86 <_strtol_l.constprop.0+0xc6>
 8004b7c:	3c57      	subs	r4, #87	@ 0x57
 8004b7e:	e7d8      	b.n	8004b32 <_strtol_l.constprop.0+0x72>
 8004b80:	f04f 32ff 	mov.w	r2, #4294967295
 8004b84:	e7e1      	b.n	8004b4a <_strtol_l.constprop.0+0x8a>
 8004b86:	1c53      	adds	r3, r2, #1
 8004b88:	d108      	bne.n	8004b9c <_strtol_l.constprop.0+0xdc>
 8004b8a:	2322      	movs	r3, #34	@ 0x22
 8004b8c:	4660      	mov	r0, ip
 8004b8e:	f8ce 3000 	str.w	r3, [lr]
 8004b92:	f1b8 0f00 	cmp.w	r8, #0
 8004b96:	d0a0      	beq.n	8004ada <_strtol_l.constprop.0+0x1a>
 8004b98:	1e69      	subs	r1, r5, #1
 8004b9a:	e006      	b.n	8004baa <_strtol_l.constprop.0+0xea>
 8004b9c:	b106      	cbz	r6, 8004ba0 <_strtol_l.constprop.0+0xe0>
 8004b9e:	4240      	negs	r0, r0
 8004ba0:	f1b8 0f00 	cmp.w	r8, #0
 8004ba4:	d099      	beq.n	8004ada <_strtol_l.constprop.0+0x1a>
 8004ba6:	2a00      	cmp	r2, #0
 8004ba8:	d1f6      	bne.n	8004b98 <_strtol_l.constprop.0+0xd8>
 8004baa:	f8c8 1000 	str.w	r1, [r8]
 8004bae:	e794      	b.n	8004ada <_strtol_l.constprop.0+0x1a>
 8004bb0:	080058ab 	.word	0x080058ab

08004bb4 <strtol>:
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	460a      	mov	r2, r1
 8004bb8:	4601      	mov	r1, r0
 8004bba:	4802      	ldr	r0, [pc, #8]	@ (8004bc4 <strtol+0x10>)
 8004bbc:	6800      	ldr	r0, [r0, #0]
 8004bbe:	f7ff bf7f 	b.w	8004ac0 <_strtol_l.constprop.0>
 8004bc2:	bf00      	nop
 8004bc4:	20000014 	.word	0x20000014

08004bc8 <sniprintf>:
 8004bc8:	b40c      	push	{r2, r3}
 8004bca:	b530      	push	{r4, r5, lr}
 8004bcc:	4b17      	ldr	r3, [pc, #92]	@ (8004c2c <sniprintf+0x64>)
 8004bce:	1e0c      	subs	r4, r1, #0
 8004bd0:	681d      	ldr	r5, [r3, #0]
 8004bd2:	b09d      	sub	sp, #116	@ 0x74
 8004bd4:	da08      	bge.n	8004be8 <sniprintf+0x20>
 8004bd6:	238b      	movs	r3, #139	@ 0x8b
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bdc:	602b      	str	r3, [r5, #0]
 8004bde:	b01d      	add	sp, #116	@ 0x74
 8004be0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004be4:	b002      	add	sp, #8
 8004be6:	4770      	bx	lr
 8004be8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004bec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004bf0:	bf0c      	ite	eq
 8004bf2:	4623      	moveq	r3, r4
 8004bf4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004bf8:	9304      	str	r3, [sp, #16]
 8004bfa:	9307      	str	r3, [sp, #28]
 8004bfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c00:	9002      	str	r0, [sp, #8]
 8004c02:	9006      	str	r0, [sp, #24]
 8004c04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c08:	4628      	mov	r0, r5
 8004c0a:	ab21      	add	r3, sp, #132	@ 0x84
 8004c0c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c0e:	a902      	add	r1, sp, #8
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	f000 f9b3 	bl	8004f7c <_svfiprintf_r>
 8004c16:	1c43      	adds	r3, r0, #1
 8004c18:	bfbc      	itt	lt
 8004c1a:	238b      	movlt	r3, #139	@ 0x8b
 8004c1c:	602b      	strlt	r3, [r5, #0]
 8004c1e:	2c00      	cmp	r4, #0
 8004c20:	d0dd      	beq.n	8004bde <sniprintf+0x16>
 8004c22:	2200      	movs	r2, #0
 8004c24:	9b02      	ldr	r3, [sp, #8]
 8004c26:	701a      	strb	r2, [r3, #0]
 8004c28:	e7d9      	b.n	8004bde <sniprintf+0x16>
 8004c2a:	bf00      	nop
 8004c2c:	20000014 	.word	0x20000014

08004c30 <memset>:
 8004c30:	4603      	mov	r3, r0
 8004c32:	4402      	add	r2, r0
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d100      	bne.n	8004c3a <memset+0xa>
 8004c38:	4770      	bx	lr
 8004c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c3e:	e7f9      	b.n	8004c34 <memset+0x4>

08004c40 <strncmp>:
 8004c40:	b510      	push	{r4, lr}
 8004c42:	b16a      	cbz	r2, 8004c60 <strncmp+0x20>
 8004c44:	3901      	subs	r1, #1
 8004c46:	1884      	adds	r4, r0, r2
 8004c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d103      	bne.n	8004c5c <strncmp+0x1c>
 8004c54:	42a0      	cmp	r0, r4
 8004c56:	d001      	beq.n	8004c5c <strncmp+0x1c>
 8004c58:	2a00      	cmp	r2, #0
 8004c5a:	d1f5      	bne.n	8004c48 <strncmp+0x8>
 8004c5c:	1ad0      	subs	r0, r2, r3
 8004c5e:	bd10      	pop	{r4, pc}
 8004c60:	4610      	mov	r0, r2
 8004c62:	e7fc      	b.n	8004c5e <strncmp+0x1e>

08004c64 <__errno>:
 8004c64:	4b01      	ldr	r3, [pc, #4]	@ (8004c6c <__errno+0x8>)
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	20000014 	.word	0x20000014

08004c70 <__libc_init_array>:
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	2600      	movs	r6, #0
 8004c74:	4d0c      	ldr	r5, [pc, #48]	@ (8004ca8 <__libc_init_array+0x38>)
 8004c76:	4c0d      	ldr	r4, [pc, #52]	@ (8004cac <__libc_init_array+0x3c>)
 8004c78:	1b64      	subs	r4, r4, r5
 8004c7a:	10a4      	asrs	r4, r4, #2
 8004c7c:	42a6      	cmp	r6, r4
 8004c7e:	d109      	bne.n	8004c94 <__libc_init_array+0x24>
 8004c80:	f000 fc78 	bl	8005574 <_init>
 8004c84:	2600      	movs	r6, #0
 8004c86:	4d0a      	ldr	r5, [pc, #40]	@ (8004cb0 <__libc_init_array+0x40>)
 8004c88:	4c0a      	ldr	r4, [pc, #40]	@ (8004cb4 <__libc_init_array+0x44>)
 8004c8a:	1b64      	subs	r4, r4, r5
 8004c8c:	10a4      	asrs	r4, r4, #2
 8004c8e:	42a6      	cmp	r6, r4
 8004c90:	d105      	bne.n	8004c9e <__libc_init_array+0x2e>
 8004c92:	bd70      	pop	{r4, r5, r6, pc}
 8004c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c98:	4798      	blx	r3
 8004c9a:	3601      	adds	r6, #1
 8004c9c:	e7ee      	b.n	8004c7c <__libc_init_array+0xc>
 8004c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca2:	4798      	blx	r3
 8004ca4:	3601      	adds	r6, #1
 8004ca6:	e7f2      	b.n	8004c8e <__libc_init_array+0x1e>
 8004ca8:	080059e8 	.word	0x080059e8
 8004cac:	080059e8 	.word	0x080059e8
 8004cb0:	080059e8 	.word	0x080059e8
 8004cb4:	080059ec 	.word	0x080059ec

08004cb8 <__retarget_lock_acquire_recursive>:
 8004cb8:	4770      	bx	lr

08004cba <__retarget_lock_release_recursive>:
 8004cba:	4770      	bx	lr

08004cbc <memcpy>:
 8004cbc:	440a      	add	r2, r1
 8004cbe:	4291      	cmp	r1, r2
 8004cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cc4:	d100      	bne.n	8004cc8 <memcpy+0xc>
 8004cc6:	4770      	bx	lr
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cce:	4291      	cmp	r1, r2
 8004cd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cd4:	d1f9      	bne.n	8004cca <memcpy+0xe>
 8004cd6:	bd10      	pop	{r4, pc}

08004cd8 <_free_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4605      	mov	r5, r0
 8004cdc:	2900      	cmp	r1, #0
 8004cde:	d040      	beq.n	8004d62 <_free_r+0x8a>
 8004ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce4:	1f0c      	subs	r4, r1, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bfb8      	it	lt
 8004cea:	18e4      	addlt	r4, r4, r3
 8004cec:	f000 f8de 	bl	8004eac <__malloc_lock>
 8004cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d64 <_free_r+0x8c>)
 8004cf2:	6813      	ldr	r3, [r2, #0]
 8004cf4:	b933      	cbnz	r3, 8004d04 <_free_r+0x2c>
 8004cf6:	6063      	str	r3, [r4, #4]
 8004cf8:	6014      	str	r4, [r2, #0]
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d00:	f000 b8da 	b.w	8004eb8 <__malloc_unlock>
 8004d04:	42a3      	cmp	r3, r4
 8004d06:	d908      	bls.n	8004d1a <_free_r+0x42>
 8004d08:	6820      	ldr	r0, [r4, #0]
 8004d0a:	1821      	adds	r1, r4, r0
 8004d0c:	428b      	cmp	r3, r1
 8004d0e:	bf01      	itttt	eq
 8004d10:	6819      	ldreq	r1, [r3, #0]
 8004d12:	685b      	ldreq	r3, [r3, #4]
 8004d14:	1809      	addeq	r1, r1, r0
 8004d16:	6021      	streq	r1, [r4, #0]
 8004d18:	e7ed      	b.n	8004cf6 <_free_r+0x1e>
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	b10b      	cbz	r3, 8004d24 <_free_r+0x4c>
 8004d20:	42a3      	cmp	r3, r4
 8004d22:	d9fa      	bls.n	8004d1a <_free_r+0x42>
 8004d24:	6811      	ldr	r1, [r2, #0]
 8004d26:	1850      	adds	r0, r2, r1
 8004d28:	42a0      	cmp	r0, r4
 8004d2a:	d10b      	bne.n	8004d44 <_free_r+0x6c>
 8004d2c:	6820      	ldr	r0, [r4, #0]
 8004d2e:	4401      	add	r1, r0
 8004d30:	1850      	adds	r0, r2, r1
 8004d32:	4283      	cmp	r3, r0
 8004d34:	6011      	str	r1, [r2, #0]
 8004d36:	d1e0      	bne.n	8004cfa <_free_r+0x22>
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4408      	add	r0, r1
 8004d3e:	6010      	str	r0, [r2, #0]
 8004d40:	6053      	str	r3, [r2, #4]
 8004d42:	e7da      	b.n	8004cfa <_free_r+0x22>
 8004d44:	d902      	bls.n	8004d4c <_free_r+0x74>
 8004d46:	230c      	movs	r3, #12
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	e7d6      	b.n	8004cfa <_free_r+0x22>
 8004d4c:	6820      	ldr	r0, [r4, #0]
 8004d4e:	1821      	adds	r1, r4, r0
 8004d50:	428b      	cmp	r3, r1
 8004d52:	bf01      	itttt	eq
 8004d54:	6819      	ldreq	r1, [r3, #0]
 8004d56:	685b      	ldreq	r3, [r3, #4]
 8004d58:	1809      	addeq	r1, r1, r0
 8004d5a:	6021      	streq	r1, [r4, #0]
 8004d5c:	6063      	str	r3, [r4, #4]
 8004d5e:	6054      	str	r4, [r2, #4]
 8004d60:	e7cb      	b.n	8004cfa <_free_r+0x22>
 8004d62:	bd38      	pop	{r3, r4, r5, pc}
 8004d64:	20001230 	.word	0x20001230

08004d68 <sbrk_aligned>:
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	4e0f      	ldr	r6, [pc, #60]	@ (8004da8 <sbrk_aligned+0x40>)
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	6831      	ldr	r1, [r6, #0]
 8004d70:	4605      	mov	r5, r0
 8004d72:	b911      	cbnz	r1, 8004d7a <sbrk_aligned+0x12>
 8004d74:	f000 fbaa 	bl	80054cc <_sbrk_r>
 8004d78:	6030      	str	r0, [r6, #0]
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	f000 fba5 	bl	80054cc <_sbrk_r>
 8004d82:	1c43      	adds	r3, r0, #1
 8004d84:	d103      	bne.n	8004d8e <sbrk_aligned+0x26>
 8004d86:	f04f 34ff 	mov.w	r4, #4294967295
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	bd70      	pop	{r4, r5, r6, pc}
 8004d8e:	1cc4      	adds	r4, r0, #3
 8004d90:	f024 0403 	bic.w	r4, r4, #3
 8004d94:	42a0      	cmp	r0, r4
 8004d96:	d0f8      	beq.n	8004d8a <sbrk_aligned+0x22>
 8004d98:	1a21      	subs	r1, r4, r0
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f000 fb96 	bl	80054cc <_sbrk_r>
 8004da0:	3001      	adds	r0, #1
 8004da2:	d1f2      	bne.n	8004d8a <sbrk_aligned+0x22>
 8004da4:	e7ef      	b.n	8004d86 <sbrk_aligned+0x1e>
 8004da6:	bf00      	nop
 8004da8:	2000122c 	.word	0x2000122c

08004dac <_malloc_r>:
 8004dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004db0:	1ccd      	adds	r5, r1, #3
 8004db2:	f025 0503 	bic.w	r5, r5, #3
 8004db6:	3508      	adds	r5, #8
 8004db8:	2d0c      	cmp	r5, #12
 8004dba:	bf38      	it	cc
 8004dbc:	250c      	movcc	r5, #12
 8004dbe:	2d00      	cmp	r5, #0
 8004dc0:	4606      	mov	r6, r0
 8004dc2:	db01      	blt.n	8004dc8 <_malloc_r+0x1c>
 8004dc4:	42a9      	cmp	r1, r5
 8004dc6:	d904      	bls.n	8004dd2 <_malloc_r+0x26>
 8004dc8:	230c      	movs	r3, #12
 8004dca:	6033      	str	r3, [r6, #0]
 8004dcc:	2000      	movs	r0, #0
 8004dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ea8 <_malloc_r+0xfc>
 8004dd6:	f000 f869 	bl	8004eac <__malloc_lock>
 8004dda:	f8d8 3000 	ldr.w	r3, [r8]
 8004dde:	461c      	mov	r4, r3
 8004de0:	bb44      	cbnz	r4, 8004e34 <_malloc_r+0x88>
 8004de2:	4629      	mov	r1, r5
 8004de4:	4630      	mov	r0, r6
 8004de6:	f7ff ffbf 	bl	8004d68 <sbrk_aligned>
 8004dea:	1c43      	adds	r3, r0, #1
 8004dec:	4604      	mov	r4, r0
 8004dee:	d158      	bne.n	8004ea2 <_malloc_r+0xf6>
 8004df0:	f8d8 4000 	ldr.w	r4, [r8]
 8004df4:	4627      	mov	r7, r4
 8004df6:	2f00      	cmp	r7, #0
 8004df8:	d143      	bne.n	8004e82 <_malloc_r+0xd6>
 8004dfa:	2c00      	cmp	r4, #0
 8004dfc:	d04b      	beq.n	8004e96 <_malloc_r+0xea>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	4639      	mov	r1, r7
 8004e02:	4630      	mov	r0, r6
 8004e04:	eb04 0903 	add.w	r9, r4, r3
 8004e08:	f000 fb60 	bl	80054cc <_sbrk_r>
 8004e0c:	4581      	cmp	r9, r0
 8004e0e:	d142      	bne.n	8004e96 <_malloc_r+0xea>
 8004e10:	6821      	ldr	r1, [r4, #0]
 8004e12:	4630      	mov	r0, r6
 8004e14:	1a6d      	subs	r5, r5, r1
 8004e16:	4629      	mov	r1, r5
 8004e18:	f7ff ffa6 	bl	8004d68 <sbrk_aligned>
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d03a      	beq.n	8004e96 <_malloc_r+0xea>
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	442b      	add	r3, r5
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	f8d8 3000 	ldr.w	r3, [r8]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	bb62      	cbnz	r2, 8004e88 <_malloc_r+0xdc>
 8004e2e:	f8c8 7000 	str.w	r7, [r8]
 8004e32:	e00f      	b.n	8004e54 <_malloc_r+0xa8>
 8004e34:	6822      	ldr	r2, [r4, #0]
 8004e36:	1b52      	subs	r2, r2, r5
 8004e38:	d420      	bmi.n	8004e7c <_malloc_r+0xd0>
 8004e3a:	2a0b      	cmp	r2, #11
 8004e3c:	d917      	bls.n	8004e6e <_malloc_r+0xc2>
 8004e3e:	1961      	adds	r1, r4, r5
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	6025      	str	r5, [r4, #0]
 8004e44:	bf18      	it	ne
 8004e46:	6059      	strne	r1, [r3, #4]
 8004e48:	6863      	ldr	r3, [r4, #4]
 8004e4a:	bf08      	it	eq
 8004e4c:	f8c8 1000 	streq.w	r1, [r8]
 8004e50:	5162      	str	r2, [r4, r5]
 8004e52:	604b      	str	r3, [r1, #4]
 8004e54:	4630      	mov	r0, r6
 8004e56:	f000 f82f 	bl	8004eb8 <__malloc_unlock>
 8004e5a:	f104 000b 	add.w	r0, r4, #11
 8004e5e:	1d23      	adds	r3, r4, #4
 8004e60:	f020 0007 	bic.w	r0, r0, #7
 8004e64:	1ac2      	subs	r2, r0, r3
 8004e66:	bf1c      	itt	ne
 8004e68:	1a1b      	subne	r3, r3, r0
 8004e6a:	50a3      	strne	r3, [r4, r2]
 8004e6c:	e7af      	b.n	8004dce <_malloc_r+0x22>
 8004e6e:	6862      	ldr	r2, [r4, #4]
 8004e70:	42a3      	cmp	r3, r4
 8004e72:	bf0c      	ite	eq
 8004e74:	f8c8 2000 	streq.w	r2, [r8]
 8004e78:	605a      	strne	r2, [r3, #4]
 8004e7a:	e7eb      	b.n	8004e54 <_malloc_r+0xa8>
 8004e7c:	4623      	mov	r3, r4
 8004e7e:	6864      	ldr	r4, [r4, #4]
 8004e80:	e7ae      	b.n	8004de0 <_malloc_r+0x34>
 8004e82:	463c      	mov	r4, r7
 8004e84:	687f      	ldr	r7, [r7, #4]
 8004e86:	e7b6      	b.n	8004df6 <_malloc_r+0x4a>
 8004e88:	461a      	mov	r2, r3
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	42a3      	cmp	r3, r4
 8004e8e:	d1fb      	bne.n	8004e88 <_malloc_r+0xdc>
 8004e90:	2300      	movs	r3, #0
 8004e92:	6053      	str	r3, [r2, #4]
 8004e94:	e7de      	b.n	8004e54 <_malloc_r+0xa8>
 8004e96:	230c      	movs	r3, #12
 8004e98:	4630      	mov	r0, r6
 8004e9a:	6033      	str	r3, [r6, #0]
 8004e9c:	f000 f80c 	bl	8004eb8 <__malloc_unlock>
 8004ea0:	e794      	b.n	8004dcc <_malloc_r+0x20>
 8004ea2:	6005      	str	r5, [r0, #0]
 8004ea4:	e7d6      	b.n	8004e54 <_malloc_r+0xa8>
 8004ea6:	bf00      	nop
 8004ea8:	20001230 	.word	0x20001230

08004eac <__malloc_lock>:
 8004eac:	4801      	ldr	r0, [pc, #4]	@ (8004eb4 <__malloc_lock+0x8>)
 8004eae:	f7ff bf03 	b.w	8004cb8 <__retarget_lock_acquire_recursive>
 8004eb2:	bf00      	nop
 8004eb4:	20001228 	.word	0x20001228

08004eb8 <__malloc_unlock>:
 8004eb8:	4801      	ldr	r0, [pc, #4]	@ (8004ec0 <__malloc_unlock+0x8>)
 8004eba:	f7ff befe 	b.w	8004cba <__retarget_lock_release_recursive>
 8004ebe:	bf00      	nop
 8004ec0:	20001228 	.word	0x20001228

08004ec4 <__ssputs_r>:
 8004ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec8:	461f      	mov	r7, r3
 8004eca:	688e      	ldr	r6, [r1, #8]
 8004ecc:	4682      	mov	sl, r0
 8004ece:	42be      	cmp	r6, r7
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	4690      	mov	r8, r2
 8004ed4:	680b      	ldr	r3, [r1, #0]
 8004ed6:	d82d      	bhi.n	8004f34 <__ssputs_r+0x70>
 8004ed8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004edc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ee0:	d026      	beq.n	8004f30 <__ssputs_r+0x6c>
 8004ee2:	6965      	ldr	r5, [r4, #20]
 8004ee4:	6909      	ldr	r1, [r1, #16]
 8004ee6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004eea:	eba3 0901 	sub.w	r9, r3, r1
 8004eee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ef2:	1c7b      	adds	r3, r7, #1
 8004ef4:	444b      	add	r3, r9
 8004ef6:	106d      	asrs	r5, r5, #1
 8004ef8:	429d      	cmp	r5, r3
 8004efa:	bf38      	it	cc
 8004efc:	461d      	movcc	r5, r3
 8004efe:	0553      	lsls	r3, r2, #21
 8004f00:	d527      	bpl.n	8004f52 <__ssputs_r+0x8e>
 8004f02:	4629      	mov	r1, r5
 8004f04:	f7ff ff52 	bl	8004dac <_malloc_r>
 8004f08:	4606      	mov	r6, r0
 8004f0a:	b360      	cbz	r0, 8004f66 <__ssputs_r+0xa2>
 8004f0c:	464a      	mov	r2, r9
 8004f0e:	6921      	ldr	r1, [r4, #16]
 8004f10:	f7ff fed4 	bl	8004cbc <memcpy>
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f1e:	81a3      	strh	r3, [r4, #12]
 8004f20:	6126      	str	r6, [r4, #16]
 8004f22:	444e      	add	r6, r9
 8004f24:	6026      	str	r6, [r4, #0]
 8004f26:	463e      	mov	r6, r7
 8004f28:	6165      	str	r5, [r4, #20]
 8004f2a:	eba5 0509 	sub.w	r5, r5, r9
 8004f2e:	60a5      	str	r5, [r4, #8]
 8004f30:	42be      	cmp	r6, r7
 8004f32:	d900      	bls.n	8004f36 <__ssputs_r+0x72>
 8004f34:	463e      	mov	r6, r7
 8004f36:	4632      	mov	r2, r6
 8004f38:	4641      	mov	r1, r8
 8004f3a:	6820      	ldr	r0, [r4, #0]
 8004f3c:	f000 faac 	bl	8005498 <memmove>
 8004f40:	2000      	movs	r0, #0
 8004f42:	68a3      	ldr	r3, [r4, #8]
 8004f44:	1b9b      	subs	r3, r3, r6
 8004f46:	60a3      	str	r3, [r4, #8]
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	4433      	add	r3, r6
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f52:	462a      	mov	r2, r5
 8004f54:	f000 fad8 	bl	8005508 <_realloc_r>
 8004f58:	4606      	mov	r6, r0
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d1e0      	bne.n	8004f20 <__ssputs_r+0x5c>
 8004f5e:	4650      	mov	r0, sl
 8004f60:	6921      	ldr	r1, [r4, #16]
 8004f62:	f7ff feb9 	bl	8004cd8 <_free_r>
 8004f66:	230c      	movs	r3, #12
 8004f68:	f8ca 3000 	str.w	r3, [sl]
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f76:	81a3      	strh	r3, [r4, #12]
 8004f78:	e7e9      	b.n	8004f4e <__ssputs_r+0x8a>
	...

08004f7c <_svfiprintf_r>:
 8004f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f80:	4698      	mov	r8, r3
 8004f82:	898b      	ldrh	r3, [r1, #12]
 8004f84:	4607      	mov	r7, r0
 8004f86:	061b      	lsls	r3, r3, #24
 8004f88:	460d      	mov	r5, r1
 8004f8a:	4614      	mov	r4, r2
 8004f8c:	b09d      	sub	sp, #116	@ 0x74
 8004f8e:	d510      	bpl.n	8004fb2 <_svfiprintf_r+0x36>
 8004f90:	690b      	ldr	r3, [r1, #16]
 8004f92:	b973      	cbnz	r3, 8004fb2 <_svfiprintf_r+0x36>
 8004f94:	2140      	movs	r1, #64	@ 0x40
 8004f96:	f7ff ff09 	bl	8004dac <_malloc_r>
 8004f9a:	6028      	str	r0, [r5, #0]
 8004f9c:	6128      	str	r0, [r5, #16]
 8004f9e:	b930      	cbnz	r0, 8004fae <_svfiprintf_r+0x32>
 8004fa0:	230c      	movs	r3, #12
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa8:	b01d      	add	sp, #116	@ 0x74
 8004faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fae:	2340      	movs	r3, #64	@ 0x40
 8004fb0:	616b      	str	r3, [r5, #20]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fb6:	2320      	movs	r3, #32
 8004fb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004fbc:	2330      	movs	r3, #48	@ 0x30
 8004fbe:	f04f 0901 	mov.w	r9, #1
 8004fc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fc6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005160 <_svfiprintf_r+0x1e4>
 8004fca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004fce:	4623      	mov	r3, r4
 8004fd0:	469a      	mov	sl, r3
 8004fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fd6:	b10a      	cbz	r2, 8004fdc <_svfiprintf_r+0x60>
 8004fd8:	2a25      	cmp	r2, #37	@ 0x25
 8004fda:	d1f9      	bne.n	8004fd0 <_svfiprintf_r+0x54>
 8004fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8004fe0:	d00b      	beq.n	8004ffa <_svfiprintf_r+0x7e>
 8004fe2:	465b      	mov	r3, fp
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	4638      	mov	r0, r7
 8004fea:	f7ff ff6b 	bl	8004ec4 <__ssputs_r>
 8004fee:	3001      	adds	r0, #1
 8004ff0:	f000 80a7 	beq.w	8005142 <_svfiprintf_r+0x1c6>
 8004ff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ff6:	445a      	add	r2, fp
 8004ff8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 809f 	beq.w	8005142 <_svfiprintf_r+0x1c6>
 8005004:	2300      	movs	r3, #0
 8005006:	f04f 32ff 	mov.w	r2, #4294967295
 800500a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800500e:	f10a 0a01 	add.w	sl, sl, #1
 8005012:	9304      	str	r3, [sp, #16]
 8005014:	9307      	str	r3, [sp, #28]
 8005016:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800501a:	931a      	str	r3, [sp, #104]	@ 0x68
 800501c:	4654      	mov	r4, sl
 800501e:	2205      	movs	r2, #5
 8005020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005024:	484e      	ldr	r0, [pc, #312]	@ (8005160 <_svfiprintf_r+0x1e4>)
 8005026:	f000 fa61 	bl	80054ec <memchr>
 800502a:	9a04      	ldr	r2, [sp, #16]
 800502c:	b9d8      	cbnz	r0, 8005066 <_svfiprintf_r+0xea>
 800502e:	06d0      	lsls	r0, r2, #27
 8005030:	bf44      	itt	mi
 8005032:	2320      	movmi	r3, #32
 8005034:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005038:	0711      	lsls	r1, r2, #28
 800503a:	bf44      	itt	mi
 800503c:	232b      	movmi	r3, #43	@ 0x2b
 800503e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005042:	f89a 3000 	ldrb.w	r3, [sl]
 8005046:	2b2a      	cmp	r3, #42	@ 0x2a
 8005048:	d015      	beq.n	8005076 <_svfiprintf_r+0xfa>
 800504a:	4654      	mov	r4, sl
 800504c:	2000      	movs	r0, #0
 800504e:	f04f 0c0a 	mov.w	ip, #10
 8005052:	9a07      	ldr	r2, [sp, #28]
 8005054:	4621      	mov	r1, r4
 8005056:	f811 3b01 	ldrb.w	r3, [r1], #1
 800505a:	3b30      	subs	r3, #48	@ 0x30
 800505c:	2b09      	cmp	r3, #9
 800505e:	d94b      	bls.n	80050f8 <_svfiprintf_r+0x17c>
 8005060:	b1b0      	cbz	r0, 8005090 <_svfiprintf_r+0x114>
 8005062:	9207      	str	r2, [sp, #28]
 8005064:	e014      	b.n	8005090 <_svfiprintf_r+0x114>
 8005066:	eba0 0308 	sub.w	r3, r0, r8
 800506a:	fa09 f303 	lsl.w	r3, r9, r3
 800506e:	4313      	orrs	r3, r2
 8005070:	46a2      	mov	sl, r4
 8005072:	9304      	str	r3, [sp, #16]
 8005074:	e7d2      	b.n	800501c <_svfiprintf_r+0xa0>
 8005076:	9b03      	ldr	r3, [sp, #12]
 8005078:	1d19      	adds	r1, r3, #4
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	9103      	str	r1, [sp, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	bfbb      	ittet	lt
 8005082:	425b      	neglt	r3, r3
 8005084:	f042 0202 	orrlt.w	r2, r2, #2
 8005088:	9307      	strge	r3, [sp, #28]
 800508a:	9307      	strlt	r3, [sp, #28]
 800508c:	bfb8      	it	lt
 800508e:	9204      	strlt	r2, [sp, #16]
 8005090:	7823      	ldrb	r3, [r4, #0]
 8005092:	2b2e      	cmp	r3, #46	@ 0x2e
 8005094:	d10a      	bne.n	80050ac <_svfiprintf_r+0x130>
 8005096:	7863      	ldrb	r3, [r4, #1]
 8005098:	2b2a      	cmp	r3, #42	@ 0x2a
 800509a:	d132      	bne.n	8005102 <_svfiprintf_r+0x186>
 800509c:	9b03      	ldr	r3, [sp, #12]
 800509e:	3402      	adds	r4, #2
 80050a0:	1d1a      	adds	r2, r3, #4
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	9203      	str	r2, [sp, #12]
 80050a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050aa:	9305      	str	r3, [sp, #20]
 80050ac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005164 <_svfiprintf_r+0x1e8>
 80050b0:	2203      	movs	r2, #3
 80050b2:	4650      	mov	r0, sl
 80050b4:	7821      	ldrb	r1, [r4, #0]
 80050b6:	f000 fa19 	bl	80054ec <memchr>
 80050ba:	b138      	cbz	r0, 80050cc <_svfiprintf_r+0x150>
 80050bc:	2240      	movs	r2, #64	@ 0x40
 80050be:	9b04      	ldr	r3, [sp, #16]
 80050c0:	eba0 000a 	sub.w	r0, r0, sl
 80050c4:	4082      	lsls	r2, r0
 80050c6:	4313      	orrs	r3, r2
 80050c8:	3401      	adds	r4, #1
 80050ca:	9304      	str	r3, [sp, #16]
 80050cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d0:	2206      	movs	r2, #6
 80050d2:	4825      	ldr	r0, [pc, #148]	@ (8005168 <_svfiprintf_r+0x1ec>)
 80050d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050d8:	f000 fa08 	bl	80054ec <memchr>
 80050dc:	2800      	cmp	r0, #0
 80050de:	d036      	beq.n	800514e <_svfiprintf_r+0x1d2>
 80050e0:	4b22      	ldr	r3, [pc, #136]	@ (800516c <_svfiprintf_r+0x1f0>)
 80050e2:	bb1b      	cbnz	r3, 800512c <_svfiprintf_r+0x1b0>
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	3307      	adds	r3, #7
 80050e8:	f023 0307 	bic.w	r3, r3, #7
 80050ec:	3308      	adds	r3, #8
 80050ee:	9303      	str	r3, [sp, #12]
 80050f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050f2:	4433      	add	r3, r6
 80050f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80050f6:	e76a      	b.n	8004fce <_svfiprintf_r+0x52>
 80050f8:	460c      	mov	r4, r1
 80050fa:	2001      	movs	r0, #1
 80050fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005100:	e7a8      	b.n	8005054 <_svfiprintf_r+0xd8>
 8005102:	2300      	movs	r3, #0
 8005104:	f04f 0c0a 	mov.w	ip, #10
 8005108:	4619      	mov	r1, r3
 800510a:	3401      	adds	r4, #1
 800510c:	9305      	str	r3, [sp, #20]
 800510e:	4620      	mov	r0, r4
 8005110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005114:	3a30      	subs	r2, #48	@ 0x30
 8005116:	2a09      	cmp	r2, #9
 8005118:	d903      	bls.n	8005122 <_svfiprintf_r+0x1a6>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0c6      	beq.n	80050ac <_svfiprintf_r+0x130>
 800511e:	9105      	str	r1, [sp, #20]
 8005120:	e7c4      	b.n	80050ac <_svfiprintf_r+0x130>
 8005122:	4604      	mov	r4, r0
 8005124:	2301      	movs	r3, #1
 8005126:	fb0c 2101 	mla	r1, ip, r1, r2
 800512a:	e7f0      	b.n	800510e <_svfiprintf_r+0x192>
 800512c:	ab03      	add	r3, sp, #12
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	462a      	mov	r2, r5
 8005132:	4638      	mov	r0, r7
 8005134:	4b0e      	ldr	r3, [pc, #56]	@ (8005170 <_svfiprintf_r+0x1f4>)
 8005136:	a904      	add	r1, sp, #16
 8005138:	f3af 8000 	nop.w
 800513c:	1c42      	adds	r2, r0, #1
 800513e:	4606      	mov	r6, r0
 8005140:	d1d6      	bne.n	80050f0 <_svfiprintf_r+0x174>
 8005142:	89ab      	ldrh	r3, [r5, #12]
 8005144:	065b      	lsls	r3, r3, #25
 8005146:	f53f af2d 	bmi.w	8004fa4 <_svfiprintf_r+0x28>
 800514a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800514c:	e72c      	b.n	8004fa8 <_svfiprintf_r+0x2c>
 800514e:	ab03      	add	r3, sp, #12
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	462a      	mov	r2, r5
 8005154:	4638      	mov	r0, r7
 8005156:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <_svfiprintf_r+0x1f4>)
 8005158:	a904      	add	r1, sp, #16
 800515a:	f000 f87d 	bl	8005258 <_printf_i>
 800515e:	e7ed      	b.n	800513c <_svfiprintf_r+0x1c0>
 8005160:	080059ab 	.word	0x080059ab
 8005164:	080059b1 	.word	0x080059b1
 8005168:	080059b5 	.word	0x080059b5
 800516c:	00000000 	.word	0x00000000
 8005170:	08004ec5 	.word	0x08004ec5

08005174 <_printf_common>:
 8005174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005178:	4616      	mov	r6, r2
 800517a:	4698      	mov	r8, r3
 800517c:	688a      	ldr	r2, [r1, #8]
 800517e:	690b      	ldr	r3, [r1, #16]
 8005180:	4607      	mov	r7, r0
 8005182:	4293      	cmp	r3, r2
 8005184:	bfb8      	it	lt
 8005186:	4613      	movlt	r3, r2
 8005188:	6033      	str	r3, [r6, #0]
 800518a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800518e:	460c      	mov	r4, r1
 8005190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005194:	b10a      	cbz	r2, 800519a <_printf_common+0x26>
 8005196:	3301      	adds	r3, #1
 8005198:	6033      	str	r3, [r6, #0]
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	0699      	lsls	r1, r3, #26
 800519e:	bf42      	ittt	mi
 80051a0:	6833      	ldrmi	r3, [r6, #0]
 80051a2:	3302      	addmi	r3, #2
 80051a4:	6033      	strmi	r3, [r6, #0]
 80051a6:	6825      	ldr	r5, [r4, #0]
 80051a8:	f015 0506 	ands.w	r5, r5, #6
 80051ac:	d106      	bne.n	80051bc <_printf_common+0x48>
 80051ae:	f104 0a19 	add.w	sl, r4, #25
 80051b2:	68e3      	ldr	r3, [r4, #12]
 80051b4:	6832      	ldr	r2, [r6, #0]
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	42ab      	cmp	r3, r5
 80051ba:	dc2b      	bgt.n	8005214 <_printf_common+0xa0>
 80051bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051c0:	6822      	ldr	r2, [r4, #0]
 80051c2:	3b00      	subs	r3, #0
 80051c4:	bf18      	it	ne
 80051c6:	2301      	movne	r3, #1
 80051c8:	0692      	lsls	r2, r2, #26
 80051ca:	d430      	bmi.n	800522e <_printf_common+0xba>
 80051cc:	4641      	mov	r1, r8
 80051ce:	4638      	mov	r0, r7
 80051d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051d4:	47c8      	blx	r9
 80051d6:	3001      	adds	r0, #1
 80051d8:	d023      	beq.n	8005222 <_printf_common+0xae>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	6922      	ldr	r2, [r4, #16]
 80051de:	f003 0306 	and.w	r3, r3, #6
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	bf14      	ite	ne
 80051e6:	2500      	movne	r5, #0
 80051e8:	6833      	ldreq	r3, [r6, #0]
 80051ea:	f04f 0600 	mov.w	r6, #0
 80051ee:	bf08      	it	eq
 80051f0:	68e5      	ldreq	r5, [r4, #12]
 80051f2:	f104 041a 	add.w	r4, r4, #26
 80051f6:	bf08      	it	eq
 80051f8:	1aed      	subeq	r5, r5, r3
 80051fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80051fe:	bf08      	it	eq
 8005200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005204:	4293      	cmp	r3, r2
 8005206:	bfc4      	itt	gt
 8005208:	1a9b      	subgt	r3, r3, r2
 800520a:	18ed      	addgt	r5, r5, r3
 800520c:	42b5      	cmp	r5, r6
 800520e:	d11a      	bne.n	8005246 <_printf_common+0xd2>
 8005210:	2000      	movs	r0, #0
 8005212:	e008      	b.n	8005226 <_printf_common+0xb2>
 8005214:	2301      	movs	r3, #1
 8005216:	4652      	mov	r2, sl
 8005218:	4641      	mov	r1, r8
 800521a:	4638      	mov	r0, r7
 800521c:	47c8      	blx	r9
 800521e:	3001      	adds	r0, #1
 8005220:	d103      	bne.n	800522a <_printf_common+0xb6>
 8005222:	f04f 30ff 	mov.w	r0, #4294967295
 8005226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522a:	3501      	adds	r5, #1
 800522c:	e7c1      	b.n	80051b2 <_printf_common+0x3e>
 800522e:	2030      	movs	r0, #48	@ 0x30
 8005230:	18e1      	adds	r1, r4, r3
 8005232:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800523c:	4422      	add	r2, r4
 800523e:	3302      	adds	r3, #2
 8005240:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005244:	e7c2      	b.n	80051cc <_printf_common+0x58>
 8005246:	2301      	movs	r3, #1
 8005248:	4622      	mov	r2, r4
 800524a:	4641      	mov	r1, r8
 800524c:	4638      	mov	r0, r7
 800524e:	47c8      	blx	r9
 8005250:	3001      	adds	r0, #1
 8005252:	d0e6      	beq.n	8005222 <_printf_common+0xae>
 8005254:	3601      	adds	r6, #1
 8005256:	e7d9      	b.n	800520c <_printf_common+0x98>

08005258 <_printf_i>:
 8005258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800525c:	7e0f      	ldrb	r7, [r1, #24]
 800525e:	4691      	mov	r9, r2
 8005260:	2f78      	cmp	r7, #120	@ 0x78
 8005262:	4680      	mov	r8, r0
 8005264:	460c      	mov	r4, r1
 8005266:	469a      	mov	sl, r3
 8005268:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800526a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800526e:	d807      	bhi.n	8005280 <_printf_i+0x28>
 8005270:	2f62      	cmp	r7, #98	@ 0x62
 8005272:	d80a      	bhi.n	800528a <_printf_i+0x32>
 8005274:	2f00      	cmp	r7, #0
 8005276:	f000 80d3 	beq.w	8005420 <_printf_i+0x1c8>
 800527a:	2f58      	cmp	r7, #88	@ 0x58
 800527c:	f000 80ba 	beq.w	80053f4 <_printf_i+0x19c>
 8005280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005284:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005288:	e03a      	b.n	8005300 <_printf_i+0xa8>
 800528a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800528e:	2b15      	cmp	r3, #21
 8005290:	d8f6      	bhi.n	8005280 <_printf_i+0x28>
 8005292:	a101      	add	r1, pc, #4	@ (adr r1, 8005298 <_printf_i+0x40>)
 8005294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005298:	080052f1 	.word	0x080052f1
 800529c:	08005305 	.word	0x08005305
 80052a0:	08005281 	.word	0x08005281
 80052a4:	08005281 	.word	0x08005281
 80052a8:	08005281 	.word	0x08005281
 80052ac:	08005281 	.word	0x08005281
 80052b0:	08005305 	.word	0x08005305
 80052b4:	08005281 	.word	0x08005281
 80052b8:	08005281 	.word	0x08005281
 80052bc:	08005281 	.word	0x08005281
 80052c0:	08005281 	.word	0x08005281
 80052c4:	08005407 	.word	0x08005407
 80052c8:	0800532f 	.word	0x0800532f
 80052cc:	080053c1 	.word	0x080053c1
 80052d0:	08005281 	.word	0x08005281
 80052d4:	08005281 	.word	0x08005281
 80052d8:	08005429 	.word	0x08005429
 80052dc:	08005281 	.word	0x08005281
 80052e0:	0800532f 	.word	0x0800532f
 80052e4:	08005281 	.word	0x08005281
 80052e8:	08005281 	.word	0x08005281
 80052ec:	080053c9 	.word	0x080053c9
 80052f0:	6833      	ldr	r3, [r6, #0]
 80052f2:	1d1a      	adds	r2, r3, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6032      	str	r2, [r6, #0]
 80052f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005300:	2301      	movs	r3, #1
 8005302:	e09e      	b.n	8005442 <_printf_i+0x1ea>
 8005304:	6833      	ldr	r3, [r6, #0]
 8005306:	6820      	ldr	r0, [r4, #0]
 8005308:	1d19      	adds	r1, r3, #4
 800530a:	6031      	str	r1, [r6, #0]
 800530c:	0606      	lsls	r6, r0, #24
 800530e:	d501      	bpl.n	8005314 <_printf_i+0xbc>
 8005310:	681d      	ldr	r5, [r3, #0]
 8005312:	e003      	b.n	800531c <_printf_i+0xc4>
 8005314:	0645      	lsls	r5, r0, #25
 8005316:	d5fb      	bpl.n	8005310 <_printf_i+0xb8>
 8005318:	f9b3 5000 	ldrsh.w	r5, [r3]
 800531c:	2d00      	cmp	r5, #0
 800531e:	da03      	bge.n	8005328 <_printf_i+0xd0>
 8005320:	232d      	movs	r3, #45	@ 0x2d
 8005322:	426d      	negs	r5, r5
 8005324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005328:	230a      	movs	r3, #10
 800532a:	4859      	ldr	r0, [pc, #356]	@ (8005490 <_printf_i+0x238>)
 800532c:	e011      	b.n	8005352 <_printf_i+0xfa>
 800532e:	6821      	ldr	r1, [r4, #0]
 8005330:	6833      	ldr	r3, [r6, #0]
 8005332:	0608      	lsls	r0, r1, #24
 8005334:	f853 5b04 	ldr.w	r5, [r3], #4
 8005338:	d402      	bmi.n	8005340 <_printf_i+0xe8>
 800533a:	0649      	lsls	r1, r1, #25
 800533c:	bf48      	it	mi
 800533e:	b2ad      	uxthmi	r5, r5
 8005340:	2f6f      	cmp	r7, #111	@ 0x6f
 8005342:	6033      	str	r3, [r6, #0]
 8005344:	bf14      	ite	ne
 8005346:	230a      	movne	r3, #10
 8005348:	2308      	moveq	r3, #8
 800534a:	4851      	ldr	r0, [pc, #324]	@ (8005490 <_printf_i+0x238>)
 800534c:	2100      	movs	r1, #0
 800534e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005352:	6866      	ldr	r6, [r4, #4]
 8005354:	2e00      	cmp	r6, #0
 8005356:	bfa8      	it	ge
 8005358:	6821      	ldrge	r1, [r4, #0]
 800535a:	60a6      	str	r6, [r4, #8]
 800535c:	bfa4      	itt	ge
 800535e:	f021 0104 	bicge.w	r1, r1, #4
 8005362:	6021      	strge	r1, [r4, #0]
 8005364:	b90d      	cbnz	r5, 800536a <_printf_i+0x112>
 8005366:	2e00      	cmp	r6, #0
 8005368:	d04b      	beq.n	8005402 <_printf_i+0x1aa>
 800536a:	4616      	mov	r6, r2
 800536c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005370:	fb03 5711 	mls	r7, r3, r1, r5
 8005374:	5dc7      	ldrb	r7, [r0, r7]
 8005376:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800537a:	462f      	mov	r7, r5
 800537c:	42bb      	cmp	r3, r7
 800537e:	460d      	mov	r5, r1
 8005380:	d9f4      	bls.n	800536c <_printf_i+0x114>
 8005382:	2b08      	cmp	r3, #8
 8005384:	d10b      	bne.n	800539e <_printf_i+0x146>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	07df      	lsls	r7, r3, #31
 800538a:	d508      	bpl.n	800539e <_printf_i+0x146>
 800538c:	6923      	ldr	r3, [r4, #16]
 800538e:	6861      	ldr	r1, [r4, #4]
 8005390:	4299      	cmp	r1, r3
 8005392:	bfde      	ittt	le
 8005394:	2330      	movle	r3, #48	@ 0x30
 8005396:	f806 3c01 	strble.w	r3, [r6, #-1]
 800539a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800539e:	1b92      	subs	r2, r2, r6
 80053a0:	6122      	str	r2, [r4, #16]
 80053a2:	464b      	mov	r3, r9
 80053a4:	4621      	mov	r1, r4
 80053a6:	4640      	mov	r0, r8
 80053a8:	f8cd a000 	str.w	sl, [sp]
 80053ac:	aa03      	add	r2, sp, #12
 80053ae:	f7ff fee1 	bl	8005174 <_printf_common>
 80053b2:	3001      	adds	r0, #1
 80053b4:	d14a      	bne.n	800544c <_printf_i+0x1f4>
 80053b6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ba:	b004      	add	sp, #16
 80053bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	f043 0320 	orr.w	r3, r3, #32
 80053c6:	6023      	str	r3, [r4, #0]
 80053c8:	2778      	movs	r7, #120	@ 0x78
 80053ca:	4832      	ldr	r0, [pc, #200]	@ (8005494 <_printf_i+0x23c>)
 80053cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	6831      	ldr	r1, [r6, #0]
 80053d4:	061f      	lsls	r7, r3, #24
 80053d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80053da:	d402      	bmi.n	80053e2 <_printf_i+0x18a>
 80053dc:	065f      	lsls	r7, r3, #25
 80053de:	bf48      	it	mi
 80053e0:	b2ad      	uxthmi	r5, r5
 80053e2:	6031      	str	r1, [r6, #0]
 80053e4:	07d9      	lsls	r1, r3, #31
 80053e6:	bf44      	itt	mi
 80053e8:	f043 0320 	orrmi.w	r3, r3, #32
 80053ec:	6023      	strmi	r3, [r4, #0]
 80053ee:	b11d      	cbz	r5, 80053f8 <_printf_i+0x1a0>
 80053f0:	2310      	movs	r3, #16
 80053f2:	e7ab      	b.n	800534c <_printf_i+0xf4>
 80053f4:	4826      	ldr	r0, [pc, #152]	@ (8005490 <_printf_i+0x238>)
 80053f6:	e7e9      	b.n	80053cc <_printf_i+0x174>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	f023 0320 	bic.w	r3, r3, #32
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	e7f6      	b.n	80053f0 <_printf_i+0x198>
 8005402:	4616      	mov	r6, r2
 8005404:	e7bd      	b.n	8005382 <_printf_i+0x12a>
 8005406:	6833      	ldr	r3, [r6, #0]
 8005408:	6825      	ldr	r5, [r4, #0]
 800540a:	1d18      	adds	r0, r3, #4
 800540c:	6961      	ldr	r1, [r4, #20]
 800540e:	6030      	str	r0, [r6, #0]
 8005410:	062e      	lsls	r6, r5, #24
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	d501      	bpl.n	800541a <_printf_i+0x1c2>
 8005416:	6019      	str	r1, [r3, #0]
 8005418:	e002      	b.n	8005420 <_printf_i+0x1c8>
 800541a:	0668      	lsls	r0, r5, #25
 800541c:	d5fb      	bpl.n	8005416 <_printf_i+0x1be>
 800541e:	8019      	strh	r1, [r3, #0]
 8005420:	2300      	movs	r3, #0
 8005422:	4616      	mov	r6, r2
 8005424:	6123      	str	r3, [r4, #16]
 8005426:	e7bc      	b.n	80053a2 <_printf_i+0x14a>
 8005428:	6833      	ldr	r3, [r6, #0]
 800542a:	2100      	movs	r1, #0
 800542c:	1d1a      	adds	r2, r3, #4
 800542e:	6032      	str	r2, [r6, #0]
 8005430:	681e      	ldr	r6, [r3, #0]
 8005432:	6862      	ldr	r2, [r4, #4]
 8005434:	4630      	mov	r0, r6
 8005436:	f000 f859 	bl	80054ec <memchr>
 800543a:	b108      	cbz	r0, 8005440 <_printf_i+0x1e8>
 800543c:	1b80      	subs	r0, r0, r6
 800543e:	6060      	str	r0, [r4, #4]
 8005440:	6863      	ldr	r3, [r4, #4]
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	2300      	movs	r3, #0
 8005446:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800544a:	e7aa      	b.n	80053a2 <_printf_i+0x14a>
 800544c:	4632      	mov	r2, r6
 800544e:	4649      	mov	r1, r9
 8005450:	4640      	mov	r0, r8
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	47d0      	blx	sl
 8005456:	3001      	adds	r0, #1
 8005458:	d0ad      	beq.n	80053b6 <_printf_i+0x15e>
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	079b      	lsls	r3, r3, #30
 800545e:	d413      	bmi.n	8005488 <_printf_i+0x230>
 8005460:	68e0      	ldr	r0, [r4, #12]
 8005462:	9b03      	ldr	r3, [sp, #12]
 8005464:	4298      	cmp	r0, r3
 8005466:	bfb8      	it	lt
 8005468:	4618      	movlt	r0, r3
 800546a:	e7a6      	b.n	80053ba <_printf_i+0x162>
 800546c:	2301      	movs	r3, #1
 800546e:	4632      	mov	r2, r6
 8005470:	4649      	mov	r1, r9
 8005472:	4640      	mov	r0, r8
 8005474:	47d0      	blx	sl
 8005476:	3001      	adds	r0, #1
 8005478:	d09d      	beq.n	80053b6 <_printf_i+0x15e>
 800547a:	3501      	adds	r5, #1
 800547c:	68e3      	ldr	r3, [r4, #12]
 800547e:	9903      	ldr	r1, [sp, #12]
 8005480:	1a5b      	subs	r3, r3, r1
 8005482:	42ab      	cmp	r3, r5
 8005484:	dcf2      	bgt.n	800546c <_printf_i+0x214>
 8005486:	e7eb      	b.n	8005460 <_printf_i+0x208>
 8005488:	2500      	movs	r5, #0
 800548a:	f104 0619 	add.w	r6, r4, #25
 800548e:	e7f5      	b.n	800547c <_printf_i+0x224>
 8005490:	080059bc 	.word	0x080059bc
 8005494:	080059cd 	.word	0x080059cd

08005498 <memmove>:
 8005498:	4288      	cmp	r0, r1
 800549a:	b510      	push	{r4, lr}
 800549c:	eb01 0402 	add.w	r4, r1, r2
 80054a0:	d902      	bls.n	80054a8 <memmove+0x10>
 80054a2:	4284      	cmp	r4, r0
 80054a4:	4623      	mov	r3, r4
 80054a6:	d807      	bhi.n	80054b8 <memmove+0x20>
 80054a8:	1e43      	subs	r3, r0, #1
 80054aa:	42a1      	cmp	r1, r4
 80054ac:	d008      	beq.n	80054c0 <memmove+0x28>
 80054ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054b6:	e7f8      	b.n	80054aa <memmove+0x12>
 80054b8:	4601      	mov	r1, r0
 80054ba:	4402      	add	r2, r0
 80054bc:	428a      	cmp	r2, r1
 80054be:	d100      	bne.n	80054c2 <memmove+0x2a>
 80054c0:	bd10      	pop	{r4, pc}
 80054c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054ca:	e7f7      	b.n	80054bc <memmove+0x24>

080054cc <_sbrk_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	2300      	movs	r3, #0
 80054d0:	4d05      	ldr	r5, [pc, #20]	@ (80054e8 <_sbrk_r+0x1c>)
 80054d2:	4604      	mov	r4, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	602b      	str	r3, [r5, #0]
 80054d8:	f7fb fb24 	bl	8000b24 <_sbrk>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_sbrk_r+0x1a>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_sbrk_r+0x1a>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	20001224 	.word	0x20001224

080054ec <memchr>:
 80054ec:	4603      	mov	r3, r0
 80054ee:	b510      	push	{r4, lr}
 80054f0:	b2c9      	uxtb	r1, r1
 80054f2:	4402      	add	r2, r0
 80054f4:	4293      	cmp	r3, r2
 80054f6:	4618      	mov	r0, r3
 80054f8:	d101      	bne.n	80054fe <memchr+0x12>
 80054fa:	2000      	movs	r0, #0
 80054fc:	e003      	b.n	8005506 <memchr+0x1a>
 80054fe:	7804      	ldrb	r4, [r0, #0]
 8005500:	3301      	adds	r3, #1
 8005502:	428c      	cmp	r4, r1
 8005504:	d1f6      	bne.n	80054f4 <memchr+0x8>
 8005506:	bd10      	pop	{r4, pc}

08005508 <_realloc_r>:
 8005508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550c:	4680      	mov	r8, r0
 800550e:	4615      	mov	r5, r2
 8005510:	460c      	mov	r4, r1
 8005512:	b921      	cbnz	r1, 800551e <_realloc_r+0x16>
 8005514:	4611      	mov	r1, r2
 8005516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800551a:	f7ff bc47 	b.w	8004dac <_malloc_r>
 800551e:	b92a      	cbnz	r2, 800552c <_realloc_r+0x24>
 8005520:	f7ff fbda 	bl	8004cd8 <_free_r>
 8005524:	2400      	movs	r4, #0
 8005526:	4620      	mov	r0, r4
 8005528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800552c:	f000 f81a 	bl	8005564 <_malloc_usable_size_r>
 8005530:	4285      	cmp	r5, r0
 8005532:	4606      	mov	r6, r0
 8005534:	d802      	bhi.n	800553c <_realloc_r+0x34>
 8005536:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800553a:	d8f4      	bhi.n	8005526 <_realloc_r+0x1e>
 800553c:	4629      	mov	r1, r5
 800553e:	4640      	mov	r0, r8
 8005540:	f7ff fc34 	bl	8004dac <_malloc_r>
 8005544:	4607      	mov	r7, r0
 8005546:	2800      	cmp	r0, #0
 8005548:	d0ec      	beq.n	8005524 <_realloc_r+0x1c>
 800554a:	42b5      	cmp	r5, r6
 800554c:	462a      	mov	r2, r5
 800554e:	4621      	mov	r1, r4
 8005550:	bf28      	it	cs
 8005552:	4632      	movcs	r2, r6
 8005554:	f7ff fbb2 	bl	8004cbc <memcpy>
 8005558:	4621      	mov	r1, r4
 800555a:	4640      	mov	r0, r8
 800555c:	f7ff fbbc 	bl	8004cd8 <_free_r>
 8005560:	463c      	mov	r4, r7
 8005562:	e7e0      	b.n	8005526 <_realloc_r+0x1e>

08005564 <_malloc_usable_size_r>:
 8005564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005568:	1f18      	subs	r0, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	bfbc      	itt	lt
 800556e:	580b      	ldrlt	r3, [r1, r0]
 8005570:	18c0      	addlt	r0, r0, r3
 8005572:	4770      	bx	lr

08005574 <_init>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	bf00      	nop
 8005578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557a:	bc08      	pop	{r3}
 800557c:	469e      	mov	lr, r3
 800557e:	4770      	bx	lr

08005580 <_fini>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	bf00      	nop
 8005584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005586:	bc08      	pop	{r3}
 8005588:	469e      	mov	lr, r3
 800558a:	4770      	bx	lr
